import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as a,e as n}from"./app-5f6064b2.js";const d={},t=n(`<h2 id="附录-切入点表达式规则" tabindex="-1"><a class="header-anchor" href="#附录-切入点表达式规则" aria-hidden="true">#</a> 附录:切入点表达式规则</h2><ul><li><p>执行任何公有方法</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>execution(public * *(..))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>执行任何以<code>set</code>开头的方法</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>execution(* set*(..))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>执行com.xyz.service.AccountService类中的任何方法__(执行某个类的任何方法)__</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>execution(* com.xyz.service.AccountService.*(..))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>执行当前包下类的任意方法（不含子包）</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>execution(* com.xyz.service.*.*(..))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>执行当前包及其子包下类的任意方法</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>execution(* com.xyz.service..*.*(..))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>执行当前包下类的任意方法（不含子包）</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>within(com.xyz.service.*)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>执行当前包及其子包下类的任意方</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>within(com.xyz.service..*)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>实现当前接口的类的任何方法</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>this(com.xyz.service.AccountService)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>实现当前接口的类的任何方法</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>target(com.xyz.service.AccountService)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>只有一个参数且实现了Serializable的任何方法</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>args(java.io.Serializable)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>有Transactional注解标签的方法（针对特定注解标签）</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@target(org.springframework.transaction.annotation.Transactional)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>有Transactional注解标签的方法（针对特定注解标签）</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> @within(org.springframework.transaction.annotation.Transactional)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>有Transactional注解标签的方法（针对特定注解标签）</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@annotation(org.springframework.transaction.annotation.Transactional)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>只有一个参数且参数有Classified注解的任何方法</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> @args(com.xyz.security.Classified)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>指定名称的bean下任意方法</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>bean(tradeService)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>满足通配符命名的bean下任意方法</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>bean(*Service)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul>`,2),s=[t];function l(r,c){return i(),a("div",null,s)}const o=e(d,[["render",l],["__file","附录(切入点表达式规则).html.vue"]]);export{o as default};
