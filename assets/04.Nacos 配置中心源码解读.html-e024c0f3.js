import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-5f6064b2.js";const p="/assets/202303081949290-2c6eae60.png",e="/assets/202303081950848-5003a79f.png",o="/assets/202303081950812-024172ca.png",c="/assets/202303081952457-74967fda.png",l="/assets/202303081952780-bc933175.png",i="/assets/202303081953007-8301aa60.png",u="/assets/202303081953497-dbd977a1.png",k="/assets/202303081955321-253016f7.png",r="/assets/202303081955820-b1bf1770.png",d="/assets/202303081955467-5d8cecba.png",v="/assets/202303081955235-0957317b.png",m="/assets/202303081955373-1b80bbaf.png",g="/assets/202303081955487-1cf9efad.png",b="/assets/202303081956915-f6d5394f.png",f="/assets/202303081957283-2301ea60.png",y="/assets/202303081959012-56585ce0.png",h="/assets/202303082003569-254863b5.png",w="/assets/202303082003606-df9303c4.png",C="/assets/202303082003881-0ae85009.png",S={},x=t('<h1 id="一-nacos-config实现原理解析" tabindex="-1"><a class="header-anchor" href="#一-nacos-config实现原理解析" aria-hidden="true">#</a> 一. Nacos Config实现原理解析</h1><p>首先，Nacos Config针对配置的管理提供了4种操作）：</p><ul><li>获取配置，从Nacos Config Server中读取配置。</li><li>监听配置：订阅感兴趣的配置，当配置发生变化的时候可以收到一个事件。</li><li>发布配置：将配置保存到Nacos Config Server中。</li><li>删除配置：删除配置中心的指定配置。</li></ul><p>而从原理层面来看，可以归类为两种类型：配置的CRUD和配置的动态监听。</p><h2 id="_1-1-配置的crud操作" tabindex="-1"><a class="header-anchor" href="#_1-1-配置的crud操作" aria-hidden="true">#</a> 1.1 配置的CRUD操作</h2><p>对于Nacos Config来说，<strong>主要是提供了配置的集中式管理功能，然后对外提供CRUD的访问接口使得应用系统可以完成配置的基本操作。</strong></p><ul><li>对于服务端来说：需要考虑的是配置如何存储，是否需要持久化。</li><li>对于客户端来说：需要考虑的是通过接口从服务器查询得到相应的数据然后返回。</li></ul><p>关系如下：<br><img src="'+p+'" alt="" loading="lazy"><br> 注意：</p><ul><li>Nacos服务端的数据存储默认采用的是Derby数据库（也支持Mysql）。</li></ul><h2 id="_1-2-配置的动态监听" tabindex="-1"><a class="header-anchor" href="#_1-2-配置的动态监听" aria-hidden="true">#</a> 1.2 配置的动态监听</h2><p>Nacos的客户端和服务端之间存在着数据交互的一种行为（不然怎么做到实时的更新和数据的查询呢），而对于这种交互行为共有两种方式：</p><ul><li>Pull模式：表示客户端从服务端主动拉取数据。</li></ul><blockquote><p>Pull模式下，客户端需要定时从服务端拉取一次数据，由于定时带来的时间间隔，<strong>因此不能保证数据的实时性</strong>，<strong>并且在服务端配置长时间不更新的情况下，客户端的定时任务会做一些无效的Pull操作。</strong></p></blockquote><ul><li>Push模式：服务端主动把数据推送到客户端。</li></ul><blockquote><p>Push模式下，<strong>服务端需要维持与客户端的长连接</strong>，<strong>如果客户端的数量比较多，那么服务端需要耗费大量的内存资源来保存每个资源</strong>，并且为了检测连接的有效性，还需要心跳机制来维持每个连接的状态。</p></blockquote><p>Nacos采用的是Pull模式（Kafka也是如此），并且<strong>采用了一种长轮询机制</strong>。客户端采用长轮询的方式定时的发起Pull请求，去检查服务端配置信息是否发生了变更，如果发生了变更，那么客户端会根据变更的数据获得最新的配置。</p><blockquote><p>长轮询：客户端发起轮询请求后，服务端如果有配置发生变更，<strong>就直接返回。</strong></p></blockquote><p>如下图：<br><img src="'+e+'" alt="" loading="lazy"><br> 详细地来说：</p><ol><li>如果客户端发起Pull请求后，发现服务端的配置和客户端的配置是保持一致的，那么服务端会“Hold”住这个请求。（<strong>服务端拿到这个连接后在指定的时间段内不会返回结果，直到这段时间内的配置发生变化</strong>）</li><li>一旦配置发生了变化，服务端会把原来“Hold”住的请求进行返回。</li></ol><p>工作流程图如下：<br><img src="'+o+`" alt="" loading="lazy"></p><p>对于流程图解释如下：</p><p>Nacos服务端收到请求后，会检查配置是否发生了变更，<strong>如果没有，那么设置一个定时任务，延期29.5秒执行。<strong>同时并且</strong>把当前的客户端长轮询连接加入到allSubs队列。</strong> 这时候有两种方式触发该连接结果的返回：</p><ul><li>第一种：等待29.5秒（长连接保持的时间）后触发自动检查机制，<strong>这时候不管配置有无发生变化，都会把结果返回给客户端。</strong></li><li>第二种：在29.5秒内的任意一个时刻，通过Nacos控制台或者API的方式对配置进行了修改，<strong>那么触发一个事件机制，监听到该事件的任务会遍历allSubs队列，找到发生变更的配置项对应的ClientLongPolling任务，将变更的数据通过该任务中的连接进行返回，即完成了一次推送操作。</strong></li></ul><h1 id="二-nacos配置中心源码分析" tabindex="-1"><a class="header-anchor" href="#二-nacos配置中心源码分析" aria-hidden="true">#</a> 二. Nacos配置中心源码分析</h1><h2 id="_2-1-config实现配置的加载" tabindex="-1"><a class="header-anchor" href="#_2-1-config实现配置的加载" aria-hidden="true">#</a> 2.1 Config实现配置的加载</h2><p>首先需要了解到，SpringCloud是基于Spring来扩展的，而Spring本身就提供了<code>Environment</code>，用来表示Spring应用程序的环境配置（包括外部环境），并且提供了统一访问的方法<code>getProperty（String key）</code>来获取配置。</p><p>对于SpringCloud而言，要实现统一配置管理并且动态的刷新配置，需要解决两个问题：</p><ol><li>如何将远程服务器上的配置（Nacos Config Server）加载到<code>Environment</code>上。</li><li>配置变更时，如何将新的配置更新到<code>Environment</code>中。</li></ol><p>对于配置的加载而言，需要牵扯到SpringBoot的自动装配，进行环境的准备工作：</p><h3 id="_2-1-1-环境的准备" tabindex="-1"><a class="header-anchor" href="#_2-1-1-环境的准备" aria-hidden="true">#</a> 2.1.1 环境的准备</h3><p>1.在SpringBoot启动的时候，<code>SpringApplication.run()</code>方法进行环境准备的工作，来看下该方法（只显示和环境配置相关的代码）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ConfigurableApplicationContext</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// .....代码省略</span>
    <span class="token class-name">SpringApplicationRunListeners</span> listeners <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getRunListeners</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    listeners<span class="token punctuation">.</span><span class="token function">starting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// .....代码省略</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">ApplicationArguments</span> applicationArguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultApplicationArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 环境的准备工作</span>
        <span class="token class-name">ConfigurableEnvironment</span> environment <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">prepareEnvironment</span><span class="token punctuation">(</span>listeners<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将环境的相关信息进行封装</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">configureIgnoreBeanInfo</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// .....代码省略</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var10<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleRunFailure</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> var10<span class="token punctuation">,</span> exceptionReporters<span class="token punctuation">,</span> listeners<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>var10<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// .....代码省略</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.重点来看<code>this.prepareEnvironment(listeners, applicationArguments)</code>这个方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">ConfigurableEnvironment</span> <span class="token function">prepareEnvironment</span><span class="token punctuation">(</span><span class="token class-name">SpringApplicationRunListeners</span> listeners<span class="token punctuation">,</span> <span class="token class-name">ApplicationArguments</span> applicationArguments<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// .....代码省略</span>
    <span class="token comment">// 该方法中，主要会发布一个ApplicationEnvironmentPreparedEvent事件</span>
    <span class="token comment">// 而BootstrapApplicationListener监听器会监听这一类的事件，并作出响应的处理</span>
    listeners<span class="token punctuation">.</span><span class="token function">environmentPrepared</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableEnvironment</span><span class="token punctuation">)</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// .....代码省略</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">ConfigurableEnvironment</span><span class="token punctuation">)</span>environment<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.监听事件后的处理，进行了自动装配：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BootstrapApplicationListener</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">ApplicationEnvironmentPreparedEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// .....代码省略</span>
        <span class="token comment">// onApplicationEvent（）方法都是监听器监听到某个事件后，需要执行的方法，即后续处理的逻辑。</span>
        <span class="token comment">// 这里调用了bootstrapServiceContext（）方法</span>
        context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findBootstrapContext</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ParentContextApplicationContextInitializer</span><span class="token punctuation">)</span>initializer<span class="token punctuation">,</span> configName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// .....代码省略</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token class-name">ConfigurableApplicationContext</span> <span class="token function">bootstrapServiceContext</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableEnvironment</span> environment<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">SpringApplication</span> application<span class="token punctuation">,</span> <span class="token class-name">String</span> configName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// .....代码省略</span>
        <span class="token comment">// 进行自动装配，BootstrapImportSelectorConfiguration作为一个配置类</span>
        builder<span class="token punctuation">.</span><span class="token function">sources</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">BootstrapImportSelectorConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// .....代码省略</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4.自动装配的类<code>BootstrapImportSelectorConfiguration</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>
    proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token punctuation">)</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">BootstrapImportSelector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BootstrapImportSelectorConfiguration</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">BootstrapImportSelectorConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.通过@Import导入了<code>BootstrapImportSelector</code>类，负责自动配置信息的加载。（我在Nacos注册中心原理篇中讲到过，spring.factories的作用，这里就不在多说，只把涉及到的相关类列举出来）<br> 这里有<code>spring-cloud-alibaba-nacos-config</code>包<br><img src="`+c+'" alt="" loading="lazy"><br> 下的<code>NacosConfigBootstrapConfiguration</code><br><img src="'+l+'" alt="" loading="lazy"><br> 以及<code>spring-cloud-context</code>包<img src="'+i+'" alt="" loading="lazy"><br> 下的<code>PropertySourceBootstrapConfiguration</code>：<br><img src="'+u+`" alt="" loading="lazy"><br> 那么会对这两个类进行自动装载。</p><p>6.回到步骤中，到这里，<code>SpringApplication.run（）</code>中的环境准备已经完成了，那么和我们的服务加载有啥关系嘞？环境的准备完成了，意味着相对应的类已经完成了初始化，<strong>而其中有一个类就叫做</strong><code>**PropertySourceBootstrapConfiguration**</code><strong>，他是一个启动环境配置类，他的初始化就是通过上述自动装配来完成的！</strong></p><p>7.而<code>PropertySourceBootstrapConfiguration</code>类中就有一个<code>initialize（）</code>方法调用<code>PropertySourceLocators.locate()</code>来获取远程配置信息，那么接下来就开始讲环境的加载</p><h3 id="_2-1-2-环境的加载" tabindex="-1"><a class="header-anchor" href="#_2-1-2-环境的加载" aria-hidden="true">#</a> 2.1.2 环境的加载</h3><p>1.上文<code>SpringApplication.run()</code>方法中已经介绍完了环境的准备工作，接下里就要进行配置的加载了，继续从该方法出发（<strong>tips：这里和上文的区别，多了一行代码</strong><code>**this.prepareContext（）**</code><strong>，同样为了方便，把不必要的代码省去了</strong>）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ConfigurableApplicationContext</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// .....代码省略</span>
    <span class="token class-name">SpringApplicationRunListeners</span> listeners <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getRunListeners</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    listeners<span class="token punctuation">.</span><span class="token function">starting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// .....代码省略</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">ApplicationArguments</span> applicationArguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultApplicationArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 环境的准备工作</span>
        <span class="token class-name">ConfigurableEnvironment</span> environment <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">prepareEnvironment</span><span class="token punctuation">(</span>listeners<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将环境的相关信息进行封装</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">configureIgnoreBeanInfo</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// .....代码省略</span>
        <span class="token comment">// 开始刷新应用上下文的准备阶段。</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">prepareContext</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> environment<span class="token punctuation">,</span> listeners<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">,</span> printedBanner<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// .....代码省略</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var10<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleRunFailure</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> var10<span class="token punctuation">,</span> exceptionReporters<span class="token punctuation">,</span> listeners<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>var10<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// .....代码省略</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.<code>prepareContext()</code>方法主要是进行应用上下文的一个准备：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">prepareContext</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableApplicationContext</span> context<span class="token punctuation">,</span> <span class="token class-name">ConfigurableEnvironment</span> environment<span class="token punctuation">,</span> <span class="token class-name">SpringApplicationRunListeners</span> listeners<span class="token punctuation">,</span> <span class="token class-name">ApplicationArguments</span> applicationArguments<span class="token punctuation">,</span> <span class="token class-name">Banner</span> printedBanner<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// .....代码省略</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">applyInitializers</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>      

<span class="token comment">// 该方法主要是执行容器中的ApplicationContextInitilaizer，作用是在应用程序上下文初始化的时候做一些额外的操作</span>
<span class="token comment">// 挺像那个SpringBean初始化后还可以做一些额外操作的意思</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">applyInitializers</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Iterator</span> var2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getInitializers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span>var2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ApplicationContextInitializer</span> initializer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationContextInitializer</span><span class="token punctuation">)</span>var2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Class</span> requiredType <span class="token operator">=</span> <span class="token class-name">GenericTypeResolver</span><span class="token punctuation">.</span><span class="token function">resolveTypeArgument</span><span class="token punctuation">(</span>initializer<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ApplicationContextInitializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isInstanceOf</span><span class="token punctuation">(</span>requiredType<span class="token punctuation">,</span> context<span class="token punctuation">,</span> <span class="token string">&quot;Unable to call initializer.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        initializer<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.第二步代码中出现了一个接口：<code>ApplicationContextInitializer</code>，那么最终代码的实现肯定是要跑其子类的代码，</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ApplicationContextInitializer</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token class-name">C</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4.回到重点：<code>PropertySourceBootstrapConfiguration</code>实现了<code>ApplicationContextInitializer</code>接口。因此上面的方法在执行时，会执行<code>PropertySourceBootstrapConfiguration</code>的<code>initialize()</code>方法<br> 来看下其方法，关注类<code>PropertySourceLocator</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// .....代码省略</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>var5<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">PropertySourceLocator</span> locator <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">PropertySourceLocator</span><span class="token punctuation">)</span>var5<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">PropertySource</span> source <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        source <span class="token operator">=</span> locator<span class="token punctuation">.</span><span class="token function">locate</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>source <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Located property source: &quot;</span> <span class="token operator">+</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>
            composite<span class="token punctuation">.</span><span class="token function">addPropertySource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
            empty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// .....代码省略</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.<code>PropertySourceLocator</code>接口的主要作用：<strong>实现应用外部化配置可动态加载</strong>，而<code>NacosPropertySourceLocator</code>实现了该接口。因此最终会调用<code>NacosPropertySourceLocator</code>中的<code>locate()</code>方法，实现把Nacos服务上的代码进行加载。</p><p>6.<code>NacosPropertySourceLocator.locate()</code>方法最终得到配置中心上的配置并通过对象封装来返回：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">PropertySource</span> <span class="token function">locate</span><span class="token punctuation">(</span><span class="token class-name">Environment</span> env<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>nacosConfigProperties<span class="token punctuation">.</span><span class="token function">setEnvironment</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ConfigService</span> configService <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nacosConfigManager<span class="token punctuation">.</span><span class="token function">getConfigService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> configService<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;no instance of config service found, can&#39;t load config from nacos&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> timeout <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>nacosConfigProperties<span class="token punctuation">.</span><span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>nacosPropertySourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NacosPropertySourceBuilder</span><span class="token punctuation">(</span>configService<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 读取一些配置文件，这里有我们属性的应用名称、DataId的设置</span>
        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nacosConfigProperties<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> dataIdPrefix <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nacosConfigProperties<span class="token punctuation">.</span><span class="token function">getPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>dataIdPrefix<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            dataIdPrefix <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>dataIdPrefix<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            dataIdPrefix <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;spring.application.name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 用于存储Nacos Config Server上配置信息的一个实例对象</span>
        <span class="token class-name">CompositePropertySource</span> composite <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompositePropertySource</span><span class="token punctuation">(</span><span class="token string">&quot;NACOS&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// loadxxx（）方法开始进行配置的加载这是共享配置</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadSharedConfiguration</span><span class="token punctuation">(</span>composite<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 通过spring.cloud.nacos.config.ext-config[0].data-id=myTest.properties这种方式配置的配置文件</span>
        <span class="token comment">// 加载扩展配置</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadExtConfiguration</span><span class="token punctuation">(</span>composite<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 加载应用名称对应的配置</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadApplicationConfiguration</span><span class="token punctuation">(</span>composite<span class="token punctuation">,</span> dataIdPrefix<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nacosConfigProperties<span class="token punctuation">,</span> env<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 返回配置信息实例对象</span>
        <span class="token keyword">return</span> composite<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这里，配置的加载流程也就完成了，<strong>对于具体加载的内容（也就是</strong><code>**this.loadxxx()**</code><strong>方法的具体实现）放在2.2节详细介绍</strong>，接下来通过案例来再一次理解这个过程。</p><h3 id="_2-1-3-案例1-通过debug来理解config的配置加载" tabindex="-1"><a class="header-anchor" href="#_2-1-3-案例1-通过debug来理解config的配置加载" aria-hidden="true">#</a> 2.1.3 案例1：通过Debug来理解Config的配置加载</h3><p>1.容器启动后，执行<code>SpringApplication.run()</code>方法：<br><img src="`+k+'" alt="" loading="lazy"><br> 2.开始准备环境：<br><img src="'+r+'" alt="" loading="lazy"><br> 3.此时<code>BootstrapApplicationListener</code>类监听到事件（<strong>这个事件指的是环境准备事件</strong>），执行<code>onApplicationEvent（）</code>方法：<br><img src="'+d+'" alt="" loading="lazy"><br> 4.该方法最后会执行<code>builder.sources（）</code>，引入选择器Selector：<br><img src="'+v+'" alt="" loading="lazy"><br> 5.环境准备完毕，开始准备应用上下文的信息：<br><img src="'+m+'" alt="" loading="lazy"><br> 6.执行<code>applyInitializers（）</code>方法，最终调用到<code>PropertySourceBootstrapConfiguration</code>的<code>initialize（）</code>方法，这里则调用了Nacos相关的配置类的初始化。<br><img src="'+g+'" alt="" loading="lazy"><br> 6.由于<code>NacosPropertySourceLocator</code>实现了<code>PropertySourceLocator</code>接口，因此调用其<code>locate（）</code>方法，将从Nacos Config Server获得的配置封装成<code>CompositePropertySource</code>对象进行返回。<br><img src="'+b+`" alt="" loading="lazy"></p><h3 id="_2-1-4-小总结1☆" tabindex="-1"><a class="header-anchor" href="#_2-1-4-小总结1☆" aria-hidden="true">#</a> 2.1.4 小总结1☆</h3><p>Nacos Config的配置加载过程如下：</p><ol><li>SpringBoot项目启动，执行<code>SpringApplication.run()</code>方法，<strong>先对项目所需的环境做出准备</strong></li><li><code>BootstrapApplicationListener</code>监听器监听到环境准备事件，**对需要做自动装配的类进行载入。**导入<code>BootstrapImportSelectorConfiguration</code>配置类，该配置类引入<code>BootstrapImportSelector</code>选择器，<strong>完成相关的初始化操作。</strong></li><li>环境准备完成后（所需的相关配置类也初始化完成），执行方法<code>this.prepareContext（）</code><strong>完成上下文信息的准备。</strong></li><li><code>this.prepareContext（）</code>需要对相关的类进行初始化操作。由于<code>PropertySourceBootstrapConfiguration</code>类实现了<code>ApplicationContextInitializer</code>接口。因此调用其<code>initialize（）</code>方法，完成初始化操作。</li><li>对于<code>PropertySourceBootstrapConfiguration</code>下的初始化操作，<strong>需要实现应用外部化配置可动态加载</strong>，而<code>NacosPropertySourceLocator</code> 实现了<code>PropertySourceLocator</code>接口，故执行他的<code>locate（）</code>方法。</li><li>最终<code>NacosPropertySourceLocator</code>的<code>locate（）</code>方法完成从Nacos Config Server上加载配置信息。</li></ol><p>写到这里，其实目前为止主要讲的是SpringCloud项目从启动到执行方法获取配置的这么一个过程，而对于具体获取远程配置的代码实现并没有深入去讲解。即上文的<code>locate（）</code>方法，而该方法还涉及到配置更新时，Nacos如何去做到监听的操作，因此准备将这一块内容另起一节来讲解。</p><h2 id="_2-2-config配置加载核心代码分析" tabindex="-1"><a class="header-anchor" href="#_2-2-config配置加载核心代码分析" aria-hidden="true">#</a> 2.2 Config配置加载核心代码分析</h2><p>1.这里我们从<code>NacosPropertySourceLocator</code>类下的<code>locate（）</code>方法开始分析：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">PropertySource</span> <span class="token function">locate</span><span class="token punctuation">(</span><span class="token class-name">Environment</span> env<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>nacosConfigProperties<span class="token punctuation">.</span><span class="token function">setEnvironment</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 初始化ConfigService对象，这是Nacos客户端提供的用于访问实现配置中心基本操作的类</span>
    <span class="token comment">// 可以把它类比于RedisTemplate这种操作类</span>
    <span class="token class-name">ConfigService</span> configService <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nacosConfigManager<span class="token punctuation">.</span><span class="token function">getConfigService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> configService<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;no instance of config service found, can&#39;t load config from nacos&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// ....代码省略</span>
        <span class="token class-name">CompositePropertySource</span> composite <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompositePropertySource</span><span class="token punctuation">(</span><span class="token string">&quot;NACOS&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 按照顺序分别加载共享配置、扩展配置。应用名称对应的配置。</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadSharedConfiguration</span><span class="token punctuation">(</span>composite<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadExtConfiguration</span><span class="token punctuation">(</span>composite<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadApplicationConfiguration</span><span class="token punctuation">(</span>composite<span class="token punctuation">,</span> dataIdPrefix<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nacosConfigProperties<span class="token punctuation">,</span> env<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> composite<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.因为一般来说我们都是根据应用名称来获取配置，所以这里以<code>loadApplicationConfiguration（）</code>方法为例来说。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">loadApplicationConfiguration</span><span class="token punctuation">(</span><span class="token class-name">CompositePropertySource</span> compositePropertySource<span class="token punctuation">,</span> <span class="token class-name">String</span> dataIdPrefix<span class="token punctuation">,</span> <span class="token class-name">NacosConfigProperties</span> properties<span class="token punctuation">,</span> <span class="token class-name">Environment</span> environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ....代码省略</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadNacosDataIfPresent</span><span class="token punctuation">(</span>compositePropertySource<span class="token punctuation">,</span> dataIdPrefix<span class="token punctuation">,</span> nacosGroup<span class="token punctuation">,</span> fileExtension<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">loadNacosDataIfPresent</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">CompositePropertySource</span> composite<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> dataId<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> group<span class="token punctuation">,</span> <span class="token class-name">String</span> fileExtension<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isRefreshable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ....代码省略</span>
    <span class="token class-name">NacosPropertySource</span> propertySource <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadNacosPropertySource</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> group<span class="token punctuation">,</span> fileExtension<span class="token punctuation">,</span> isRefreshable<span class="token punctuation">)</span><span class="token punctuation">;</span>          
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token class-name">NacosPropertySource</span> <span class="token function">loadNacosPropertySource</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> dataId<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> group<span class="token punctuation">,</span> <span class="token class-name">String</span> fileExtension<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isRefreshable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">NacosContextRefresher</span><span class="token punctuation">.</span><span class="token function">getRefreshCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0L</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isRefreshable <span class="token operator">?</span> 
    <span class="token class-name">NacosPropertySourceRepository</span><span class="token punctuation">.</span><span class="token function">getNacosPropertySource</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> group<span class="token punctuation">)</span> <span class="token operator">:</span> 
    <span class="token keyword">this</span><span class="token punctuation">.</span>nacosPropertySourceBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> group<span class="token punctuation">,</span> fileExtension<span class="token punctuation">,</span> isRefreshable<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">NacosPropertySource</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">String</span> dataId<span class="token punctuation">,</span> <span class="token class-name">String</span> group<span class="token punctuation">,</span> <span class="token class-name">String</span> fileExtension<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isRefreshable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Map</span> p <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadNacosData</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> group<span class="token punctuation">,</span> fileExtension<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ....代码省略</span>
<span class="token punctuation">}</span>

<span class="token comment">// 关注这个方法</span>
<span class="token keyword">private</span> <span class="token class-name">Map</span> <span class="token function">loadNacosData</span><span class="token punctuation">(</span><span class="token class-name">String</span> dataId<span class="token punctuation">,</span> <span class="token class-name">String</span> group<span class="token punctuation">,</span> <span class="token class-name">String</span> fileExtension<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> data <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 最终的数据存放于Map当中，而data数据可以发现是调用ConfigService.getConfig()方法从配置中心上加载配置进行填充的。</span>
        data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configService<span class="token punctuation">.</span><span class="token function">getConfig</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> group<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// ....代码省略</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里总结下方法的执行流程（<strong>关注最后的方法即可！，这里列出流程中所有涉及到的步骤是为了怕大家不清楚方法的调用顺序</strong>）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>loadApplicationConfiguration（）\`---&gt;\`loadNacosDataIfPresent（）\`---&gt;\`NacosPropertySource.loadNacosPropertySource（）\`
---&gt;\`NacosPropertySource.build（）\`---&gt;\`loadNacosData（）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>到这一步我们只需了解到，加载的具体操作是交给<code>ConfigService</code>（当然，它是个接口，具体实现交给<code>NacosConfigService</code>来完成）来加载配置的。（后面会Debug来具体查看）</p><p>接下来主要开始说明NacosConfig的事件订阅机制的实现，分为多个角度结合上文的图来进行说明：<br> 在这里插入图片描述,<br><img src="`+f+`" alt="" loading="lazy"></p><ul><li>如何监听到事件的变更。</li><li><code>NacosConfigService</code>的初始化。（配置加载方法的执行者）</li><li><code>ClientWorker</code>。（因为根据上文的说法，Nacos会有一个定时调度的任务存在，而其具体的实现是NacosConfigService）</li><li><code>ClientLongRunnable</code>类有什么用。</li><li>服务端的长连接实现</li><li><code>ClientLongPolling</code>是什么。</li></ul><p>接下来的内容可能比较多，也希望大家能够耐心的看下去，我最后还会进行一个大总结，将核心代码进行一个梳理。</p><h3 id="_2-2-1-事件订阅机制的实现" tabindex="-1"><a class="header-anchor" href="#_2-2-1-事件订阅机制的实现" aria-hidden="true">#</a> 2.2.1 事件订阅机制的实现</h3><p>我在2.1节讲到了SpringBoot在启动的时候，会执行<strong>准备上下文</strong>的这么一个操作。而Nacos有一个类叫做<code>NacosContextRefresher</code>，它实现了<code>ApplicationListener</code>，即他是一个监听器，<strong>负责监听准备上下文的事件</strong>，我们来看下他的结构：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 这里监听的是ApplicationReadyEvent，也就是在上下文准备完毕的时候，会触发这个事件，执行onApplicationEvent（）方法。</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NacosContextRefresher</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token punctuation">,</span> <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">ApplicationReadyEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>ready<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//这个方法主要用来实现Nacos事件监听的注册            </span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerNacosListenersForApplications</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>紧接着来看下它的事件监听注册方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">registerNacosListenersForApplications</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 代码省略    </span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerNacosListener</span><span class="token punctuation">(</span>propertySource<span class="token punctuation">.</span><span class="token function">getGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dataId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">registerNacosListener</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> groupKey<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> dataKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token class-name">NacosPropertySourceRepository</span><span class="token punctuation">.</span><span class="token function">getMapKey</span><span class="token punctuation">(</span>dataKey<span class="token punctuation">,</span> groupKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Listener</span> listener <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Listener</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>listenerMap<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>lst<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AbstractSharedListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">innerReceive</span><span class="token punctuation">(</span><span class="token class-name">String</span> dataId<span class="token punctuation">,</span> <span class="token class-name">String</span> group<span class="token punctuation">,</span> <span class="token class-name">String</span> configInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 代码省略</span>

                <span class="token comment">// 当收到配置变更的回调后，会通过publishEvent（）发布一个RefreshEvent事件</span>
                <span class="token comment">// 而该事件的监听，其实现在RefreshEventListener这个监听器中</span>
                <span class="token class-name">NacosContextRefresher</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RefreshEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;Refresh Nacos config&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                 <span class="token comment">// 代码省略</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 代码省略</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>监听刷新事件的监听器：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RefreshEventListener</span> <span class="token keyword">implements</span> <span class="token class-name">SmartApplicationListener</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">RefreshEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>ready<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Event received &quot;</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">getEventDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 调用refresh.refresh()方法来完成配置的更新和应用</span>
            <span class="token class-name">Set</span> keys <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>refresh<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Refresh keys changed: &quot;</span> <span class="token operator">+</span> keys<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-2-nacosconfigservice" tabindex="-1"><a class="header-anchor" href="#_2-2-2-nacosconfigservice" aria-hidden="true">#</a> 2.2.2 NacosConfigService</h3><p>先来看一下<code>NacosConfigService</code>的构造：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">NacosConfigService</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> properties<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> encodeTmp <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;encode&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>encodeTmp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>encode <span class="token operator">=</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>encode <span class="token operator">=</span> encodeTmp<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initNamespace</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 这里初始化了一个HttpAgent，用到了装饰器模式</span>
    <span class="token comment">// 即实际工作的类是ServerHttpAgent，增加监控统计的信息</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>agent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MetricsHttpAgent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServerHttpAgent</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>agent<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 而这个ClientWorker是客户端的一个工作类，agent作为参数传入其中，即利用HttpAgent来做一些远程相关的事情。</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClientWorker</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>agent<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configFilterChainManager<span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>竟然都提到了装饰器模式了，那我也啰嗦几句吧🤣，讲一讲什么是装饰器模式：</p><blockquote><p>按照单一职责原则，某一个对象只专注于干一件事，而如果要扩展其职能的话，不如想办法分离出一个类来“包装”这个对象，而这个扩展出的类则专注于实现扩展功能。装饰器模式就可以将新功能动态地附加于现有对象而不改变现有对象的功能。</p></blockquote><p>而Java当中的IO流就普遍使用了装饰器模式，例如<code>BufferedInputStream</code>类，那么怎么个包装法呢，即<strong>通常将基本流作为高级流构造器的参数传入，将其作为高级流的一个关联对象，从而对其功能进行扩展和装饰。</strong><br> 例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-2-3-clientworker" tabindex="-1"><a class="header-anchor" href="#_2-2-3-clientworker" aria-hidden="true">#</a> 2.2.3 ClientWorker</h3><p>同样的，我们来看下其构造函数，<strong>其主要作用是构建两个定时调度的线程池，并且启动一个定时任务。</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ClientWorker</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">HttpAgent</span> agent<span class="token punctuation">,</span> <span class="token class-name">ConfigFilterChainManager</span> configFilterChainManager<span class="token punctuation">,</span> <span class="token class-name">Properties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>agent <span class="token operator">=</span> agent<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>configFilterChainManager <span class="token operator">=</span> configFilterChainManager<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 第一个线程池executor：可以发现其核心线程数为1。</span>
    <span class="token comment">// 每10秒会执行一次checkConfigInfo（）方法，即检查一次配置信息（参考this.executor.scheduleWithFixedDelay）</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>executor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token class-name">Thread</span> <span class="token function">newThread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
            t<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;com.alibaba.nacos.client.Worker.&quot;</span> <span class="token operator">+</span> agent<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            t<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> t<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 第二个线程池executorService只完成了初始化，这里并没有启动，他主要用于实现客户端的定时长轮询功能。</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token class-name">Thread</span> <span class="token function">newThread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
            t<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;com.alibaba.nacos.client.Worker.longPolling.&quot;</span> <span class="token operator">+</span> agent<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            t<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> t<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>executor<span class="token punctuation">.</span><span class="token function">scheduleWithFixedDelay</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">ClientWorker</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkConfigInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">ClientWorker</span><span class="token punctuation">.</span><span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;[&quot;</span> <span class="token operator">+</span> agent<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;] [sub-check] rotate check error&quot;</span><span class="token punctuation">,</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">,</span> <span class="token number">10L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>紧接着我们来看下启动的定时任务中，执行的<strong>checkConfigInfo（）</strong> 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkConfigInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1.分配任务</span>
    <span class="token comment">// cacheMap：是用来存储监听变更的缓存集合，Key：根据dataId/group/tenant(租户)拼接的值</span>
    <span class="token comment">// Value：对应的存储在Nacos服务器上的配置文件的内容。</span>
    <span class="token keyword">int</span> listenerSize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>cacheMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.通过向上取整，取得的数值为批数</span>
    <span class="token comment">// 默认情况下，每个长轮询LongPollingRunnable任务处理3000个监听配置集</span>
    <span class="token comment">// 如果超过3000个，则需要启动多个LongPollingRunnable去执行</span>
    <span class="token keyword">int</span> longingTaskCount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>listenerSize <span class="token operator">/</span> <span class="token class-name">ParamUtil</span><span class="token punctuation">.</span><span class="token function">getPerTaskConfigSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>longingTaskCount <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currentLongingTaskCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentLongingTaskCount<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> longingTaskCount<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 这里则是搭建一个长轮询机制，去监听变更的数据。</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClientWorker<span class="token punctuation">.</span>LongPollingRunnable</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>currentLongingTaskCount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>longingTaskCount<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面方法中，总结就是启动一个定时任务，然后通过线程池去建立长轮询连接，检查/更新方法的配置。而具体的任务都在<code>LongPollingRunnable</code>类中了。</p><h3 id="_2-2-4-longpollingrunnable" tabindex="-1"><a class="header-anchor" href="#_2-2-4-longpollingrunnable" aria-hidden="true">#</a> 2.2.4 LongPollingRunnable</h3><p><code>LongPollingRunnable</code><strong>本质上是一个线程</strong>，因此直接看他的<code>run（）</code>方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span> cacheDatas <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ArrayList</span> inInitializingCacheList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 遍历cacheDatas，检查本地配置</span>
        <span class="token class-name">Iterator</span> var3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">)</span><span class="token class-name">ClientWorker</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>cacheMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span>var3<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">CacheData</span> cacheData <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">CacheData</span><span class="token punctuation">)</span>var3<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//属于当前长轮询任务的</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheData<span class="token punctuation">.</span><span class="token function">getTaskId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>taskId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                cacheDatas<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cacheData<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token comment">//1\\. 检查本地配置</span>
                    <span class="token class-name">ClientWorker</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkLocalConfig</span><span class="token punctuation">(</span>cacheData<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheData<span class="token punctuation">.</span><span class="token function">isUseLocalConfigInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        cacheData<span class="token punctuation">.</span><span class="token function">checkListenerMd5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//有改变的话则通知</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var13<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">ClientWorker</span><span class="token punctuation">.</span><span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;get local config info error&quot;</span><span class="token punctuation">,</span> var13<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 2.和服务端建立长轮询机制，从服务端获取发生变更的数据</span>
        <span class="token comment">// 即通过长轮询请求检查服务端对应配置是否发生了变更</span>
        <span class="token class-name">List</span> changedGroupKeys <span class="token operator">=</span> <span class="token class-name">ClientWorker</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkUpdateDataIds</span><span class="token punctuation">(</span>cacheDatas<span class="token punctuation">,</span> inInitializingCacheList<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Iterator</span> var16 <span class="token operator">=</span> changedGroupKeys<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 3.遍历变更数据集合changedGroupKeys，调用getServerConfig（）方法，</span>
        <span class="token comment">// 根据DataId、Group？Tenant（租户）去服务端读取对应的配置信息并保存到本地文件中。</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>var16<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> groupKey <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>var16<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> key <span class="token operator">=</span> <span class="token class-name">GroupKey</span><span class="token punctuation">.</span><span class="token function">parseKey</span><span class="token punctuation">(</span>groupKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> dataId <span class="token operator">=</span> key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> group <span class="token operator">=</span> key<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> tenant <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                tenant <span class="token operator">=</span> key<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token class-name">ClientWorker</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServerConfig</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> group<span class="token punctuation">,</span> tenant<span class="token punctuation">,</span> <span class="token number">3000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">CacheData</span> cache <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">CacheData</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">)</span><span class="token class-name">ClientWorker</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>cacheMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">GroupKey</span><span class="token punctuation">.</span><span class="token function">getKeyTenant</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> group<span class="token punctuation">,</span> tenant<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                cache<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置配置内容</span>
                <span class="token class-name">ClientWorker</span><span class="token punctuation">.</span><span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[{}] [data-received] dataId={}, group={}, tenant={}, md5={}, content={}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">ClientWorker</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>agent<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dataId<span class="token punctuation">,</span> group<span class="token punctuation">,</span> tenant<span class="token punctuation">,</span> cache<span class="token punctuation">.</span><span class="token function">getMd5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ContentUtils</span><span class="token punctuation">.</span><span class="token function">truncateContent</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NacosException</span> var12<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;[%s] [get-update] get changed config exception. dataId=%s, group=%s, tenant=%s&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ClientWorker</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>agent<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dataId<span class="token punctuation">,</span> group<span class="token punctuation">,</span> tenant<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">ClientWorker</span><span class="token punctuation">.</span><span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> var12<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        var16 <span class="token operator">=</span> cacheDatas<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 触发事件的通知</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">CacheData</span> cacheDatax<span class="token punctuation">;</span>
            <span class="token keyword">do</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>var16<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    inInitializingCacheList<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">//继续定时的执行当前的线程                    </span>
                    <span class="token class-name">ClientWorker</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                cacheDatax <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">CacheData</span><span class="token punctuation">)</span>var16<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>cacheDatax<span class="token punctuation">.</span><span class="token function">isInitializing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>inInitializingCacheList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">GroupKey</span><span class="token punctuation">.</span><span class="token function">getKeyTenant</span><span class="token punctuation">(</span>cacheDatax<span class="token punctuation">.</span>dataId<span class="token punctuation">,</span> cacheDatax<span class="token punctuation">.</span>group<span class="token punctuation">,</span> cacheDatax<span class="token punctuation">.</span>tenant<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            cacheDatax<span class="token punctuation">.</span><span class="token function">checkListenerMd5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 请求过了后就设置为不在初始化中，这样就会被挂起，如果服务器配置有更新，就会立即返回</span>
            <span class="token comment">// 这样就可以实现动态配置更新，又不会太多的空轮询消耗，解决Pull模式下的空轮询消耗问题。</span>
            cacheDatax<span class="token punctuation">.</span><span class="token function">setInitializing</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var14<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ClientWorker</span><span class="token punctuation">.</span><span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;longPolling error : &quot;</span><span class="token punctuation">,</span> var14<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ClientWorker</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>executorService<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token class-name">ClientWorker</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>taskPenaltyTime<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述方法总结就是：</p><ol><li>根据<code>taskId</code>对<code>cacheMap</code>进行数据的分割，再比较本地配置的数据是否存在变更。</li><li>如果存在变更，则直接触发通知。</li><li>对于配置的比较，需要注意：在<code>\${user}\\nacos\\config\\</code>目录下会缓存一份服务端的配置信息，而<code>checkLocalConfig（）</code>方***和本地磁盘中的文件内容进行比较。</li><li>接下来调用的<code>checkUpdateDataIds（）</code>方法，则基于长连接的方式来监听服务端配置的变化，最后根据变化数据的key来去服务端获取最新的数据。（key是<strong>dataId/group/租户</strong>）</li></ol><p>那么接下来再重点讲一讲<code>checkUpdateDataIds（）</code>方法，该方法最终会调用<code>checkUpdateConfigStr（）</code>方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span> <span class="token function">checkUpdateConfigStr</span><span class="token punctuation">(</span><span class="token class-name">String</span> probeUpdateString<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isInitializingCacheList<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span> params <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Listening-Configs&quot;</span><span class="token punctuation">,</span> probeUpdateString<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Long-Pulling-Timeout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isInitializingCacheList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Long-Pulling-Timeout-No-Hangup&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>probeUpdateString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 通过调用agent.httpPost（）方法，调用/v1/cs/configs/listener这个接口实现长轮询的请求</span>
            <span class="token comment">// 长轮询请求在实现的层面，设计了一个超时时间，也就是30秒</span>
            <span class="token class-name">HttpResult</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>agent<span class="token punctuation">.</span><span class="token function">httpPost</span><span class="token punctuation">(</span><span class="token string">&quot;/v1/cs/configs/listener&quot;</span><span class="token punctuation">,</span> headers<span class="token punctuation">,</span> params<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>agent<span class="token punctuation">.</span><span class="token function">getEncode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 如果服务端的数据发生了变更，客户端会收到一个HttpResult，而服务端返回的是存在数据变更的一个Key</span>
            <span class="token comment">// 这个key也就是DataId、Group、Tenant（租户），获得这些信息后，LongPollingRunnable这个线程会调用getServerConfig（）方法</span>
            <span class="token comment">// 也就是去Nacos服务器上读取具体的配置内容</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">200</span> <span class="token operator">==</span> result<span class="token punctuation">.</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setHealthServer</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">parseUpdateDataIdResponse</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setHealthServer</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;[{}] [check-update] get changed dataId error, code: {}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>agent<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> var6<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setHealthServer</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;[&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>agent<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;] [check-update] get changed dataId exception&quot;</span><span class="token punctuation">,</span> var6<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> var6<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 去Nacos服务器上读取配置内容，竟然是去Nacos上读取的话，那必然获得的配置也是最新的。</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getServerConfig</span><span class="token punctuation">(</span><span class="token class-name">String</span> dataId<span class="token punctuation">,</span> <span class="token class-name">String</span> group<span class="token punctuation">,</span> <span class="token class-name">String</span> tenant<span class="token punctuation">,</span> <span class="token keyword">long</span> readTimeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        group <span class="token operator">=</span> <span class="token string">&quot;DEFAULT_GROUP&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">HttpResult</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span> params <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>tenant<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            params <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;dataId&quot;</span><span class="token punctuation">,</span> dataId<span class="token punctuation">,</span> <span class="token string">&quot;group&quot;</span><span class="token punctuation">,</span> group<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            params <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;dataId&quot;</span><span class="token punctuation">,</span> dataId<span class="token punctuation">,</span> <span class="token string">&quot;group&quot;</span><span class="token punctuation">,</span> group<span class="token punctuation">,</span> <span class="token string">&quot;tenant&quot;</span><span class="token punctuation">,</span> tenant<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>agent<span class="token punctuation">.</span><span class="token function">httpGet</span><span class="token punctuation">(</span><span class="token string">&quot;/v1/cs/configs&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>agent<span class="token punctuation">.</span><span class="token function">getEncode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> readTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 省略。。。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-5-服务端长连接处理机制" tabindex="-1"><a class="header-anchor" href="#_2-2-5-服务端长连接处理机制" aria-hidden="true">#</a> 2.2.5 服务端长连接处理机制</h3><p>tips：这里我去Github上摘抄的代码，地址给大家：Nacos-Server，建议大家下载过来，在Idea中直接看比较方便。</p><p>前面主要是讲了事件的订阅、WorkClient创建出的线程池干了什么、以及长连接的建立，<strong>但是这些都是面向客户端的</strong>，因此接下来从服务端的角度来看一看长连接的处理机制。</p><p>在Nacos-config模块下，controller包下有一个类叫做<code>ConfigController</code>，<strong>专门用来实现配置的基本操作</strong>，其中有一个<code>/listener</code>接口，是客户端发起数据监听的接口。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/listener&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Secured</span><span class="token punctuation">(</span>action <span class="token operator">=</span> <span class="token class-name">ActionTypes</span><span class="token punctuation">.</span><span class="token constant">READ</span><span class="token punctuation">,</span> parser <span class="token operator">=</span> <span class="token class-name">ConfigResourceParser</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listener</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;org.apache.catalina.ASYNC_SUPPORTED&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> probeModify <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;Listening-Configs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>probeModify<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;invalid probeModify&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    probeModify <span class="token operator">=</span> <span class="token class-name">URLDecoder</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>probeModify<span class="token punctuation">,</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">ENCODE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Map</span> clientMd5Map<span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">//获取客户端需要监听的可能发生变化的配置，并计算其MD5值。</span>
        clientMd5Map <span class="token operator">=</span> <span class="token class-name">MD5Util</span><span class="token punctuation">.</span><span class="token function">getClientMd5Map</span><span class="token punctuation">(</span>probeModify<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;invalid probeModify&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 执行长轮询的请求。</span>
    inner<span class="token punctuation">.</span><span class="token function">doPollingConfig</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> clientMd5Map<span class="token punctuation">,</span> probeModify<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要干两件事：</p><ol><li>获取客户端需要监听的可能发生变化的配置，并计算其MD5值。</li><li><code>inner.doPollingConfig（）</code>开始执行长轮询的请求。</li></ol><p>接下来来看一下处理长轮询的方法<code>doPollingConfig（）</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">doPollingConfig</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span>
            <span class="token class-name">Map</span> clientMd5Map<span class="token punctuation">,</span> <span class="token keyword">int</span> probeRequestSize<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>

    <span class="token comment">// 首先判断当前请求是否为长轮询，如果是，则调用addLongPollingClient（）方法</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">LongPollingService</span><span class="token punctuation">.</span><span class="token function">isSupportLongPolling</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        longPollingService<span class="token punctuation">.</span><span class="token function">addLongPollingClient</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> clientMd5Map<span class="token punctuation">,</span> probeRequestSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">HttpServletResponse</span><span class="token punctuation">.</span><span class="token constant">SC_OK</span> <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 兼容短轮询的逻辑</span>
    <span class="token class-name">List</span> changedGroups <span class="token operator">=</span> <span class="token class-name">MD5Util</span><span class="token punctuation">.</span><span class="token function">compareMd5</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> clientMd5Map<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 兼容短轮询的结果</span>
    <span class="token class-name">String</span> oldResult <span class="token operator">=</span> <span class="token class-name">MD5Util</span><span class="token punctuation">.</span><span class="token function">compareMd5OldResult</span><span class="token punctuation">(</span>changedGroups<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> newResult <span class="token operator">=</span> <span class="token class-name">MD5Util</span><span class="token punctuation">.</span><span class="token function">compareMd5ResultString</span><span class="token punctuation">(</span>changedGroups<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 省略。。</span>
<span class="token punctuation">}</span>

<span class="token comment">//addLongPollingClient（）方法</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addLongPollingClient</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> rsp<span class="token punctuation">,</span> <span class="token class-name">Map</span> clientMd5Map<span class="token punctuation">,</span>
            <span class="token keyword">int</span> probeRequestSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//获取客户端设置的请求超时时间</span>
    <span class="token class-name">String</span> str <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token class-name">LongPollingService</span><span class="token punctuation">.</span><span class="token constant">LONG_POLLING_HEADER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> noHangUpFlag <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token class-name">LongPollingService</span><span class="token punctuation">.</span><span class="token constant">LONG_POLLING_NO_HANG_UP_HEADER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> appName <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token class-name">RequestUtil</span><span class="token punctuation">.</span><span class="token constant">CLIENT_APPNAME_HEADER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> tag <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Vipserver-Tag&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> delayTime <span class="token operator">=</span> <span class="token class-name">SwitchService</span><span class="token punctuation">.</span><span class="token function">getSwitchInteger</span><span class="token punctuation">(</span><span class="token class-name">SwitchService</span><span class="token punctuation">.</span><span class="token constant">FIXED_DELAY_TIME</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Add delay time for LoadBalance, and one response is returned 500 ms in advance to avoid client timeout.</span>
    <span class="token comment">// 意思是提前500ms返回响应，为了避免客户端超时</span>
    <span class="token keyword">long</span> timeout <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">-</span> delayTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 判断是否为混合连接，如果是，那么定时任务将在30秒后开始执行</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFixedPolling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        timeout <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span> <span class="token function">getFixedPollingInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Do nothing but set fix polling timeout.</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果不是，29.5秒后开始执行，也就是所谓的等待期</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 和服务端的数据进行MD5对比，如果发生变化则直接返回</span>
        <span class="token class-name">List</span> changedGroups <span class="token operator">=</span> <span class="token class-name">MD5Util</span><span class="token punctuation">.</span><span class="token function">compareMd5</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> rsp<span class="token punctuation">,</span> clientMd5Map<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>changedGroups<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">generateResponse</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> rsp<span class="token punctuation">,</span> changedGroups<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">LogUtil</span><span class="token punctuation">.</span><span class="token constant">CLIENT_LOG</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{}|{}|{}|{}|{}|{}|{}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">,</span> <span class="token string">&quot;instant&quot;</span><span class="token punctuation">,</span>
                    <span class="token class-name">RequestUtil</span><span class="token punctuation">.</span><span class="token function">getRemoteIp</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;polling&quot;</span><span class="token punctuation">,</span> clientMd5Map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> probeRequestSize<span class="token punctuation">,</span>
                    changedGroups<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>noHangUpFlag <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> noHangUpFlag<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token constant">TRUE_STR</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">LogUtil</span><span class="token punctuation">.</span><span class="token constant">CLIENT_LOG</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{}|{}|{}|{}|{}|{}|{}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">,</span> <span class="token string">&quot;nohangup&quot;</span><span class="token punctuation">,</span>
                    <span class="token class-name">RequestUtil</span><span class="token punctuation">.</span><span class="token function">getRemoteIp</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;polling&quot;</span><span class="token punctuation">,</span> clientMd5Map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> probeRequestSize<span class="token punctuation">,</span>
                    changedGroups<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">String</span> ip <span class="token operator">=</span> <span class="token class-name">RequestUtil</span><span class="token punctuation">.</span><span class="token function">getRemoteIp</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Must be called by http thread, or send response.</span>
    <span class="token comment">// 一定要由HTTP线程调用，否则离开后容器会立即发送响应</span>
    <span class="token keyword">final</span> <span class="token class-name">AsyncContext</span> asyncContext <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">startAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// AsyncContext.setTimeout() is incorrect, Control by oneself</span>
    asyncContext<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 执行ClientLongPolling线程</span>
    <span class="token class-name">ConfigExecutor</span><span class="token punctuation">.</span><span class="token function">executeLongPolling</span><span class="token punctuation">(</span>
            <span class="token keyword">new</span> <span class="token class-name">ClientLongPolling</span><span class="token punctuation">(</span>asyncContext<span class="token punctuation">,</span> clientMd5Map<span class="token punctuation">,</span> ip<span class="token punctuation">,</span> probeRequestSize<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> appName<span class="token punctuation">,</span> tag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>即将客户端的长轮询请求封装成<code>ClientLongPolling</code>交给<code>scheduler</code>执行。</p><h3 id="_2-2-6-clientlongpolling" tabindex="-1"><a class="header-anchor" href="#_2-2-6-clientlongpolling" aria-hidden="true">#</a> 2.2.6 ClientLongPolling</h3><p><code>ClientLongPolling</code>同样是一个线程，因此也看他的<code>run（）</code>方法：<br> 主要做四件事情：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1.创建一个调度的任务，调度的延时时间为 29.5s</span>
    asyncTimeoutFuture <span class="token operator">=</span> <span class="token class-name">ConfigExecutor</span><span class="token punctuation">.</span><span class="token function">scheduleLongPolling</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token function">getRetainIps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ClientLongPolling</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>ip<span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// 3.延时时间到了之后，首先将该 ClientLongPolling 自身的实例从 allSubs 中移除</span>
                allSubs<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">ClientLongPolling</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFixedPolling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">LogUtil</span><span class="token punctuation">.</span><span class="token constant">CLIENT_LOG</span>
                            <span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{}|{}|{}|{}|{}|{}&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> createTime<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;fix&quot;</span><span class="token punctuation">,</span>
                                    <span class="token class-name">RequestUtil</span><span class="token punctuation">.</span><span class="token function">getRemoteIp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> asyncContext<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                    <span class="token string">&quot;polling&quot;</span><span class="token punctuation">,</span> clientMd5Map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> probeRequestSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 4.获取服务端中保存的对应客户端请求的groupKeys，判断是否变更，并将结果写入response，返回给客户端</span>
                    <span class="token class-name">List</span> changedGroups <span class="token operator">=</span> <span class="token class-name">MD5Util</span>
                            <span class="token punctuation">.</span><span class="token function">compareMd5</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> asyncContext<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                    <span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span> asyncContext<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clientMd5Map<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>changedGroups<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token function">sendResponse</span><span class="token punctuation">(</span>changedGroups<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token function">sendResponse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token class-name">LogUtil</span><span class="token punctuation">.</span><span class="token constant">CLIENT_LOG</span>
                            <span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{}|{}|{}|{}|{}|{}&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> createTime<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;timeout&quot;</span><span class="token punctuation">,</span>
                                    <span class="token class-name">RequestUtil</span><span class="token punctuation">.</span><span class="token function">getRemoteIp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> asyncContext<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                    <span class="token string">&quot;polling&quot;</span><span class="token punctuation">,</span> clientMd5Map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> probeRequestSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">sendResponse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">LogUtil</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_LOG</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;long polling error:&quot;</span> <span class="token operator">+</span> t<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span><span class="token punctuation">,</span> timeoutTime<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.将ClientLongPolling自身的实例添加到一个allSubs中</span>
    <span class="token comment">// 他是一个队列ConcurrentLinkedQueue</span>
    allSubs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里可以这么理解：</p><ol><li><code>allSubs</code>这个队列和<code>ClientLongPolling</code>之间维持了一种订阅关系，而<code>ClientLongPolling</code>是属于被订阅的角色。</li><li>那么一旦订阅关系删除后，订阅方就无法对被订阅方进行通知了。</li><li>服务端直到调度任务的延时时间用完之前，<code>ClientLongPolling</code>都不会有其他的事情可以做，因此这段时间内<code>allSubs</code>队列会处理相关的逻辑。</li></ol><p>为了我们在客户端长轮询期间，一旦更改配置，客户端能够立即得到响应数据，因此这个事件的触发肯定需要发生在服务端上。看下<code>ConfigController</code>下的<code>publishConfig（）</code>方法<br> 我在这里直接以截图的形式来展示重要的代码逻辑：<br><img src="`+y+`" alt="" loading="lazy"><br> 其实老版本的话，这里的代码写的是（当然我们并不会关注老版本，所以大家了解下就是)：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">EventDispatcher</span><span class="token punctuation">.</span><span class="token function">fireEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConfigDataChangeEvent</span>（）<span class="token punctuation">)</span>；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也因此，上文的图中，有一个<code>fireEvent</code>这么一个字段。</p><p>到这里，如果我们从Nacos控制台上更新了某个配置项后，这里会调用<code>LongPollingService</code>的<code>onEvent（）</code>方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token class-name">LongPollingService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    allSubs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentLinkedQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">ConfigExecutor</span><span class="token punctuation">.</span><span class="token function">scheduleLongPolling</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StatTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token number">10L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Register LocalDataChangeEvent to NotifyCenter.</span>
    <span class="token class-name">NotifyCenter</span><span class="token punctuation">.</span><span class="token function">registerToPublisher</span><span class="token punctuation">(</span><span class="token class-name">LocalDataChangeEvent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">NotifyCenter</span><span class="token punctuation">.</span>ringBufferSize<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Register A Subscriber to subscribe LocalDataChangeEvent.</span>
    <span class="token class-name">NotifyCenter</span><span class="token punctuation">.</span><span class="token function">registerSubscriber</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Subscriber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span><span class="token class-name">Event</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFixedPolling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// Ignore.</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token keyword">instanceof</span> <span class="token class-name">LocalDataChangeEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">LocalDataChangeEvent</span> evt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">LocalDataChangeEvent</span><span class="token punctuation">)</span> event<span class="token punctuation">;</span>
                    <span class="token class-name">ConfigExecutor</span><span class="token punctuation">.</span><span class="token function">executeLongPolling</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DataChangeTask</span><span class="token punctuation">(</span>evt<span class="token punctuation">.</span>groupKey<span class="token punctuation">,</span> evt<span class="token punctuation">.</span>isBeta<span class="token punctuation">,</span> evt<span class="token punctuation">.</span>betaIps<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token function">subscribeType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">LocalDataChangeEvent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>意思就是通过<code>DataChangeTask</code>这个任务来通知客户端：”服务端的数据已经发生了变更！“，接下来看下这个任务干了什么：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">DataChangeTask</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span> 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">ConfigCacheService</span><span class="token punctuation">.</span><span class="token function">getContentBetaMd5</span><span class="token punctuation">(</span>groupKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 1.遍历allSubs队列，该队列中维持的是所有客户端的请求任务</span>
            <span class="token comment">// 那么需要找到与当前发生变更的配置项的groupKey相等的ClientLongPolling任务</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Iterator</span> iter <span class="token operator">=</span> allSubs<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> iter<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">ClientLongPolling</span> clientSub <span class="token operator">=</span> iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>clientSub<span class="token punctuation">.</span>clientMd5Map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>groupKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// If published tag is not in the beta list, then it skipped.</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>isBeta <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>betaIps<span class="token punctuation">,</span> clientSub<span class="token punctuation">.</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">continue</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>

                    <span class="token comment">// If published tag is not in the tag list, then it skipped.</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>tag<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>clientSub<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">continue</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>

                    <span class="token function">getRetainIps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>clientSub<span class="token punctuation">.</span>ip<span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    iter<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除订阅关系</span>
                    <span class="token class-name">LogUtil</span><span class="token punctuation">.</span><span class="token constant">CLIENT_LOG</span>
                            <span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{}|{}|{}|{}|{}|{}|{}&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> changeTime<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;in-advance&quot;</span><span class="token punctuation">,</span>
                                    <span class="token class-name">RequestUtil</span>
                                            <span class="token punctuation">.</span><span class="token function">getRemoteIp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> clientSub<span class="token punctuation">.</span>asyncContext<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                    <span class="token string">&quot;polling&quot;</span><span class="token punctuation">,</span> clientSub<span class="token punctuation">.</span>clientMd5Map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clientSub<span class="token punctuation">.</span>probeRequestSize<span class="token punctuation">,</span> groupKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 2.找到对应的ClientLongPolling任务后，将发生变更的groupKey通过该ClientLongPolling写入到响应对象中，即完成一次数据变更的推送操作。</span>
                    clientSub<span class="token punctuation">.</span><span class="token function">sendResponse</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>groupKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">LogUtil</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_LOG</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;data change error: {}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ExceptionUtil</span><span class="token punctuation">.</span><span class="token function">getStackTrace</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">sendResponse</span><span class="token punctuation">(</span><span class="token class-name">List</span> changedGroups<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// Cancel time out task.</span>
    <span class="token comment">// 如果说DataChangeTask完成了数据的推送，ClientLongPolling中的调度任务又开始执行了，那么会发生冲突</span>
    <span class="token comment">// 因此在进行推送操作之前，现将原来等待执行的调度任务取消掉</span>
    <span class="token comment">// 这样就可以防止推送操作完成后，调度任务又去写响应数据，造成冲突。</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> asyncTimeoutFuture<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        asyncTimeoutFuture<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">generateResponse</span><span class="token punctuation">(</span>changedGroups<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-7-小总结2☆☆" tabindex="-1"><a class="header-anchor" href="#_2-2-7-小总结2☆☆" aria-hidden="true">#</a> 2.2.7 小总结2☆☆</h3><p>首先请原谅我可能写的有点乱，所以这里先做个小总结对上文做一个归纳。<br> 首先我想先说明一点：</p><ul><li>为什么更改了配置信息后客户端会立即得到响应？</li></ul><blockquote><p>1.首先每个配置在服务端都封装成一个ClientLongPolling对象。其存储于队列当中。<br> 2.客户端和服务端会建立起一个长连接，并且维持29.5秒的等待时间，<strong>这段时间内除非配置发生更改，请求是不会返回的。</strong><br> 3.其次服务端一旦发现配置信息发生更改，在更改了配置信息后，会找到对应的ClientLongPolling任务，并将其更改后的groupKey写入到响应对象中response，<strong>进行立刻返回。</strong><br> 4.之所以称之为实时的感知，是因为<strong>服务端主动</strong>将变更后的数据通过HTTP的response对象写入并且立刻返回。<br> 5.而服务端说白了，<strong>就是做了一个定时调度任务</strong>，在等待调度任务执行的期间（29.5秒）若发生配置变化，则立刻响应，否则等待30秒去返回配置数据给客户端。</p></blockquote><p>接下来开始说Nacos Config实时更新的一个原理：<br> 这里，我同样的准备从多个方面来进行阐述，毕竟内容比较多，也怕大家搞混。</p><hr><p>首先，<strong>对于客户端而言，如何感知到服务端配置的变更呢？</strong></p><ol><li>同样的，当SpringBoot项目启动的时候，会执行”<strong>准备上下文</strong>“的这么一个事情。此时<code>NacosContextRefresher</code>会监听到这个事件，<strong>并且注册一个负责监听配置变更回调的监听器</strong><code>registerNacosListener</code>。</li><li>registerNacosListener一旦收到配置变更的回调，<strong>则发布一个RefreshEvent事件</strong>，<strong>对应的</strong><code>**RefreshEventListener**</code><strong>监听器检测到该事件后，将调用</strong><code>**refresh.refresh()**</code><strong>方法来完成配置的更新。</strong></li></ol><hr><p>一旦发现服务端配置的变更，那么客户端肯定是要再进行配置的加载（<code>locate（）</code>）的，而其最终通过<code>NacosConfigService.getConfig()</code>方法来实现，<strong>在调用这个方法之前，必定要完成</strong><code>**NacosConfigService**</code><strong>的初始化操作。</strong> 因此这个初始化过程做了什么？</p><ol><li>根据<code>NacosConfigService</code>的构造函数，其做了两件事：<strong>初始化并启动一个HttpAgent</strong>（在Client端用来管理链接的持久性和重用的工具），<strong>初始化一个ClientWorker。</strong></li><li>初始化<code>ClientWorker</code>的过程中，构建了两个定时调度的线程池<code>executor</code>和<code>executorService</code>，并且启动executor线程池，负责定时调度<code>checkConfigInfo（）</code>方法，<strong>即检查一次配置信息</strong>。</li><li><code>checkConfigInfo（）</code>方法中，使用了第二步的<code>executorService</code>线程池，<strong>负责搭建一个长轮询机制，去监听变更的数据</strong>。而这个任务通过<code>LongPollingRunnable</code>类来实现。</li><li>LongPollingRunnable是一个线程任务，通过调用<code>checkUpdateDataIds（）</code>方法，基于长连接的方式来监听服务端配置的变化 ，<strong>同时，如果发生配置的变更，则触发一个个事件，那么上述的监听器发现后，则调用refresh()方法更新配置。</strong></li><li><code>checkUpdateDataIds（）</code>方法中，<strong>建立的长连接时长30秒，并且一旦服务端发生数据变更，客户端则收到一个HttpResult，里面保存的是这个变更配置的最新key</strong>。那么客户端则<strong>根据最新配置的key去服务端获取配置。</strong></li></ol><hr><p>到这里为止，客户端的实时更新配置的原理已经讲完了，接下来总结服务端的原理：</p><ol><li>首先<code>ConfigController</code>下有一个监听器相关的接口，是客户端发起数据监听的接口，主要做两件事：<strong>获取客户端需要监听的可能发生变化的配置，并计算其MD5值</strong>。<strong>执行长轮询的请求</strong>。</li><li>将长轮询请求封装成<code>ClientLongPolling</code>，交给线程池去执行。</li><li>执行过程中，可以理解为一个配置为一个长轮询请求，也就对应一个<code>ClientLongPolling</code>，将其放在一个队列<code>allSubs</code>当中，并且任务总共有29.5秒的等待时间。</li><li>如果某一个配置发生改变，会调用<code>LongPollingService</code>的<code>onEvent（）</code>方法<strong>来通知客户端服务端的数据已经发生了变更。</strong></li><li>这里所谓的通知也就是从队列中找到变更配置对应的<code>ClientLongPolling</code>对象，将发生变更的<code>groupKey</code>通过该<code>ClientLongPolling</code>写入到响应对象<code>response</code>中。</li><li>那么客户端收到了<code>respones</code>后，自然可以得到更改配置的<code>groupKey</code>，然后去Nacos上查询即可。</li></ol><h1 id="三-用流程图来解释nacos-config的实现原理" tabindex="-1"><a class="header-anchor" href="#三-用流程图来解释nacos-config的实现原理" aria-hidden="true">#</a> 三. 用流程图来解释Nacos-Config的实现原理</h1><p>本篇文章先是讲了客户端方面如何执行远程配置的加载，再从加载的具体实现细节来一一详解。<strong>而这个实现细节也就包括了Nacos-Config如何实现配置的实时更新。</strong></p><p>其实讲到这里已经是写完了（累🤣），但是我还是挺怕大家看到这里还是不理解，也怕自己水平有限导致写的文章并不是很好，因此还是以自己的理解整了这么一个流程图给大家：<br><img src="`+h+'" alt="" loading="lazy"></p><h2 id="_3-1-客户端部分流程图" tabindex="-1"><a class="header-anchor" href="#_3-1-客户端部分流程图" aria-hidden="true">#</a> 3.1 客户端部分流程图</h2><figure><img src="'+w+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_3-2-服务端部分流程图" tabindex="-1"><a class="header-anchor" href="#_3-2-服务端部分流程图" aria-hidden="true">#</a> 3.2 服务端部分流程图</h2><figure><img src="'+C+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>流程图我真的尽力画了，<strong>只是做一个参考</strong>，建议以文章的内容为主（<strong>重点于小总结</strong>），也希望能够帮到大家理解。</p><p>关于Nacos具体的加载流程、事件的监听、长连接的处理我就不通过Debug来展示了。感兴趣的小伙伴可以自己Debug下，去官网把Nacos相关的代码下载下来，远程Remote下打个断点试试。</p><p>最后，非常感谢所有能够读到这里的读者！（写的可能不是很好，若哪里写的不对，还望大家指出，我及时更正）</p>',144),L=[x];function q(P,I){return s(),a("div",null,L)}const E=n(S,[["render",q],["__file","04.Nacos 配置中心源码解读.html.vue"]]);export{E as default};
