import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as t,c as p,a as n,b as o,d as c,e as i}from"./app-5f6064b2.js";const l="/assets/image-20230410150200071-94be079a.png",d="/assets/image-20230410151318060-f282e771.png",r="/assets/image-20230410152957803-e63fd0ce.png",k="/assets/image-20230410160449938-de987935.png",u="/assets/image-20230410161207917-41140724.png",h="/assets/image-20230410162729673-6774f0de.png",m="/assets/image-20230410162946997-84ca72c1.png",b={},g=i('<h1 id="mysql死锁" tabindex="-1"><a class="header-anchor" href="#mysql死锁" aria-hidden="true">#</a> MySQL死锁</h1><h2 id="_1-死锁简述" tabindex="-1"><a class="header-anchor" href="#_1-死锁简述" aria-hidden="true">#</a> 1 死锁简述</h2><p>死锁是出现在多个事务对于同一个资源相互占用时，会出现循环依赖，等待互相释放锁的情况，可能会出现死锁</p><h2 id="_2-出现死锁的场景" tabindex="-1"><a class="header-anchor" href="#_2-出现死锁的场景" aria-hidden="true">#</a> 2 出现死锁的场景</h2><h3 id="_2-1-准备工作" tabindex="-1"><a class="header-anchor" href="#_2-1-准备工作" aria-hidden="true">#</a> 2.1 准备工作</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>account<span class="token punctuation">`</span></span><span class="token punctuation">;</span>\n<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>account<span class="token punctuation">`</span></span>  <span class="token punctuation">(</span>\n  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;主键&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;账户名&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>balance<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;账户余额&#39;</span><span class="token punctuation">,</span>\n  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8mb4 ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span>\n\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>account<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>account<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;lisi&#39;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-互相更新导致死锁" tabindex="-1"><a class="header-anchor" href="#_2-2-互相更新导致死锁" aria-hidden="true">#</a> 2.2 互相更新导致死锁</h3><h4 id="_2-2-1-事务1" tabindex="-1"><a class="header-anchor" href="#_2-2-1-事务1" aria-hidden="true">#</a> 2.2.1 事务1</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">update</span> account <span class="token keyword">set</span> balance <span class="token operator">=</span> balance <span class="token operator">+</span> <span class="token number">100</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">update</span> account <span class="token keyword">set</span> balance <span class="token operator">=</span> balance <span class="token operator">-</span> <span class="token number">100</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-2-事务2" tabindex="-1"><a class="header-anchor" href="#_2-2-2-事务2" aria-hidden="true">#</a> 2.2.2 事务2</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">update</span> account <span class="token keyword">set</span> balance <span class="token operator">=</span> balance <span class="token operator">-</span> <span class="token number">100</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token keyword">update</span> account <span class="token keyword">set</span> balance <span class="token operator">=</span> balance <span class="token operator">+</span> <span class="token number">100</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-3-执行顺序说明" tabindex="-1"><a class="header-anchor" href="#_2-2-3-执行顺序说明" aria-hidden="true">#</a> 2.2.3 执行顺序说明</h4><table><thead><tr><th>执行顺序</th><th>事务1</th><th>事务2</th></tr></thead><tbody><tr><td>1</td><td>begin; // 开启事务</td><td>begin; // 开启事务</td></tr><tr><td>2</td><td>update account set balance = balance + 100 where id = 1; // 获取id=1的排它锁</td><td></td></tr><tr><td>3</td><td></td><td>update account set balance = balance - 100 where id = 2; //获取id为2的排它锁</td></tr><tr><td>4</td><td>update account set balance = balance - 100 where id = 2; // 因为id为2的排它锁已经被事务2所获取，所以此时被阻塞了</td><td></td></tr><tr><td>5</td><td></td><td>update account set balance = balance + 100 where id = 1; // 尝试获取 id =1 的排他锁，因为被事务1获取，又因为事务1被事务2 阻塞，检测出死锁</td></tr><tr><td>6</td><td>commit; // 提交</td><td></td></tr><tr><td>7</td><td>select * from account; // 查询结果，符合预期</td><td></td></tr></tbody></table><figure><img src="'+l+`" alt="image-20230410150200071" tabindex="0" loading="lazy"><figcaption>image-20230410150200071</figcaption></figure><h3 id="_2-3-相互加排他锁导致死锁" tabindex="-1"><a class="header-anchor" href="#_2-3-相互加排他锁导致死锁" aria-hidden="true">#</a> 2.3 相互加排他锁导致死锁</h3><p>这个原理其实和相互更新是一样的，在更新的时候会默认对数据加排他锁，把更新换成 for update 效果一样。</p><h4 id="_2-3-1-事务1" tabindex="-1"><a class="header-anchor" href="#_2-3-1-事务1" aria-hidden="true">#</a> 2.3.1 事务1</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> account <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">for</span> <span class="token keyword">update</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> account <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">2</span> <span class="token keyword">for</span> <span class="token keyword">update</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-2-事务2" tabindex="-1"><a class="header-anchor" href="#_2-3-2-事务2" aria-hidden="true">#</a> 2.3.2 事务2</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> account <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">2</span> <span class="token keyword">for</span> <span class="token keyword">update</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> account <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">for</span> <span class="token keyword">update</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>执行顺序</th><th>事务1</th><th>事务2</th></tr></thead><tbody><tr><td>1</td><td>begin; // 开启事务</td><td>begin; // 开启事务</td></tr><tr><td>2</td><td>select * from account where id = 1 for update; // 获取id=1的排它锁</td><td></td></tr><tr><td>3</td><td></td><td>select * from account where id = 2 for update; //获取id为2的排它锁</td></tr><tr><td>4</td><td>select * from account where id = 2 for update; // 因为id为2的排它锁已经被事务2所获取，所以此时被阻塞了</td><td></td></tr><tr><td>5</td><td></td><td>select * from account where id = 1 for update; // 尝试获取 id =1 的排他锁，因为被事务1获取，又因为事务1被事务2 阻塞，检测出死锁</td></tr><tr><td>6</td><td>commit;</td><td></td></tr></tbody></table><figure><img src="`+d+`" alt="image-20230410151318060" tabindex="0" loading="lazy"><figcaption>image-20230410151318060</figcaption></figure><h3 id="_2-4-共享锁升级排他锁导致死锁" tabindex="-1"><a class="header-anchor" href="#_2-4-共享锁升级排他锁导致死锁" aria-hidden="true">#</a> 2.4 共享锁升级排他锁导致死锁</h3><p>共享锁前面提到主要的使用场景在保持主表和从表之间的一致性，所以不建议在获得共享锁之后对于获得锁的数据进行更新操作，如果有更新操作的话，共享锁会升级成排他锁，可能会导致死锁。</p><p>因为共享锁是可能会被多个事务同时获得的，如果在获得之后同时进行 update 则会产生死锁，举例：</p><p>2个事务同时获得用户余额的共享锁，并且进行金额操作</p><h4 id="_2-4-1-事务1" tabindex="-1"><a class="header-anchor" href="#_2-4-1-事务1" aria-hidden="true">#</a> 2.4.1 事务1</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> account <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">lock</span> <span class="token operator">in</span> <span class="token keyword">share</span> <span class="token keyword">mode</span><span class="token punctuation">;</span> <span class="token comment">// 共享锁</span>
<span class="token keyword">update</span> account <span class="token keyword">set</span> balance <span class="token operator">=</span> balance <span class="token operator">-</span> <span class="token number">100</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 排它锁</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-2-事务2" tabindex="-1"><a class="header-anchor" href="#_2-4-2-事务2" aria-hidden="true">#</a> 2.4.2 事务2</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> account <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">lock</span> <span class="token operator">in</span> <span class="token keyword">share</span> <span class="token keyword">mode</span><span class="token punctuation">;</span> <span class="token comment">// 共享锁</span>
<span class="token keyword">update</span> account <span class="token keyword">set</span> balance <span class="token operator">=</span> balance <span class="token operator">-</span> <span class="token number">50</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 排它锁</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>执行顺序</th><th>事务1</th><th>事务2</th></tr></thead><tbody><tr><td>1</td><td>begin; // 开启事务</td><td>begin; // 开启事务</td></tr><tr><td>2</td><td>select * from account where id = 1 lock in share mode; // 获取id为1的共享锁</td><td></td></tr><tr><td>3</td><td></td><td>select * from account where id = 1 lock in share mode; // 获取id为1的共享锁</td></tr><tr><td>4</td><td>update account set balance = balance - 100 where id = 1; // 尝试将id为1的共享锁升级成排它锁，等待事务2释放共享锁</td><td></td></tr><tr><td>5</td><td>等待</td><td>update account set balance = balance - 50 where id = 1; // 尝试将id为1的共享锁升级成排它锁，等待事务1是否排它锁</td></tr><tr><td>6</td><td>等待</td><td>检测出死锁，事务失败，进行rollback</td></tr><tr><td>7</td><td>获取锁成功，更新成功</td><td></td></tr></tbody></table><figure><img src="`+r+'" alt="image-20230410152957803" tabindex="0" loading="lazy"><figcaption>image-20230410152957803</figcaption></figure><h2 id="_3-死锁的处理" tabindex="-1"><a class="header-anchor" href="#_3-死锁的处理" aria-hidden="true">#</a> 3 死锁的处理</h2><p>在 innoDB 中，存储引擎会检测死锁，如果有出现死锁的话，存储引擎户选择持有最少行级的排他锁的事务进行回滚。</p><p>在事务性数据库的大型应用开发过程中，很多意想不到的场景都可能会出现死锁，死锁的发生之后，只有部分或者完全回滚一个事务，释放掉其锁的资源，才能打破死锁。</p><h2 id="_4-innodb死锁检测原理" tabindex="-1"><a class="header-anchor" href="#_4-innodb死锁检测原理" aria-hidden="true">#</a> 4 innoDB死锁检测原理</h2><p>innoDB 检测死锁通过等待图来检测死锁，如果等待图有回路，则表示有循环依赖，相互等待的情况，则表示有死锁。</p><p>等待图需要通过2张表来构建，当前锁的信息表 和 当前事务等待表，通过上述第二个for update 排他锁的例子，当运行到第三个for update 时，会出现事务1等待事务2的场景，在这个时候查询数据库的锁信息 和 锁等待信息，会的到如下信息。</p><h3 id="_4-1-当前锁的信息表" tabindex="-1"><a class="header-anchor" href="#_4-1-当前锁的信息表" aria-hidden="true">#</a> 4.1 当前锁的信息表</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>ENGINE<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> <span class="token string">&#39;存储引擎&#39;</span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>ENGINE_LOCK_ID<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> <span class="token string">&#39;锁ID&#39;</span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>ENGINE_TRANSACTION_ID<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> <span class="token string">&#39;事务ID&#39;</span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>THREAD_ID<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> <span class="token string">&#39;线程ID&#39;</span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>OBJECT_SCHEMA<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> <span class="token string">&#39;数据库名&#39;</span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>OBJECT_NAME<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> <span class="token string">&#39;表名&#39;</span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>INDEX_NAME<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> <span class="token string">&#39;索引名&#39;</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>LOCK_TYPE<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> <span class="token string">&#39;锁类型&#39;</span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>LOCK_MODE<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> <span class="token string">&#39;锁&#39;</span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>LOCK_STATUS<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> <span class="token string">&#39;加锁状态&#39;</span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>LOCK_DATA<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> <span class="token string">&#39;被锁数据&#39;</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>performance_schema<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>data_locks<span class="token punctuation">`</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个图可以看出，线程 288578 获得了id = 2 的排他锁，而 线程 288577 获得了 id = 1 的排他锁。</p><figure><img src="'+k+'" alt="image-20230410160449938" tabindex="0" loading="lazy"><figcaption>image-20230410160449938</figcaption></figure><h3 id="_4-2-当前事务等待表" tabindex="-1"><a class="header-anchor" href="#_4-2-当前事务等待表" aria-hidden="true">#</a> 4.2 当前事务等待表</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>ENGINE<span class="token punctuation">`</span></span>  <span class="token keyword">AS</span> <span class="token string">&#39;存储引擎&#39;</span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>REQUESTING_ENGINE_LOCK_ID<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> <span class="token string">&#39;尝试获取锁的ID&#39;</span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>REQUESTING_ENGINE_TRANSACTION_ID<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> <span class="token string">&#39;尝试获取的事务ID&#39;</span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>REQUESTING_THREAD_ID<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> <span class="token string">&#39;尝试获取的线程ID&#39;</span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>BLOCKING_ENGINE_LOCK_ID<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> <span class="token string">&#39;阻塞获取的锁ID&#39;</span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>BLOCKING_ENGINE_TRANSACTION_ID<span class="token punctuation">`</span></span><span class="token keyword">AS</span> <span class="token string">&#39;阻塞获取的事务ID&#39;</span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>BLOCKING_THREAD_ID<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> <span class="token string">&#39;阻塞获取的线程ID&#39;</span>  <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>performance_schema<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>data_lock_waits<span class="token punctuation">`</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="'+u+'" alt="image-20230410161207917" tabindex="0" loading="lazy"><figcaption>image-20230410161207917</figcaption></figure><p>这个图可以看出，在线程 288577（也就是获得了 id = 1 排他锁的线程）在尝试获取 id = 2 时 被 block 了，block 他的线程是线程 288578，因为线程 288578 正在获得 id = 1 的排他锁。</p><p>如果在继续执行线程 288578 尝试获取 id = 1 的记录，会获取如下的结果</p><figure><img src="'+h+'" alt="image-20230410162729673" tabindex="0" loading="lazy"><figcaption>image-20230410162729673</figcaption></figure><p>通过这两张表， innoDB 可以绘出如下的图</p><ol><li>首先有多少个事务，就有多少个点，在这个例子里，有2个事务，线程 288577和 288578</li><li>线程 288577 在等待 线程 288578，尝试获取 id = 1 的记录，所以 288577 - 288578 有一条边</li><li>线程 288578 在等待 线程 288577，尝试获取 id = 2 的记录，所以 63 - 288577有一条边</li></ol><p>最后判断图中是否有回路，如果有回路，则认为有死锁，若发现有死锁，回滚 undo 量最小的记录的事务。</p><figure><img src="'+m+'" alt="image-20230410162946997" tabindex="0" loading="lazy"><figcaption>image-20230410162946997</figcaption></figure><h2 id="_5-参考文章" tabindex="-1"><a class="header-anchor" href="#_5-参考文章" aria-hidden="true">#</a> 5 参考文章</h2>',53),w={href:"https://zhuanlan.zhihu.com/p/476525859",target:"_blank",rel:"noopener noreferrer"};function y(f,_){const a=e("ExternalLinkIcon");return t(),p("div",null,[g,n("ul",null,[n("li",null,[n("a",w,[o("【数据库】数据库死锁"),c(a)])])])])}const N=s(b,[["render",y],["__file","数据库死锁.html.vue"]]);export{N as default};
