import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as e,e as t}from"./app-5f6064b2.js";const r="/assets/202210190849738-f69adc38.jpeg",p="/assets/202210190850938-dede3d0f.jpeg",d="/assets/202210190850605-0af848bd.jpeg",n="/assets/202210190851152-892aecb2.jpeg",s="/assets/202210190852271-6b60b598.jpeg",l="/assets/202210190853472-270f5f5f.jpeg",c="/assets/202210190855704-df4b3ad9.jpeg",o="/assets/202210190856390-67f55db3.jpeg",h={},_=t('<h1 id="_3-分库分表" tabindex="-1"><a class="header-anchor" href="#_3-分库分表" aria-hidden="true">#</a> 3. 分库分表</h1><h2 id="_3-1-介绍" tabindex="-1"><a class="header-anchor" href="#_3-1-介绍" aria-hidden="true">#</a> 3.1 介绍</h2><h3 id="_3-1-1-问题分析" tabindex="-1"><a class="header-anchor" href="#_3-1-1-问题分析" aria-hidden="true">#</a> 3.1.1 问题分析</h3><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>随着互联网及移动互联网的发展，应用系统的数据量也是成指数式增长，若采用单数据库进行数据存 储，存在以下性能瓶颈：</p><p>1、IO瓶颈：热点数据太多，数据库缓存不足，产生大量磁盘IO，效率较低。 请求数据太多，带宽不够，网络IO瓶颈。</p><p>2、CPU瓶颈：排序、分组、连接查询、聚合统计等SQL会耗费大量的CPU资源，请求数太多，CPU出现瓶颈。</p><p>为了解决上述问题，我们需要对数据库进行分库分表处理。</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>分库分表的中心思想都是将数据分散存储，使得单一数据库/表的数据量变小来缓解单一数据库的性能问题，从而达到提升数据库性能的目的。</p><h3 id="_3-1-2-拆分策略" tabindex="-1"><a class="header-anchor" href="#_3-1-2-拆分策略" aria-hidden="true">#</a> 3.1.2 拆分策略</h3><p>分库分表的形式，主要是两种：垂直拆分和水平拆分。而拆分的粒度，一般又分为分库和分表，所以组成的拆分策略最终如下：</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-1-3-垂直拆分" tabindex="-1"><a class="header-anchor" href="#_3-1-3-垂直拆分" aria-hidden="true">#</a> 3.1.3 垂直拆分</h3><h4 id="_1、垂直分库" tabindex="-1"><a class="header-anchor" href="#_1、垂直分库" aria-hidden="true">#</a> 1、垂直分库</h4><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>垂直分库：以表为依据，根据业务将不同表拆分到不同库中。</p><p>特点：</p><ul><li><p>每个库的表结构都不一样。</p></li><li><p>每个库的数据也不一样。</p></li><li><p>所有库的并集是全量数据。</p></li></ul><h4 id="_2、垂直分表" tabindex="-1"><a class="header-anchor" href="#_2、垂直分表" aria-hidden="true">#</a> 2、垂直分表</h4><figure><img src="'+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>垂直分表：以字段为依据，根据字段属性将不同字段拆分到不同表中。</p><p>特点：</p><ul><li><p>每个表的结构都不一样。</p></li><li><p>每个表的数据也不一样，一般通过一列（主键/外键）关联。</p></li><li><p>所有表的并集是全量数据。</p></li></ul><h3 id="_3-1-4-水平拆分" tabindex="-1"><a class="header-anchor" href="#_3-1-4-水平拆分" aria-hidden="true">#</a> 3.1.4 水平拆分</h3><h4 id="_1、水平分库" tabindex="-1"><a class="header-anchor" href="#_1、水平分库" aria-hidden="true">#</a> 1、水平分库</h4><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>水平分库：以字段为依据，按照一定策略，将一个库的数据拆分到多个库中。</p><p>特点：</p><ul><li><p>每个库的表结构都一样。</p></li><li><p>每个库的数据都不一样。</p></li><li><p>所有库的并集是全量数据。</p></li></ul><h4 id="_2、水平分表" tabindex="-1"><a class="header-anchor" href="#_2、水平分表" aria-hidden="true">#</a> 2、水平分表</h4><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>水平分表：以字段为依据，按照一定策略，将一个表的数据拆分到多个表中。</p><p>特点：</p><ul><li><p>每个表的表结构都一样。</p></li><li><p>每个表的数据都不一样。</p></li><li><p>所有表的并集是全量数据。</p></li></ul><blockquote><p>在业务系统中，为了缓解磁盘IO及CPU的性能瓶颈，到底是垂直拆分，还是水平拆分；具体是分库，还是分表，都需要根据具体的业务需求具体分析。</p></blockquote><h3 id="_3-1-5-实现技术" tabindex="-1"><a class="header-anchor" href="#_3-1-5-实现技术" aria-hidden="true">#</a> 3.1.5 实现技术</h3><ul><li><p>shardingJDBC：基于AOP原理，在应用程序中对本地执行的SQL进行拦截，解析、改写、路由处理。需要自行编码配置实现，只支持java语言，性能较高。</p></li><li><p>MyCat：数据库分库分表中间件，不用调整代码即可实现分库分表，支持多种语言，性能不及前者。</p></li></ul><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>本次课程，我们选择了是MyCat数据库中间件，通过MyCat中间件来完成分库分表操作。</p>',40),f=[_];function g(u,b){return i(),e("div",null,f)}const y=a(h,[["render",g],["__file","3 分库分表.html.vue"]]);export{y as default};
