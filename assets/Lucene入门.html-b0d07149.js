import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as l,c as i,a as n,b as s,d as t,e as p}from"./app-5f6064b2.js";const u="/assets/1564792860796-86173978.png",r="/assets/1564793174300-46303646.png",k="/assets/1564793191624-fcdac9c1.png",d="/assets/1564793429730-cd53e944.png",g="/assets/1564793716263-2bc94f3b.png",m="/assets/1564794087298-ee1d1303.png",v="/assets/1563432730514-f9d42675.png",b="/assets/1563432759717-88b4054d.png",h="/assets/1563432785392-af8fdc8d.png",f="/assets/1563432813995-ab7901ac.png",y="/assets/1563433187262-3b0c182b.png",x="/assets/1563433141796-c28f14dd.png",_="/assets/1563433257761-b9aa9b3b.png",w="/assets/1563433319254-7f513a58.png",q="/assets/1563433811322-92ac8fc0.png",S="/assets/1563433832506-f2f9a663.png",I="/assets/1563433885730-329f7d56.png",F="/assets/1563433927741-5ebc2101.png",z="/assets/1563434057949-3c9b6d44.png",D="/assets/1563436476119-c13a84db.png",E="/assets/1563436243036-14013034.png",L="/assets/1563438345818-fd34bf66.png",A="/assets/1563438362639-d224fcbf.png",j="/assets/1563438388526-52364910.png",T="/assets/1563438488435-7e80866c.png",B="/assets/1563440378997-0fb10bc7.png",C="/assets/1563438517351-3e6fdb99.png",W="/assets/1563438536802-1e8feaf3.png",e="/assets/1563440974572-a461ffeb.png",N="/assets/1563441002114-a599b6a3.png",P="/assets/1563441089996-e68b21e8.png",Y="/assets/1563441213277-f01a722f.png",K={},O=p('<h1 id="lucene入门" tabindex="-1"><a class="header-anchor" href="#lucene入门" aria-hidden="true">#</a> Lucene入门</h1><p>每日反馈：</p><p>1、ServerWebExchange</p><figure><img src="'+u+'" alt="1564792860796" tabindex="0" loading="lazy"><figcaption>1564792860796</figcaption></figure><ul><li>对象干嘛的：<strong>包含了请求与响应</strong></li></ul><p>2、shortcutFieldOrder：定义局部过滤器使用了该方法 多个局部过滤器执行的顺序</p><figure><img src="'+r+'" alt="1564793174300" tabindex="0" loading="lazy"><figcaption>1564793174300</figcaption></figure><figure><img src="'+k+'" alt="1564793191624" tabindex="0" loading="lazy"><figcaption>1564793191624</figcaption></figure><ul><li><p>springmvc的拦截器：实现HandlerInterceptor接口</p><ul><li>preHandler</li><li>postHandler</li><li>afterCompletation</li></ul></li><li><p>指定局部过滤器的执行顺序：两种实现方式：</p><ul><li>了解：指定order（程序写：有点复杂）</li><li>最直接：在application.yml中配置多个过滤器（谁配置在前谁先执行）</li></ul><figure><img src="'+d+'" alt="1564793429730" tabindex="0" loading="lazy"><figcaption>1564793429730</figcaption></figure><figure><img src="'+g+'" alt="1564793716263" tabindex="0" loading="lazy"><figcaption>1564793716263</figcaption></figure></li><li><p>shortcutFieldOrder：</p></li></ul><figure><img src="'+m+'" alt="1564794087298" tabindex="0" loading="lazy"><figcaption>1564794087298</figcaption></figure><p>3、微服务的架构在企业是否都在用</p><ul><li>工作：你问问同学、朋友 ssm框架</li><li>用不上。 用：springboot（构建一切）</li><li>会微服务的优先的：创业型的互联网公司、大厂、小公司（技术实力）</li><li>学习内容：完成 再去找工作 15k（高工：15-30）</li></ul><p>回顾：画图</p><p>1、远程调用：feign 更加优美</p><ul><li>集成：负载均衡、熔断器</li><li>优美：符合程序员的开发的逻辑</li></ul><p>2、网关：Gateway</p><ul><li>路由</li><li>断言</li><li>过滤器</li></ul><p>3、配置中心：config</p><ul><li>统一管理</li></ul><p>4、消息总线：bus</p><ul><li>刷新配置文件</li></ul><p>课程计划：索引库（数据：CRUD）</p><ul><li>倒排索引讲解 【了解】</li><li>Lucene入门案例 【编写】</li><li>分词器讲解</li><li>IK分词器集成 【学会应用】</li><li>域(表的字段、JavaBean的属性)的讲解</li><li>索引维护操作(类似数据库，存储的是数据【索引数据】) 【编写】</li></ul><h1 id="第1章-lucene介绍" tabindex="-1"><a class="header-anchor" href="#第1章-lucene介绍" aria-hidden="true">#</a> 第1章 Lucene介绍</h1><h2 id="_1-1-为什么要学lucene" tabindex="-1"><a class="header-anchor" href="#_1-1-为什么要学lucene" aria-hidden="true">#</a> 1.1 为什么要学Lucene</h2><p>学lucene目的：为了es打基础。</p><ul><li>实现商城里面的商品搜索功能，可以根据商品标题模糊查询商品。</li></ul><figure><img src="'+v+'" alt="1563432730514" tabindex="0" loading="lazy"><figcaption>1563432730514</figcaption></figure><ul><li>原来的方式实现搜索功能，我们的搜索流程如下图：满足业务需求（无法满足）</li></ul><figure><img src="'+b+'" alt="1563432759717" tabindex="0" loading="lazy"><figcaption>1563432759717</figcaption></figure><p>上图就是原始搜索引擎技术，如果用户比较少而且数据库的数据量比较小，那么这种方式实现搜索功能在企业中是比较常见的。但是数据量过多时，数据库的压力就会变得很大，查询速度会变得非常慢。我们需要使用更好的解决方案来分担数据库的压力。</p><p>现在的方案（使用Lucene），如下图 无法满足：不能排名、无法对检索的关键字高亮显示。</p><figure><img src="'+h+'" alt="1563432785392" tabindex="0" loading="lazy"><figcaption>1563432785392</figcaption></figure><p>为了解决数据库压力和速度的问题，我们的数据库换成了索引库，使用Lucene的API的来操作服务器上的索引库。</p><p>使用索引库专门实现查询功能，而且完全和数据库进行了隔离。</p><h2 id="_1-2-数据查询方法" tabindex="-1"><a class="header-anchor" href="#_1-2-数据查询方法" aria-hidden="true">#</a> 1.2 数据查询方法</h2><h3 id="_1-2-1-顺序扫描法" tabindex="-1"><a class="header-anchor" href="#_1-2-1-顺序扫描法" aria-hidden="true">#</a> 1.2.1 顺序扫描法</h3><p>所谓顺序扫描，例如要找内容包含一个字符串的文件，就是一个文档一个文档的看，对于每一个文档，从头看到尾，如果此文档包含此字符串，则此文档为我们要找的文件，接着看下一个文件，直到扫描完所有的文件。这种方法是顺序扫描方法，数据量大就搜索慢。</p><h3 id="_1-2-2-倒排索引" tabindex="-1"><a class="header-anchor" href="#_1-2-2-倒排索引" aria-hidden="true">#</a> 1.2.2 倒排索引</h3><p>先举一个栗子：</p><p>例如我们使用新华字典查询汉字，新华字典有偏旁部首的目录（索引），我们查字首先查这个目录，找到这个目录中对应的偏旁部首，就可以通过这个目录中的偏旁部首找到这个字所在的位置（文档）。</p><p>倒排索引：</p><p>将数据加入到索引库（你可以理解成另外一个数据库）时，会先提取数据中的词汇（分词），将词汇加入到文档域，文档域中记录了词汇以及词汇在哪条数据记录中出现过的数据下标。用户在搜索数据时，先将用户搜索的数据进行词汇提取，然后把对应词汇拿到索引域中进行匹配查找，查找后会找到对应的下标ID，再根据对应下标ID到文档域中找真实数据。</p><figure><img src="'+f+'" alt="1563432813995" tabindex="0" loading="lazy"><figcaption>1563432813995</figcaption></figure><p>倒排索引相关术语：</p><ul><li><strong>文档</strong>（Document）：一般搜索引擎处理的对象是互联网网页，对于搜索引擎来讲，Word、PDF、html、XML等不同格式的文件都可以称为文档，一般以文档来表示文本信息。</li><li><strong>文档集合</strong>（Document Collection）：由若干文档构成的集合成为文档集合。比如海量的互联网网页等。</li><li><strong>文档编号</strong>（Document ID）：在搜索引擎内部，会为文档集合每个文档赋予一个唯一的内部编号，以作为文档的唯一标识，以便于处理</li><li><strong>单词编号</strong>（Word ID）：与文档编号类似，搜索引擎内部以唯一的编号来表示某个单词，以作为某个单词的唯一表示</li><li><strong>单词词典</strong>（Lexicon）：搜索引擎通常的索引单位是单词，单词词典是由文档集合中出现过的所有单词构成的字符串集合，单词词典内每条索引记载单词本身的一些信息及指向倒排列表的指针。单词也就是我们在搜索时的一些关键字，也称为词条。</li><li><strong>倒排列表</strong>（PostingList）：倒排列表记载了出现过某个单词的所有文档的文档列表及单词在该文当中出现的位置信息，每条记录成为一个倒排向（Posting）。根据倒排列表，即可获知哪些文档包含某个单词。</li><li><strong>倒排文件</strong>（Inverted File）：所有单词的倒排列表往往顺序地存储在磁盘的某个文件里，这个文件即为倒排文件，倒排文件是存储倒排索引的物理文件</li></ul><p>原始数据---&gt;创建倒排索引：</p><figure><img src="'+y+'" alt="1563433187262" tabindex="0" loading="lazy"><figcaption>1563433187262</figcaption></figure><h4 id="_1-2-2-1-基本倒排索引" tabindex="-1"><a class="header-anchor" href="#_1-2-2-1-基本倒排索引" aria-hidden="true">#</a> 1.2.2.1 基本倒排索引</h4><ul><li>第1列单词ID即为每个单词的编号。</li><li>第2列即为对应的单词。</li><li>第3列即为每个单词对应的倒排列表。（比如单词“拉斯”，单词编号为8，倒排序表为｛3，5｝，说明文档集合中文档3和文档5包含这个单词。）</li></ul><figure><img src="'+x+'" alt="1563433141796" tabindex="0" loading="lazy"><figcaption>1563433141796</figcaption></figure><h4 id="_1-2-2-2-复杂倒排索引" tabindex="-1"><a class="header-anchor" href="#_1-2-2-2-复杂倒排索引" aria-hidden="true">#</a> 1.2.2.2 复杂倒排索引</h4><ul><li>就编号8—拉斯—｛（3：1）；（5，1）｝来说，（3，1）表示“拉斯”在文档3中出现一次，（5，1）表示“拉斯”在文档5中出现1次。</li></ul><figure><img src="'+_+'" alt="1563433257761" tabindex="0" loading="lazy"><figcaption>1563433257761</figcaption></figure><h4 id="_1-2-2-3-完整倒排索引" tabindex="-1"><a class="header-anchor" href="#_1-2-2-3-完整倒排索引" aria-hidden="true">#</a> 1.2.2.3 完整倒排索引</h4><p>就编号8—拉斯—2—｛（3;1;&lt;4&gt;），（5;1;&lt;4&gt;）｝来说，文档频率2表示在两个文档出现。“&lt;4&gt;”表示单词出现的位置是文档中的第4个单词。  这个倒排索引基本上是一个完备的索引系统了，实际搜索系统的索引结构基本如此。</p><figure><img src="'+w+'" alt="1563433319254" tabindex="0" loading="lazy"><figcaption>1563433319254</figcaption></figure><h3 id="_1-2-3-搜索技术应用场景" tabindex="-1"><a class="header-anchor" href="#_1-2-3-搜索技术应用场景" aria-hidden="true">#</a> 1.2.3 搜索技术应用场景</h3><p>应用场景 ：</p><p>​ 1、 单机软件的搜索（word中的搜索）</p><p>​ 2、 站内搜索 （baidu贴吧、论坛、 京东、 taobao）</p><p>​ 3、 **垂直领域（13年：只做某个方向业务）**的搜索 （拉勾网等）</p><p>​ 4、 专业搜索引擎公司 （google- 技术理论 05大数据 论文、baidu） BAT TMD</p><p>​ - 雅虎北研 人才。</p><h2 id="_1-3-lucene介绍" tabindex="-1"><a class="header-anchor" href="#_1-3-lucene介绍" aria-hidden="true">#</a> 1.3 Lucene介绍</h2><p>Lucene： Apache： 孵化器 项目捐赠 完善。</p><p>1、Lucene只是一个全文检索的<strong>工具包</strong>（jar包），它不是一个全文检索系统。</p><p>2、可以通过Lucene开发一个全文检索系统，例如：开源solr/<strong>Elasticsearch</strong></p><h3 id="_1-3-1-什么是全文索引" tabindex="-1"><a class="header-anchor" href="#_1-3-1-什么是全文索引" aria-hidden="true">#</a> 1.3.1 什么是全文索引</h3><p>计算机索引程序通过扫描文章中的每一个词，对每一个词建立一个索引，指明该词在文章中出现的次数和位置，当用户查询时，检索程序就根据事先建立的索引进行查找，并将查找的结果反馈给用户的检索方式。</p><h3 id="_1-3-2-什么是lucene" tabindex="-1"><a class="header-anchor" href="#_1-3-2-什么是lucene" aria-hidden="true">#</a> 1.3.2 什么是Lucene</h3><p>Lucene是apache软件基金会4 jakarta项目组的一个子项目，是一个开放源代码的全文检索引擎<strong>工具包</strong>，但它不是一个完整的全文检索引擎，而是一个全文检索引擎的架构，提供了完整的查询引擎和索引引擎，部分文本分析引擎。</p><ul><li>Lucene是一套用于全文检索和搜寻的开源程式库，由Apache软件基金会支持和提供。<br> Lucene提供了一个简单却强大的应用程式接口，能够做全文索引和搜寻， 在Java开发环境里Lucene是一个成熟的免费开放源代码工具。</li><li>Lucene并不是现成的搜索引擎产品，但可以用来制作搜索引擎产品。</li></ul><h3 id="_1-3-3-lucene与搜索引擎的区别" tabindex="-1"><a class="header-anchor" href="#_1-3-3-lucene与搜索引擎的区别" aria-hidden="true">#</a> 1.3.3 Lucene与搜索引擎的区别</h3><p>全文检索系统是按照全文检索理论建立起来的用于提供全文检索服务的软件系统，包括建立索引、处理查询返回结果集、增加索引、优化索引结构等功能。例如：百度搜索、eclipse帮助搜索、淘宝网商品搜索等。</p><p>搜索引擎是全文检索技术最主要的一个应用，例如百度。搜索引擎起源于传统的信息全文检索理论，即计算机程序通过扫描每一篇文章中的每一个词，建立以词为单位的倒排文件，检索程序根据检索词在每一篇文章中出现的频率和每一个检索词在一篇文章中出现的概率，对包含这些检索词的文章进行排序，最后输出排序的结果。全文检索技术是搜索引擎的核心支撑技术。</p><p>Lucene和搜索引擎不同，Lucene是一套用java或其它语言写的全文检索的工具包，为应用程序提供了很多个api接口去调用，可以简单理解为是一套实现全文检索的类库，搜索引擎是一个全文检索系统，它是一个单独运行的软件系统</p><h3 id="_1-3-4-lucene官网介绍" tabindex="-1"><a class="header-anchor" href="#_1-3-4-lucene官网介绍" aria-hidden="true">#</a> 1.3.4 Lucene官网介绍</h3>',78),M={href:"http://lucene.apache.org/",target:"_blank",rel:"noopener noreferrer"},R=p('<figure><img src="'+q+'" alt="1563433811322" tabindex="0" loading="lazy"><figcaption>1563433811322</figcaption></figure><p>#第2章 Lucene入门</p><p>实现这么一个案例，通过Java代码调用Lucene API实现对索引库的增删改查，索引库数据来源于数据库，所以增加操作需要先从数据库将数据查询出来，再调用Lucene API将数据加入到索引库中。</p><figure><img src="'+S+'" alt="1563433832506" tabindex="0" loading="lazy"><figcaption>1563433832506</figcaption></figure><h2 id="_2-1-lucene准备" tabindex="-1"><a class="header-anchor" href="#_2-1-lucene准备" aria-hidden="true">#</a> 2.1 Lucene准备</h2><p>Lucene可以在官网上下载。课程已经准备好了Lucene的文件，我们使用的是lucene-5.3.1版本。</p><p>解压后如下图：</p><figure><img src="'+I+'" alt="1563433885730" tabindex="0" loading="lazy"><figcaption>1563433885730</figcaption></figure><p>本教程使用的数据是MySQL数据库的数据，所以还需要MySQL的连接包，学员编写的时候，也可以直接复制准备好的jar包。当然我们案例中将不使用拷贝jar包的方式，我们使用maven导入依赖。</p><p>##2.2 创建索引</p><p>环境准备：</p><ul><li>JDK：1.8 （Lucene5.3.1以上，必须使用JDK1.8及以上版本）</li><li>IDE：IDEA<br> 数据库： MySQL5.7</li><li>数据库脚本位置如下图：</li></ul><figure><img src="'+F+'" alt="1563433927741" tabindex="0" loading="lazy"><figcaption>1563433927741</figcaption></figure><p>数据库数据如下：</p><figure><img src="'+z+`" alt="1563434057949" tabindex="0" loading="lazy"><figcaption>1563434057949</figcaption></figure><p>###2.2.1 pom.xml</p><p>创建案例工程lucene-01，导入所需jar包的依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.itheima<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lucene-01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!--打jar包--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!--依赖包--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--核心包--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.lucene<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lucene-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--一般分词器，适用于英文分词--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.lucene<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lucene-analyzers-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--中文分词器--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.lucene<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lucene-analyzers-smartcn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

        <span class="token comment">&lt;!--对分词索引查询解析--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.lucene<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lucene-queryparser<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--检索关键字高亮显示--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.lucene<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lucene-highlighter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

        <span class="token comment">&lt;!-- MySql --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.1.32<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

        <span class="token comment">&lt;!-- Test dependencies --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-2-创建索引" tabindex="-1"><a class="header-anchor" href="#_2-2-2-创建索引" aria-hidden="true">#</a> 2.2.2 创建索引</h3><p>创建索引分为如下8个步骤：</p><ol><li><p>采集数据</p></li><li><p>创建Document文档对象</p></li><li><p>创建分析器（分词器）</p></li><li><p>创建IndexWriterConfig配置信息类</p></li><li><p>创建Directory对象，声明索引库存储位置</p></li><li><p>创建IndexWriter写入对象</p></li><li><p>把Document写入到索引库中</p></li><li><p>释放资源</p></li></ol><p>###2.2.3 创建Pojo</p><p>采集数据是指获取需要的数据，然后将这些数据加入到索引库中，我们采集的数据是从MySQL数据库中采集。</p><p>创建Book对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>
    
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>     <span class="token comment">// 图书ID</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">// 图书名称</span>
    <span class="token keyword">private</span> <span class="token class-name">Float</span> price<span class="token punctuation">;</span>    <span class="token comment">// 图书价格</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> pic<span class="token punctuation">;</span>     <span class="token comment">// 图书图片</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span>    <span class="token comment">// 图书描述</span>

    <span class="token comment">//get...set...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-4-创建dao接口和实现类" tabindex="-1"><a class="header-anchor" href="#_2-2-4-创建dao接口和实现类" aria-hidden="true">#</a> 2.2.4 创建Dao接口和实现类</h3><p>BookDao接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BookDao</span> <span class="token punctuation">{</span>

    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>BookDaoImpl实现类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BookDao</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 数据库链接</span>
        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">// 预编译statement</span>
        <span class="token class-name">PreparedStatement</span> preparedStatement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">// 结果集</span>
        <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">// 图书列表</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;com.mysql.jdbc.Driver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc:mysql://localhost:3306/lucene?characterEncoding=UTF-8&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM book&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            resultSet <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment">// 封装数据</span>
                <span class="token class-name">Book</span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                book<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                book<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                book<span class="token punctuation">.</span><span class="token function">setPic</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;pic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                book<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getFloat</span><span class="token punctuation">(</span><span class="token string">&quot;price&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                book<span class="token punctuation">.</span><span class="token function">setDesc</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;desc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> list<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-5-创建索引" tabindex="-1"><a class="header-anchor" href="#_2-2-5-创建索引" aria-hidden="true">#</a> 2.2.5 创建索引</h3><ol><li><p>采集数据</p></li><li><p>创建Document文档对象</p></li><li><p>创建分析器（分词器）</p></li><li><p>创建IndexWriterConfig配置信息类</p></li><li><p>创建Directory对象，声明索引库存储位置</p></li><li><p>创建IndexWriter写入对象</p></li><li><p>把Document写入到索引库中</p></li><li><p>释放资源</p></li></ol><p>按照上面的流程实现创建索引，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> bookDao<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 创建文档集documents</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span> docs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Book</span> book <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Document</span> document <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 为document添加域</span>
            document<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringField</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Field<span class="token punctuation">.</span>Store</span><span class="token punctuation">.</span><span class="token constant">YES</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            document<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Field<span class="token punctuation">.</span>Store</span><span class="token punctuation">.</span><span class="token constant">YES</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            document<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringField</span><span class="token punctuation">(</span><span class="token string">&quot;price&quot;</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Field<span class="token punctuation">.</span>Store</span><span class="token punctuation">.</span><span class="token constant">YES</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            document<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string">&quot;pic&quot;</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getPic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Field<span class="token punctuation">.</span>Store</span><span class="token punctuation">.</span><span class="token constant">YES</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            document<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string">&quot;desc&quot;</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Field<span class="token punctuation">.</span>Store</span><span class="token punctuation">.</span><span class="token constant">YES</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            docs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 创建建立索引对象IndexWriter：arg0,索引存储的位置  arg1,创建索引的配置信息</span>
        <span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;d:\\\\index&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Directory</span> directory <span class="token operator">=</span> <span class="token class-name">FSDirectory</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Analyzer</span> analyzer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardAnalyzer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 分词器</span>
        <span class="token class-name">IndexWriterConfig</span> indexWriterConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexWriterConfig</span><span class="token punctuation">(</span>analyzer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">IndexWriter</span> indexWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexWriter</span><span class="token punctuation">(</span>directory<span class="token punctuation">,</span> indexWriterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 将文档添加到索引库中</span>
        indexWriter<span class="token punctuation">.</span><span class="token function">addDocuments</span><span class="token punctuation">(</span>docs<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 关闭资源</span>
<span class="token comment">//        indexWriter.commit();</span>
        indexWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// close已包含commit</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行运行，查看D:/index目录</p><figure><img src="`+D+'" alt="1563436476119" tabindex="0" loading="lazy"><figcaption>1563436476119</figcaption></figure><h2 id="_2-3-使用luke查看索引" tabindex="-1"><a class="header-anchor" href="#_2-3-使用luke查看索引" aria-hidden="true">#</a> 2.3 使用Luke查看索引</h2>',37),Q={href:"http://www.getopt.org/luke/%EF%BC%89%EF%BC%8C%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E7%95%8C%E9%9D%A2%E6%9D%A5%E8%BF%9B%E8%A1%8C%E7%B4%A2%E5%BC%95%E6%96%87%E4%BB%B6%E7%9A%84%E6%9F%A5%E8%AF%A2%E3%80%81%E4%BF%AE%E6%94%B9.luke%E6%89%80%E5%9C%A8%E4%BD%8D%E7%BD%AE%E5%A6%82%E4%B8%8B%E5%9B%BE%EF%BC%9A%E6%89%93%E5%BC%80luke-5.3.0-luke-release%EF%BC%8C%E5%8F%8C%E5%87%BBluke.bat%E5%8D%B3%E5%8F%AF%E8%BF%90%E8%A1%8Cluke",target:"_blank",rel:"noopener noreferrer"},V=p('<figure><img src="'+E+`" alt="1563436243036" tabindex="0" loading="lazy"><figcaption>1563436243036</figcaption></figure><h2 id="_2-4-基于索引库检索" tabindex="-1"><a class="header-anchor" href="#_2-4-基于索引库检索" aria-hidden="true">#</a> 2.4 基于索引库检索</h2><p>Lucene可以通过query对象输入查询语句。同数据库的sql一样，lucene也有固定的查询语法：最基本的有比如：AND, OR, NOT 等（必须大写）</p><p>举个栗子:用户想找一个desc中包括java关键字和lucene关键字的文档。它对应的查询语句：desc:java AND lucene</p><h3 id="_2-4-1-索引搜索实现" tabindex="-1"><a class="header-anchor" href="#_2-4-1-索引搜索实现" aria-hidden="true">#</a> 2.4.1 索引搜索实现</h3><ol><li><p>创建Query搜索对象</p></li><li><p>创建Directory流对象,声明索引库位置</p></li><li><p>创建索引读取对象IndexReader</p></li><li><p>创建索引搜索对象IndexSearcher</p></li><li><p>使用索引搜索对象，执行搜索，返回结果集TopDocs</p></li><li><p>解析结果集</p></li><li><p>释放资源</p></li></ol><p>实现代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQueryIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> text <span class="token operator">=</span> <span class="token string">&quot;spring&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建封装检索条件的query对象：arg0,指定根据哪个字段检索 arg1,指定分词器</span>
    <span class="token class-name">Analyzer</span> analyzer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardAnalyzer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">QueryParser</span> queryParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryParser</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> analyzer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Query</span> query <span class="token operator">=</span> queryParser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建检索对象IndexSearcher</span>
    <span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;d:\\\\index&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Directory</span> directory <span class="token operator">=</span> <span class="token class-name">FSDirectory</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">IndexReader</span> indexReader <span class="token operator">=</span> <span class="token class-name">DirectoryReader</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span>directory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">IndexSearcher</span> indexSearcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexSearcher</span><span class="token punctuation">(</span>indexReader<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 调用方法</span>
    <span class="token class-name">TopDocs</span> topDocs <span class="token operator">=</span> indexSearcher<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 结果集处理</span>
    <span class="token keyword">int</span> total <span class="token operator">=</span> topDocs<span class="token punctuation">.</span>totalHits<span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;查询的结果条数大约为：&quot;</span> <span class="token operator">+</span> total<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ScoreDoc</span><span class="token punctuation">[</span><span class="token punctuation">]</span> scoreDocs <span class="token operator">=</span> topDocs<span class="token punctuation">.</span>scoreDocs<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ScoreDoc</span> scoreDoc <span class="token operator">:</span> scoreDocs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">float</span> score <span class="token operator">=</span> scoreDoc<span class="token punctuation">.</span>score<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;得分：&quot;</span> <span class="token operator">+</span> score<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> docID <span class="token operator">=</span> scoreDoc<span class="token punctuation">.</span>doc<span class="token punctuation">;</span>   <span class="token comment">// 文档id</span>
        <span class="token class-name">Document</span> doc <span class="token operator">=</span> indexSearcher<span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span>docID<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;id:&quot;</span> <span class="token operator">+</span> doc<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;name:&quot;</span> <span class="token operator">+</span> doc<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;price:&quot;</span> <span class="token operator">+</span> doc<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;price&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;pic:&quot;</span> <span class="token operator">+</span> doc<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;pic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;desc:&quot;</span> <span class="token operator">+</span> doc<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;desc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 释放资源</span>
    indexReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-2-搜索方法" tabindex="-1"><a class="header-anchor" href="#_2-4-2-搜索方法" aria-hidden="true">#</a> 2.4.2 搜索方法</h3><p>IndexSearcher搜索方法如下：</p><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">indexSearcher.search(query, n)</td><td style="text-align:left;">根据Query搜索，返回评分最高的n条记录</td></tr><tr><td style="text-align:left;">indexSearcher.search(query, filter, n)</td><td style="text-align:left;">根据Query搜索，添加过滤策略，返回评分最高的n条记录</td></tr><tr><td style="text-align:left;">indexSearcher.search(query, n, sort)</td><td style="text-align:left;">根据Query搜索，添加排序策略，返回评分最高的n条记录</td></tr><tr><td style="text-align:left;">indexSearcher.search(booleanQuery, filter, n, sort)</td><td style="text-align:left;">根据Query搜索，添加过滤策略，添加排序策略，返回评分最高的n条记</td></tr></tbody></table><h1 id="第3章-分词器" tabindex="-1"><a class="header-anchor" href="#第3章-分词器" aria-hidden="true">#</a> 第3章 分词器</h1><h2 id="_3-1-分词理解" tabindex="-1"><a class="header-anchor" href="#_3-1-分词理解" aria-hidden="true">#</a> 3.1 分词理解</h2><p>在对Docuemnt中的内容进行索引之前，需要使用分词器进行分词 ，分词的目的是为了搜索。分词的主要过程就是先分词后过滤。</p><ul><li>分词：采集到的数据会存储到document对象的Field域中，分词就是将Document中Field的value值切分成一个一个的词。</li><li>过滤：包括去除标点符号过滤、去除停用词过滤（的、是、a、an、the等）、大写转小写、词的形还原（复数形式转成单数形参、过去式转成现在式。。。）等。</li></ul><p>什么是停用词？停用词是为节省存储空间和提高搜索效率，搜索引擎在索引页面或处理搜索请求时会自动忽略某些字或词，这些字或词即被称为Stop Words(停用词)。比如语气助词、副词、介词、连接词等，通常自身并无明确的意义，只有将其放入一个完整的句子中才有一定作用，如常见的“的”、“在”、“是”、“啊”等。</p><p>对于分词来说，不同的语言，分词规则不同。Lucene作为一个工具包提供不同国家的分词器，本例子使用StandardAnalyzer，它可以对用英文进行分词。</p><p>如下是org.apache.lucene.analysis.standard.standardAnalyzer的部分源码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token class-name">TokenStreamComponents</span> <span class="token function">createComponents</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> fieldName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">final</span> <span class="token class-name">Tokenizer</span> src<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onOrAfter</span><span class="token punctuation">(</span><span class="token class-name">Version</span><span class="token punctuation">.</span><span class="token constant">LUCENE_4_7_0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//创建分词[带有Tokenizer一般都表示创建分词器]</span>
    <span class="token class-name">StandardTokenizer</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardTokenizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t<span class="token punctuation">.</span><span class="token function">setMaxTokenLength</span><span class="token punctuation">(</span>maxTokenLength<span class="token punctuation">)</span><span class="token punctuation">;</span>
    src <span class="token operator">=</span> t<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">//创建分词[带有Tokenizer一般都表示创建分词器]</span>
    <span class="token class-name">StandardTokenizer40</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardTokenizer40</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t<span class="token punctuation">.</span><span class="token function">setMaxTokenLength</span><span class="token punctuation">(</span>maxTokenLength<span class="token punctuation">)</span><span class="token punctuation">;</span>
    src <span class="token operator">=</span> t<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//创建过滤,带有Filter一般表示过滤s</span>
  <span class="token class-name">TokenStream</span> tok <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardFilter</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//大小写过滤</span>
  tok <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LowerCaseFilter</span><span class="token punctuation">(</span>tok<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//停用词汇过滤</span>
  tok <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StopFilter</span><span class="token punctuation">(</span>tok<span class="token punctuation">,</span> stopwords<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TokenStreamComponents</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> tok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">setReader</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Reader</span> reader<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
      <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token class-name">StandardAnalyzer</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>maxTokenLength<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>src <span class="token keyword">instanceof</span> <span class="token class-name">StandardTokenizer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">StandardTokenizer</span><span class="token punctuation">)</span>src<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMaxTokenLength</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">StandardTokenizer40</span><span class="token punctuation">)</span>src<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMaxTokenLength</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setReader</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如下图是语汇单元的生成过程：</p><figure><img src="`+L+'" alt="1563438345818" tabindex="0" loading="lazy"><figcaption>1563438345818</figcaption></figure><h2 id="_3-2-分词器的使用时机" tabindex="-1"><a class="header-anchor" href="#_3-2-分词器的使用时机" aria-hidden="true">#</a> 3.2 分词器的使用时机</h2><h3 id="_3-2-1-索引时使用analyzer" tabindex="-1"><a class="header-anchor" href="#_3-2-1-索引时使用analyzer" aria-hidden="true">#</a> 3.2.1 索引时使用Analyzer</h3><p>输入关键字进行搜索，当需要让该关键字与文档域内容所包含的词进行匹配时需要对文档域内容进行分析，需要经过Analyzer分析器处理生成语汇单元（Token）。分析器分析的对象是文档中的Field域。当Field的属性tokenized（是否分词）为true时会对Field值进行分析，如下图：</p><figure><img src="'+A+'" alt="1563438362639" tabindex="0" loading="lazy"><figcaption>1563438362639</figcaption></figure><p>对于一些Field可以不用分析：</p><ul><li>不作为查询条件的内容，比如文件路径</li><li>不是匹配内容中的词而匹配Field的整体内容，比如订单号、身份证号等。</li></ul><h3 id="_3-2-2-搜索时使用analyzer" tabindex="-1"><a class="header-anchor" href="#_3-2-2-搜索时使用analyzer" aria-hidden="true">#</a> 3.2.2 搜索时使用Analyzer</h3><p>对搜索关键字进行分析和索引分析一样，使用Analyzer对搜索关键字进行分析、分词处理，使用分析后每个词语进行搜索。比如：搜索关键字：spring web ，经过分析器进行分词，得出：spring web拿词去索引词典表查找 ，找到索引链接到Document，解析Document内容。</p><p>对于匹配整体Field域的查询可以0在搜索时不分析，比如根据订单号、身份证号查询等。</p><p><strong>注意：搜索使用的分析器要和索引使用的分析器一致</strong></p><h2 id="_3-3-中文分词器" tabindex="-1"><a class="header-anchor" href="#_3-3-中文分词器" aria-hidden="true">#</a> 3.3 中文分词器</h2><h3 id="_3-3-1-什么是中文分词器" tabindex="-1"><a class="header-anchor" href="#_3-3-1-什么是中文分词器" aria-hidden="true">#</a> 3.3.1 什么是中文分词器</h3><p>学过英文的都知道，英文是以单词为单位的，单词与单词之间以空格或者逗号句号隔开。所以对于英文，我们可以简单以空格判断某个字符串是否为一个单词，比如I love China，love 和 China很容易被程序区分开来。</p><p>而中文则以字为单位，字又组成词，字和词再组成句子。中文“我爱中国”就不一样了，电脑不知道“中国”是一个词语还是“爱中”是一个词语。</p><p>把中文的句子切分成有意义的词，就是中文分词，也称切词。我爱中国，分词的结果是：我、爱、中国。</p><h3 id="_3-3-2-lucene自带中文分词器" tabindex="-1"><a class="header-anchor" href="#_3-3-2-lucene自带中文分词器" aria-hidden="true">#</a> 3.3.2 Lucene自带中文分词器</h3><ul><li>StandardAnalyzer:</li></ul><p>单字分词：就是按照中文一个字一个字地进行分词。如：“我爱中国”，效果：“我”、“爱”、“中”、“国”。</p><ul><li>CJKAnalyzer</li></ul><p>二分法分词：按两个字进行切分。如：“我是中国人”，效果：“我是”、“是中”、“中国”“国人”。</p><ul><li>SmartChineseAnalyzer</li></ul><p>对中文支持较好，但扩展性差，扩展词库，禁用词库和同义词库等不好处理。</p><h3 id="_3-3-3-第三方中文分词器" tabindex="-1"><a class="header-anchor" href="#_3-3-3-第三方中文分词器" aria-hidden="true">#</a> 3.3.3 第三方中文分词器</h3><ul><li>paoding</li></ul>',45),J={href:"https://code.google.com/p/paoding/",target:"_blank",rel:"noopener noreferrer"},U=n("ul",null,[n("li",null,"mmseg4j")],-1),H={href:"https://code.google.com/p/mmseg4j/",target:"_blank",rel:"noopener noreferrer"},X={href:"https://github.com/chenlb/mmseg4j-solr%EF%BC%8C%E6%94%AF%E6%8C%81Lucene",target:"_blank",rel:"noopener noreferrer"},G=n("ul",null,[n("li",null,[n("strong",null,"IK-analyzer")])],-1),Z={href:"https://code.google.com/p/ik-analyzer/%E4%B8%8A%EF%BC%8C%E6%94%AF%E6%8C%81Lucene",target:"_blank",rel:"noopener noreferrer"},$=n("strong",null,"2012年12月后没有在更新（新词：网络）",-1),nn=p('<h2 id="_3-4-使用中文分词器ikanalyzer" tabindex="-1"><a class="header-anchor" href="#_3-4-使用中文分词器ikanalyzer" aria-hidden="true">#</a> 3.4 使用中文分词器IKAnalyzer</h2><p>IKAnalyzer继承Lucene的Analyzer抽象类，使用IKAnalyzer和Lucene自带的分析器方法一样，将Analyzer测试代码改为IKAnalyzer测试中文分词效果。</p><p>如果使用中文分词器ik-analyzer，就需要在索引和搜索程序中使用一致的分词器：IK-analyzer。</p><h3 id="_3-4-1-安装使用ik分词器" tabindex="-1"><a class="header-anchor" href="#_3-4-1-安装使用ik分词器" aria-hidden="true">#</a> 3.4.1 安装使用IK分词器</h3><p>将2个jar包添加到工程中，然后将其他3个配置文件放置到工程的classpath目录即可，但我们这里将使用maven工程，所以可以将包安装到本地。</p><figure><img src="'+j+`" alt="1563438388526" tabindex="0" loading="lazy"><figcaption>1563438388526</figcaption></figure><p>先将上面2个jar包拷贝到D盘根目录，然后按照如下方式安装:</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>mvn <span class="token property">install</span><span class="token punctuation">:</span>install-file -Dfile=<span class="token property">D</span><span class="token punctuation">:</span>\\IKAnalyzer5.3.1.jar -DgroupId=org.wltea.ik-analyzer -DartifactId=ik-analyzer -Dversion=5.3.1.RELEASE -Dpackaging=jar

mvn <span class="token property">install</span><span class="token punctuation">:</span>install-file -Dfile=<span class="token property">D</span><span class="token punctuation">:</span>\\IK-Analyzer-extra-5.3.1.jar -DgroupId=org.wltea.ik-analyzer -DartifactId=ik-analyzer-extra -Dversion=5.3.1.RELEASE -Dpackaging=jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在pom.xml中引入依赖:</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--IK分词器--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.wltea.ik-analyzer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>ik-analyzer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.3.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.wltea.ik-analyzer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>ik-analyzer-extra<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.3.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>导入配置文件，分别将ext.dic,IKAnalyzer.cfg.xml，stopword.dic文件拷贝到工程的resources目录。</p><figure><img src="`+T+'" alt="1563438488435" tabindex="0" loading="lazy"><figcaption>1563438488435</figcaption></figure><p>IK分词器安装好了，前面的案例想使用IK分词器只需要将StandardAnalyzer改成IKAnalyzer即可。</p><figure><img src="'+B+`" alt="1563440378997" tabindex="0" loading="lazy"><figcaption>1563440378997</figcaption></figure><p>改造前：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Analyzer</span> analyzer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardAnalyzer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>改造后：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Analyzer</span> analyzer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IKAnalyzer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-4-2-扩展中文词库" tabindex="-1"><a class="header-anchor" href="#_3-4-2-扩展中文词库" aria-hidden="true">#</a> 3.4.2 扩展中文词库</h3><p>如果想配置扩展词和停用词，就创建扩展词的文件和停用词的文件。</p><p>注意：不要用window自带的记事本保存扩展词文件和停用词文件，那样的话，格式中是含有bom的。</p><p>编辑上面拷贝的文件ext.dic文件，可以在里面添加一些相关的词汇，例如：传智播客</p><p>使用luke工具可以明显看到传智播客已经成为了一个关键词</p><figure><img src="`+C+'" alt="1563438517351" tabindex="0" loading="lazy"><figcaption>1563438517351</figcaption></figure><h3 id="_3-4-3-停用词库" tabindex="-1"><a class="header-anchor" href="#_3-4-3-停用词库" aria-hidden="true">#</a> 3.4.3 停用词库</h3><p>stopword.dic是存放停用词的地方,比如可以讲MyBatis作为停用词，只需要在stopword.dic后面追加一个mybatis即可。mybatis增加停用词库后发现再也搜不到mybatis了。</p><figure><img src="'+W+'" alt="1563438536802" tabindex="0" loading="lazy"><figcaption>1563438536802</figcaption></figure><h1 id="第4章-field域" tabindex="-1"><a class="header-anchor" href="#第4章-field域" aria-hidden="true">#</a> 第4章 Field域</h1><h2 id="_4-1-field属性" tabindex="-1"><a class="header-anchor" href="#_4-1-field属性" aria-hidden="true">#</a> 4.1 Field属性</h2><p>Field是文档中的域，包括Field名和Field值两部分，一个文档可以包括多个Field，Document只是Field的一个承载体，Field值即为要索引的内容，也是要搜索的内容。</p><ul><li>是否分词(tokenized)</li></ul><p>是：作分词处理，即将Field值进行分词，分词的目的是为了索引。</p><p>比如：商品名称、商品描述等，这些内容用户要输入关键字搜索，由于搜索的内容格式大、内容多需要分词后将语汇单元建立索引</p><p>否：不作分词处理</p><p>比如：商品id、订单号、身份证号等</p><ul><li>是否索引(indexed)</li></ul><p>是：进行索引。将Field分词后的词或整个Field值进行索引，存储到索引域，索引的目的是为了搜索。</p><p>比如：商品名称、商品描述分析后进行索引，订单号、身份证号不用分词但也要索引，这些将来都要作为查询条件。</p><p>否：不索引。<br> 比如：图片路径、文件路径等，不用作为查询条件的不用索引。</p><ul><li>是否存储(stored)</li></ul><p>是：将Field值存储在文档域中，存储在文档域中的Field才可以从Document中获取。</p><p>比如：商品名称、订单号，凡是将来要从Document中获取的Field都要存储。</p><p>否：不存储Field值<br> 比如：商品描述，内容较大不用存储。如果要向用户展示商品描述可以从系统的关系数据库中获取。</p><h2 id="_4-2-field常用类型" tabindex="-1"><a class="header-anchor" href="#_4-2-field常用类型" aria-hidden="true">#</a> 4.2 Field常用类型</h2><p>下边列出了开发中常用 的Filed类型，注意Field的属性，根据需求选择：</p>',45),sn=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"Field类"),n("th",{style:{"text-align":"center"}},"数据类型"),n("th",{style:{"text-align":"center"}},"Analyzed是否分词"),n("th",{style:{"text-align":"center"}},"Indexed是否索引"),n("th",{style:{"text-align":"center"}},"Stored是否存储"),n("th",{style:{"text-align":"left"}},"说明")])],-1),an=n("tr",null,[n("td",{style:{"text-align":"center"}},"StringField(FieldName, FieldValue,Store.YES))"),n("td",{style:{"text-align":"center"}},"字符串"),n("td",{style:{"text-align":"center"}},"N"),n("td",{style:{"text-align":"center"}},"Y"),n("td",{style:{"text-align":"center"}},"Y或N"),n("td",{style:{"text-align":"left"}},"这个Field用来构建一个字符串Field，但是不会进行分词，会将整个串存储在索引中，比如(订单号,身份证号等)是否存储在文档中用Store.YES或Store.NO决定")],-1),tn=n("tr",null,[n("td",{style:{"text-align":"center"}},"LongField(FieldName, FieldValue,Store.YES)"),n("td",{style:{"text-align":"center"}},"Long型"),n("td",{style:{"text-align":"center"}},"Y"),n("td",{style:{"text-align":"center"}},"Y"),n("td",{style:{"text-align":"center"}},"Y或N"),n("td",{style:{"text-align":"left"}},"这个Field用来构建一个Long数字型Field，进行分词和索引，比如(价格)是否存储在文档中用Store.YES或Store.NO决定")],-1),pn=n("tr",null,[n("td",{style:{"text-align":"center"}},"StoredField(FieldName, FieldValue)"),n("td",{style:{"text-align":"center"}},"重载方法，支持多种类型"),n("td",{style:{"text-align":"center"}},"N"),n("td",{style:{"text-align":"center"}},"N"),n("td",{style:{"text-align":"center"}},"Y"),n("td",{style:{"text-align":"left"}},"这个Field用来构建不同类型Field不分析，不索引，但要Field存储在文档中")],-1),en={style:{"text-align":"center"}},on={href:"http://Store.NO",target:"_blank",rel:"noopener noreferrer"},cn=n("td",{style:{"text-align":"center"}},"字符串或流",-1),ln=n("td",{style:{"text-align":"center"}},"Y",-1),un=n("td",{style:{"text-align":"center"}},"Y",-1),rn=n("td",{style:{"text-align":"center"}},"Y或N",-1),kn=n("td",{style:{"text-align":"left"}},"如果是一个Reader, lucene猜测内容比较多,会采用Unstored的策略.",-1),dn=p(`<h2 id="_4-3-field修改" tabindex="-1"><a class="header-anchor" href="#_4-3-field修改" aria-hidden="true">#</a> 4.3 Field修改</h2><h3 id="_4-3-1-修改分析" tabindex="-1"><a class="header-anchor" href="#_4-3-1-修改分析" aria-hidden="true">#</a> 4.3.1 修改分析</h3><p>图书id：</p><p>是否分词：不用分词，因为不会根据商品id来搜索商品</p><p>是否索引：不索引，因为不需要根据图书ID进行搜索</p><p>是否存储：要存储，因为查询结果页面需要使用id这个值。</p><p>图书名称：</p><p>是否分词：要分词，因为要根据图书名称的关键词搜索。</p><p>是否索引：要索引。</p><p>是否存储：要存储。</p><p>图书价格：</p><p>是否分词：要分词，lucene对数字型的值只要有搜索需求的都要分词和索引，因为lucene对数字型的内容要特殊分词处理，需要分词和索引。</p><p>是否索引：要索引</p><p>是否存储：要存储</p><p>图书图片地址：</p><p>是否分词：不分词</p><p>是否索引：不索引</p><p>是否存储：要存储</p><p>图书描述：</p><p>是否分词：要分词</p><p>是否索引：要索引</p><p>是否存储：因为图书描述内容量大，不在查询结果页面直接显示，不存储。</p><p>不存储是不在lucene的索引域中记录，节省lucene的索引文件空间。</p><p>如果要在详情页面显示描述，解决方案：</p><p>从lucene中取出图书的id，根据图书的id查询关系数据库（MySQL）中book表得到描述信息。</p><h3 id="_4-3-2-代码修改" tabindex="-1"><a class="header-anchor" href="#_4-3-2-代码修改" aria-hidden="true">#</a> 4.3.2 代码修改</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//创建文档对象</span>
<span class="token class-name">Document</span> doc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//不分词，不索引，储存</span>
<span class="token comment">//doc.add(new TextField(&quot;id&quot;,book.getId()+&quot;&quot;, Field.Store.YES));</span>
doc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StoredField</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span>book<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 图书名称</span>
<span class="token comment">// 分词，索引，储存</span>
<span class="token comment">//doc.add(new TextField(&quot;name&quot;,book.getName(), Field.Store.YES));</span>
doc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Field<span class="token punctuation">.</span>Store</span><span class="token punctuation">.</span><span class="token constant">YES</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 图书价格</span>
<span class="token comment">// 分词，索引，储存</span>
<span class="token comment">//doc.add(new TextField(&quot;price&quot;,book.getPic()+&quot;&quot;, Field.Store.YES));</span>
doc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FloatField</span><span class="token punctuation">(</span><span class="token string">&quot;price&quot;</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Field<span class="token punctuation">.</span>Store</span><span class="token punctuation">.</span><span class="token constant">YES</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 图书图片地址</span>
<span class="token comment">// 不分词，不索引，储存</span>
<span class="token comment">//doc.add(new TextField(&quot;pic&quot;,book.getPic(), Field.Store.YES));</span>
doc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StoredField</span><span class="token punctuation">(</span><span class="token string">&quot;pic&quot;</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getPic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 图书描述</span>
<span class="token comment">// 分词，索引，不储存</span>
<span class="token comment">//doc.add(new TextField(&quot;desc&quot;,book.getDesc(), Field.Store.YES));</span>
doc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string">&quot;desc&quot;</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Field<span class="token punctuation">.</span>Store</span><span class="token punctuation">.</span><span class="token constant">NO</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
docs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>#第5章 索引维护</p><h2 id="_5-1-删除索引" tabindex="-1"><a class="header-anchor" href="#_5-1-删除索引" aria-hidden="true">#</a> 5.1 删除索引</h2><h3 id="_5-1-1-删除指定索引" tabindex="-1"><a class="header-anchor" href="#_5-1-1-删除指定索引" aria-hidden="true">#</a> 5.1.1 删除指定索引</h3><p>根据Term项删除索引，满足条件的将全部删除。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeleteIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建写入对象</span>
    <span class="token class-name">Analyzer</span> analyzer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IKAnalyzer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Directory</span> directory <span class="token operator">=</span> <span class="token class-name">FSDirectory</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;d:/index&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">IndexWriterConfig</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexWriterConfig</span><span class="token punctuation">(</span>analyzer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">IndexWriter</span> indexWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexWriter</span><span class="token punctuation">(</span>directory<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 调用方法</span>
    indexWriter<span class="token punctuation">.</span><span class="token function">deleteDocuments</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Term</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mybatis&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 关闭资源</span>
    indexWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果如下图：索引域没有变化,文档域数据被删除掉。</p><ul><li><p>删除前：</p><ul><li><p>索引文件：</p><figure><img src="`+e+'" alt="1563440974572" tabindex="0" loading="lazy"><figcaption>1563440974572</figcaption></figure></li><li><p>数据文件：</p><figure><img src="'+N+'" alt="1563441002114" tabindex="0" loading="lazy"><figcaption>1563441002114</figcaption></figure></li></ul></li><li><p>删除后：</p><ul><li><p>索引文件：</p><figure><img src="'+e+'" alt="1563440974572" tabindex="0" loading="lazy"><figcaption>1563440974572</figcaption></figure></li><li><p>数据文件：</p><figure><img src="'+P+'" alt="1563441089996" tabindex="0" loading="lazy"><figcaption>1563441089996</figcaption></figure></li></ul></li></ul><h3 id="_5-1-2-删除全部索引-慎用" tabindex="-1"><a class="header-anchor" href="#_5-1-2-删除全部索引-慎用" aria-hidden="true">#</a> 5.1.2 删除全部索引（慎用）</h3><p>将索引目录的索引信息全部删除，直接彻底删除，无法恢复。</p><p>建议参照关系数据库基于主键删除方式，所以在创建索引时需要创建一个主键Field，删除时根据此主键Field删除。</p><p>索引删除后将放在Lucene的回收站中，Lucene3.X版本可以恢复删除的文档，3.X之后无法恢复。</p><p>代码：</p><figure><img src="'+Y+`" alt="1563441213277" tabindex="0" loading="lazy"><figcaption>1563441213277</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeleteIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建写入对象</span>
    <span class="token class-name">Analyzer</span> analyzer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IKAnalyzer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Directory</span> directory <span class="token operator">=</span> <span class="token class-name">FSDirectory</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;d:/index&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">IndexWriterConfig</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexWriterConfig</span><span class="token punctuation">(</span>analyzer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">IndexWriter</span> indexWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexWriter</span><span class="token punctuation">(</span>directory<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 调用方法</span>
    <span class="token comment">// indexWriter.deleteDocuments(new Term(&quot;name&quot;, &quot;mybatis&quot;));</span>
    indexWriter<span class="token punctuation">.</span><span class="token function">deleteAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 关闭资源</span>
    indexWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>索引域数据清空，文档域数据也清空。</p><h2 id="_5-2-更新索引" tabindex="-1"><a class="header-anchor" href="#_5-2-更新索引" aria-hidden="true">#</a> 5.2 更新索引</h2><p>更新索引是先删除再添加，建议对更新需求采用此方法并且要保证对已存在的索引执行更新，可以先查询出来，确定更新记录存在执行更新操作。</p><p>如果更新索引的目标文档对象不存在，则执行添加。</p><p>代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpdateIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建写入对象</span>
    <span class="token class-name">Analyzer</span> analyzer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IKAnalyzer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Directory</span> directory <span class="token operator">=</span> <span class="token class-name">FSDirectory</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;d:/index&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">IndexWriterConfig</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexWriterConfig</span><span class="token punctuation">(</span>analyzer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">IndexWriter</span> indexWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexWriter</span><span class="token punctuation">(</span>directory<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 调用方法</span>
    <span class="token class-name">Document</span> doc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    doc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringField</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Field<span class="token punctuation">.</span>Store</span><span class="token punctuation">.</span><span class="token constant">YES</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    doc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;java核心思想&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Field<span class="token punctuation">.</span>Store</span><span class="token punctuation">.</span><span class="token constant">YES</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Term</span> term <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Term</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 执行更新，会把所有符合条件的Document删除，再新增。</span>
    indexWriter<span class="token punctuation">.</span><span class="token function">updateDocument</span><span class="token punctuation">(</span>term<span class="token punctuation">,</span> doc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 关闭资源</span>
    indexWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,47);function gn(mn,vn){const a=c("ExternalLinkIcon");return l(),i("div",null,[O,n("p",null,[s("官网： "),n("a",M,[s("http://lucene.apache.org/"),t(a)])]),R,n("p",null,[s("Luke作为Lucene工具包中的一个工具（"),n("a",Q,[s("http://www.getopt.org/luke/），可以通过界面来进行索引文件的查询、修改.luke所在位置如下图：打开luke-5.3.0-luke-release，双击luke.bat即可运行luke"),t(a)])]),V,n("p",null,[s("庖丁解牛最新版在 "),n("a",J,[s("https://code.google.com/p/paoding/"),t(a)]),s(" 中最多支持Lucene 3.0，且最新提交的代码在 2008-06-03，在svn中最新也是2010年提交，已经过时，不予考虑。")]),U,n("p",null,[s("最新版已从 "),n("a",H,[s("https://code.google.com/p/mmseg4j/"),t(a)]),s(" 移至 "),n("a",X,[s("https://github.com/chenlb/mmseg4j-solr，支持Lucene"),t(a)]),s(" 4.10，且在github中最新提交代码是2014年6月，从09年～14年一共有：18个版本，也就是一年几乎有3个大小版本，有较大的活跃度，用了mmseg算法。")]),G,n("p",null,[s("最新版在"),n("a",Z,[s("https://code.google.com/p/ik-analyzer/上，支持Lucene"),t(a)]),s(" 4.10从2006年12月推出1.0版开始， IKAnalyzer已经推出了4个大版本。最初，它是以开源项目Luence为应用主体的，结合词典分词和文法分析算法的中文分词组件。从3.0版本开 始，IK发展为面向Java的公用分词组件，独立于Lucene项目，同时提供了对Lucene的默认优化实现。在2012版本中，IK实现了简单的分词 歧义排除算法，标志着IK分词器从单纯的词典分词向模拟语义分词衍化。 但是也就是"),$,s("。")]),nn,n("table",null,[sn,n("tbody",null,[an,tn,pn,n("tr",null,[n("td",en,[s("TextField(FieldName, FieldValue, "),n("a",on,[s("Store.NO"),t(a)]),s(")或TextField(FieldName, reader)")]),cn,ln,un,rn,kn])])]),dn])}const fn=o(K,[["render",gn],["__file","Lucene入门.html.vue"]]);export{fn as default};
