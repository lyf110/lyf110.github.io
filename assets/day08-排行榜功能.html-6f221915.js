import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as n,b as s,d as p,e as a}from"./app-5f6064b2.js";const l="/assets/1689426645498-57-7d023044.png",u="/assets/image-20230715215102912-dd47ddf8.png",r="/assets/image-20230715215123325-38ceef20.png",k="/assets/1689426645443-1-c7194d2f.png",d="/assets/1689426645444-2-c3c86f14.png",m="/assets/1689426645444-3-0d79c40b.png",v="/assets/1689426645444-4-7c2cdc5d.png",g="/assets/image-20230715215206171-a3359d48.png",b="/assets/1689426645445-5-cf80f212.png",y="/assets/1689426645445-6-93a7abd4.png",f="/assets/image-20230715215243355-b8a5037e.png",h="/assets/1689426645445-7-4017fa08.png",_="/assets/1689426645445-8-6bc0bc5b.png",x="/assets/1689426645446-9-52e49b1c.png",w="/assets/image-20230715215318258-f1aff26f.png",S="/assets/1689426645446-10-baf4f3de.png",B="/assets/1689426645446-11-93042f59.png",P="/assets/1689426645446-12-1f443398.png",T="/assets/1689426645446-13-958e6146.png",j="/assets/1689426645446-14-9e77362c.png",I="/assets/1689426645447-15-ce123d19.png",R="/assets/1689426645447-16-376009e3.png",L="/assets/1689426645447-17-99ba8ba2.png",O="/assets/1689426645447-18-59d9396c.png",N="/assets/1689426645447-19-81a013da.png",E="/assets/1689426645447-20-0fecfa70.png",C="/assets/1689426645447-21-04c1638b.png",q="/assets/image-20230715215435882-f3f007ae.png",M="/assets/1689426645447-22-5e999c48.png",D="/assets/1689426645447-23-c18cdf3b.png",X="/assets/1689426645448-24-bb3c7382.png",A="/assets/1689426645448-25-42bdbcdc.png",z="/assets/1689426645448-26-a0647e59.png",U="/assets/1689426645448-27-82dc82c2.png",J="/assets/1689426645448-28-0de9a1ee.png",F="/assets/1689426645448-29-e3c49756.png",H="/assets/1689426645448-30-7f045b7a.png",V="/assets/1689426645448-31-c01d08be.png",Q="/assets/1689426645448-32-130c1c30.png",Y="/assets/1689426645449-33-44710526.png",K="/assets/1689426645449-34-548bec59.png",G="/assets/1689426645449-35-f2f63dc1.png",Z="/assets/1689426645449-36-89606e83.png",W="/assets/1689426645449-37-8216c554.png",$="/assets/1689426645449-38-8c9864a4.png",nn="/assets/image-20230715215636276-1809017e.png",sn="/assets/1689426645449-39-0b95fddc.png",an="/assets/image-20230715215700210-8f8d1725.png",tn="/assets/1689426645449-40-308386fc.png",pn="/assets/1689426645450-41-3e3844bd.png",en="/assets/image-20230715215636276-1809017e.png",on="/assets/image-20230715215737198-df14ee12.png",cn="/assets/1689426645450-42-a275a07e.png",ln="/assets/1689426645450-43-d6d63f76.png",un="/assets/1689426645450-44-e4226d29.png",rn="/assets/1689426645450-45-ce5ff154.png",kn="/assets/1689426645450-46-b83ba739.png",dn="/assets/1689426645451-47-3c0554ba.gif",mn="/assets/1689426645451-48-645f5b2a.gif",vn="/assets/1689426645451-49-f756a683.png",gn="/assets/image-20230715215853599-920017cb.png",bn="/assets/1689426645451-50-2743e7db.png",yn="/assets/1689426645451-51-6681983b.png",fn="/assets/1689426645451-52-103a8a6d.png",hn="/assets/1689426645452-53-646c2247.png",_n="/assets/1689426645452-54-f088629b.png",xn="/assets/1689426645452-55-57d70610.png",wn="/assets/1689426645452-56-ded16a03.png",Sn={},Bn=a('<h1 id="day08-排行榜功能" tabindex="-1"><a class="header-anchor" href="#day08-排行榜功能" aria-hidden="true">#</a> day08-排行榜功能</h1><p>在昨天的学习中，我们实现了积分功能，并且也将用户的积分明细保存到了数据库。但是并没有形成排行榜。</p><p>那么排行榜该如何实现呢？</p><p>是不是简单的SQL查询就可以形成榜单呢？</p><p>今天我们就一起来分析一下。</p><h1 id="_1-实时排行榜" tabindex="-1"><a class="header-anchor" href="#_1-实时排行榜" aria-hidden="true">#</a> 1.实时排行榜</h1><p>榜单分为两类：</p><ul><li>实时榜单：也就是本赛季的榜单</li><li>历史榜单：也就是历史赛季的榜单</li></ul><p>本节我们先分析一下实现实时榜单功能。</p><h2 id="_1-1-思路分析" tabindex="-1"><a class="header-anchor" href="#_1-1-思路分析" aria-hidden="true">#</a> 1.1.思路分析</h2><p>目前，我们有一个积分记录明细表，结构如下：</p><figure><img src="'+l+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>一个用户可能产生很多条积分记录，数据结构大概像这样：</p><table><thead><tr><th style="text-align:center;"><strong>id</strong></th><th style="text-align:center;"><strong>userId</strong></th><th style="text-align:center;"><strong>type</strong></th><th style="text-align:center;"><strong>points</strong></th><th style="text-align:center;"><strong>c_time</strong></th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">9527</td><td style="text-align:center;">1</td><td style="text-align:center;">10</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">9528</td><td style="text-align:center;">4</td><td style="text-align:center;">3</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">9529</td><td style="text-align:center;">2</td><td style="text-align:center;">1</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">4</td><td style="text-align:center;">9528</td><td style="text-align:center;">2</td><td style="text-align:center;">7</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">5</td><td style="text-align:center;">9529</td><td style="text-align:center;">4</td><td style="text-align:center;">3</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">6</td><td style="text-align:center;">9528</td><td style="text-align:center;">2</td><td style="text-align:center;">1</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">7</td><td style="text-align:center;">9527</td><td style="text-align:center;">1</td><td style="text-align:center;">10</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">8</td><td style="text-align:center;">9529</td><td style="text-align:center;">4</td><td style="text-align:center;">3</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">9</td><td style="text-align:center;">9527</td><td style="text-align:center;">3</td><td style="text-align:center;">5</td><td style="text-align:center;"></td></tr></tbody></table><p>要想形成排行榜，我们在查询数据库时，需要先对用户分组，再对积分求和，最终按照积分和排序，Sql语句是这样：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> user_id<span class="token punctuation">,</span> <span class="token function">SUM</span><span class="token punctuation">(</span>points<span class="token punctuation">)</span> <span class="token keyword">FROM</span> points_record <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> user_id <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token function">SUM</span><span class="token punctuation">(</span>points<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要知道，每个用户都可能会有数十甚至上百条积分记录，当用户规模达到百万规模，可能产生的积分记录就是数以<strong>亿</strong>计。</p><p>要在每次查询排行榜时，在内存中对这么多数据做分组、求和、排序，对内存和CPU的占用会非常恐怖，不太靠谱。</p><p>那该怎么办呢？</p><p>在这里给大家介绍两种不同的实现思路：</p><ul><li>方案一：基于MySQL的离线排序</li><li>方案二：基于Redis的SortedSet</li></ul><p>首先说方案一：简单来说，就是将数据库中的数据查询出来，在内存中自己利用算法实现排序，而后将排序得到的榜单保存到数据库中。但由于这个排序比较复杂，我们无法实时更新排行榜，而是每隔几分钟计算一次排行榜。这种方案实现起来比较复杂，而且实时性较差。不过优点是不会一直占用系统资源。</p><p>再说方案二：Redis的SortedSet底层采用了跳表的数据结构，因此可以非常高效的实现排序功能，百万用户排序轻松搞定。而且每当用户积分发生变更时，我们可以实时更新Redis中的用户积分，而SortedSet也会实时更新排名。实现起来简单、高效，实时性也非常好。缺点就是需要一直占用Redis的内存，当用户量达到数千万万时，性能有一定的下降。</p><p>当系统用户量规模达到数千万，乃至数亿时，我们可以采用分治的思想，将用户数据按照积分范围划分为多个桶，例如：</p><p>0<sub>100分、101</sub>200分、201<sub>300分、301</sub>500分、501<sub>800分、801</sub>1200分、1201<sub>1500分、1501</sub>2000分</p><p>在Redis内为每个桶创建一个SortedSet类型的key，这样就可以将数据分散，减少单个KEY的数据规模了。而要计算排名时，只需要按照范围查询出用户积分所在的桶，再累加分值比他高的桶的用户数量即可。依然非常简单、高效。</p><p>综上，我们推荐基于Redis的SortedSet来实现排行榜功能。</p><p>SortedSet的常用命令，可以参考官网：</p>`,28),Pn={href:"https://redis.io/commands/?group=sorted-set",target:"_blank",rel:"noopener noreferrer"},Tn=a('<figure><img src="'+u+'" alt="image-20230715215102912" tabindex="0" loading="lazy"><figcaption>image-20230715215102912</figcaption></figure><h2 id="_1-2-生成实时榜单" tabindex="-1"><a class="header-anchor" href="#_1-2-生成实时榜单" aria-hidden="true">#</a> 1.2.生成实时榜单</h2><p>既然要使用Redis的SortedSet来实现排行榜，就需要在<strong>用户每次积分变更时，累加积分到Redis的SortedSet中</strong>。因此，我们要对之前的新增积分功能做简单改造，如图中绿色部分：</p><figure><img src="'+r+'" alt="image-20230715215123325" tabindex="0" loading="lazy"><figcaption>image-20230715215123325</figcaption></figure><p>在Redis中，使用SortedSet结构，<strong>以赛季的日期为key，以用户id为member，以积分和为score. 每当用户新增积分，就累加到score中</strong>，SortedSet排名就会实时更新。这样一个实时的当前赛季榜单就出现了。</p><h3 id="_1-2-1-定义redis的key前缀" tabindex="-1"><a class="header-anchor" href="#_1-2-1-定义redis的key前缀" aria-hidden="true">#</a> 1.2.1.定义Redis的KEY前缀</h3><p>在<code>tj-learning</code>的<code>RedisConstants</code>中定义一个新的KEY前缀：</p><figure><img src="'+k+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>注意，KEY的后缀是时间戳，我们最好定义一个<code>DateTimeFormatter</code>，方便后期使用。因此，我们需要修改<code>tj-commom</code>中的<code>DateUtils</code>，添加一个<code>DateTimeFormatter</code>的常量：</p><figure><img src="'+d+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_1-2-2-更新积分到redis" tabindex="-1"><a class="header-anchor" href="#_1-2-2-更新积分到redis" aria-hidden="true">#</a> 1.2.2.更新积分到Redis</h3><p>接下来，我们改造tj-learning中的<code>com.tianji.learning.service.impl.PointsRecordServiceImpl</code>，首先注入<code>StringRedisTemplate</code>：</p><figure><img src="'+m+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>然后，改造其中的<code>addPointsRecord</code>方法，添加积分到Redis中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addPointsRecord</span><span class="token punctuation">(</span><span class="token class-name">Long</span> userId<span class="token punctuation">,</span> <span class="token keyword">int</span> points<span class="token punctuation">,</span> <span class="token class-name">PointsRecordType</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">LocalDateTime</span> now <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> maxPoints <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">getMaxPoints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 1.判断当前方式有没有积分上限</span>
    <span class="token keyword">int</span> realPoints <span class="token operator">=</span> points<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>maxPoints <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 2.有，则需要判断是否超过上限</span>
        <span class="token class-name">LocalDateTime</span> begin <span class="token operator">=</span> <span class="token class-name">DateUtils</span><span class="token punctuation">.</span><span class="token function">getDayStartTime</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">LocalDateTime</span> end <span class="token operator">=</span> <span class="token class-name">DateUtils</span><span class="token punctuation">.</span><span class="token function">getDayEndTime</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2.1.查询今日已得积分</span>
        <span class="token keyword">int</span> currentPoints <span class="token operator">=</span> <span class="token function">queryUserPointsByTypeAndDate</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> type<span class="token punctuation">,</span> begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2.2.判断是否超过上限</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>currentPoints <span class="token operator">&gt;=</span> maxPoints<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 2.3.超过，直接结束</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 2.4.没超过，保存积分记录</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>currentPoints <span class="token operator">+</span> points <span class="token operator">&gt;</span> maxPoints<span class="token punctuation">)</span><span class="token punctuation">{</span>
            realPoints <span class="token operator">=</span> maxPoints <span class="token operator">-</span> currentPoints<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 3.没有，直接保存积分记录</span>
    <span class="token class-name">PointsRecord</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PointsRecord</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p<span class="token punctuation">.</span><span class="token function">setPoints</span><span class="token punctuation">(</span>realPoints<span class="token punctuation">)</span><span class="token punctuation">;</span>
    p<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    p<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">save</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 4.更新总积分到Redis</span>
    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token class-name">RedisConstants</span><span class="token punctuation">.</span><span class="token constant">POINTS_BOARD_KEY_PREFIX</span> <span class="token operator">+</span> now<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">DateUtils</span><span class="token punctuation">.</span><span class="token constant">POINTS_BOARD_SUFFIX_FORMATTER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">incrementScore</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> userId<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> realPoints<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-3-查询积分榜" tabindex="-1"><a class="header-anchor" href="#_1-3-查询积分榜" aria-hidden="true">#</a> 1.3.查询积分榜</h2><p>在个人中心，学生可以查看指定赛季积分排行榜（只显示前100 ），还可以查看自己总积分和排名。而且排行榜分为本赛季榜单和历史赛季榜单。</p><p>我们可以在一个接口中同时实现这两类榜单的查询。</p><h3 id="_1-3-1-分析和设计接口" tabindex="-1"><a class="header-anchor" href="#_1-3-1-分析和设计接口" aria-hidden="true">#</a> 1.3.1.分析和设计接口</h3><p>首先，我们来看一下页面原型（这里我给出的是原型对应的设计稿，也就是最终前端设计的页面效果）：</p><figure><img src="`+v+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>首先我们分析一下请求参数：</p><ul><li>榜单数据非常多，不可能一次性查询出来，因此这里一定是分页查询（滚动分页），需要分页参数。</li><li>由于要查询历史榜单需要知道赛季，因此参数中需要指定赛季id。当赛季id为空，我们认定是查询当前赛季。这样就可以把两个接口合二为一。</li></ul><p>然后是返回值，无论是历史榜单还是当前榜单，结构都一样。分为两部分：</p><ul><li>当前用户的积分和排名。当前用户不一定上榜，因此需要单独查询</li><li>榜单数据。就是N个用户的积分、排名形成的集合。</li></ul><p>综上，接口信息如下：</p><figure><img src="'+g+'" alt="image-20230715215206171" tabindex="0" loading="lazy"><figcaption>image-20230715215206171</figcaption></figure><h3 id="_1-3-2-实体类" tabindex="-1"><a class="header-anchor" href="#_1-3-2-实体类" aria-hidden="true">#</a> 1.3.2.实体类</h3><p>查询积分排行榜接口中包括3个实体：</p><ul><li>查询条件QUERY实体</li><li>分页返回结果VO实体</li><li>分页中每一条数据的VO实体</li></ul><p>这些在课前资料中都提供好了。</p><p>首先是QUERY实体：</p><figure><img src="'+b+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>然后是分页VO实体、分页条目VO实体：</p><figure><img src="'+y+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_1-3-3-实现接口" tabindex="-1"><a class="header-anchor" href="#_1-3-3-实现接口" aria-hidden="true">#</a> 1.3.3.实现接口</h3><p>首先，在<code>tj-learning</code>的<code>com.tianji.learning.controller.PointsBoardController</code>中定义接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">BeanUtils</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">CollUtils</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>po<span class="token punctuation">.</span></span><span class="token class-name">PointsBoardSeason</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">PointsBoardQuery</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">PointsBoardVO</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">IPointsBoardService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Api</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">ApiOperation</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">RequiredArgsConstructor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDateTime</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
 * 学霸天梯榜 控制器
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
 */</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequiredArgsConstructor</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/boards&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags <span class="token operator">=</span> <span class="token string">&quot;积分相关接口&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PointsBoardController</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">IPointsBoardService</span> pointsBoardService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span>
    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">&quot;分页查询指定赛季的积分排行榜&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">PointsBoardVO</span> <span class="token function">queryPointsBoardBySeason</span><span class="token punctuation">(</span><span class="token class-name">PointsBoardQuery</span> query<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> pointsBoardService<span class="token punctuation">.</span><span class="token function">queryPointsBoardBySeason</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，在<code>com.tianji.learning.service.IPointsBoardService</code>中定义service方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">IService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>po<span class="token punctuation">.</span></span><span class="token class-name">PointsBoard</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">PointsBoardQuery</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">PointsBoardVO</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
 * 学霸天梯榜 服务类
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPointsBoardService</span> <span class="token keyword">extends</span> <span class="token class-name">IService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PointsBoard</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">PointsBoardVO</span> <span class="token function">queryPointsBoardBySeason</span><span class="token punctuation">(</span><span class="token class-name">PointsBoardQuery</span> query<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，在<code>com.tianji.learning.service.impl.PointsBoardServiceImpl</code>中实现方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>pagination<span class="token punctuation">.</span></span><span class="token class-name">Page</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span><span class="token class-name">ServiceImpl</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>api<span class="token punctuation">.</span>client<span class="token punctuation">.</span>user<span class="token punctuation">.</span></span><span class="token class-name">UserClient</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>api<span class="token punctuation">.</span>dto<span class="token punctuation">.</span>user<span class="token punctuation">.</span></span><span class="token class-name">UserDTO</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">CollUtils</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">DateUtils</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">UserContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>constants<span class="token punctuation">.</span></span><span class="token class-name">RedisConstants</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>po<span class="token punctuation">.</span></span><span class="token class-name">PointsBoard</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">PointsBoardQuery</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">PointsBoardItemVO</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">PointsBoardVO</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">PointsBoardMapper</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">IPointsBoardService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">TableInfoContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">RequiredArgsConstructor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">BoundZSetOperations</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">StringRedisTemplate</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">ZSetOperations</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDateTime</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">Collectors</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>constants<span class="token punctuation">.</span></span><span class="token class-name">LearningConstants</span><span class="token punctuation">.</span><span class="token static">POINTS_BOARD_TABLE_PREFIX</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
 * 学霸天梯榜 服务实现类
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
 *
 * <span class="token keyword">@author</span> 虎哥
 */</span>
<span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@RequiredArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PointsBoardServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PointsBoardMapper</span><span class="token punctuation">,</span> <span class="token class-name">PointsBoard</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">IPointsBoardService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">StringRedisTemplate</span> redisTemplate<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">UserClient</span> userClient<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">PointsBoardVO</span> <span class="token function">queryPointsBoardBySeason</span><span class="token punctuation">(</span><span class="token class-name">PointsBoardQuery</span> query<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1.判断是否是查询当前赛季</span>
        <span class="token class-name">Long</span> season <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">getSeason</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> isCurrent <span class="token operator">=</span> season <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> season <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">// 2.获取Redis的Key</span>
        <span class="token class-name">LocalDateTime</span> now <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token class-name">RedisConstants</span><span class="token punctuation">.</span><span class="token constant">POINTS_BOARD_KEY_PREFIX</span> <span class="token operator">+</span> now<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">DateUtils</span><span class="token punctuation">.</span><span class="token constant">POINTS_BOARD_SUFFIX_FORMATTER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2.查询我的积分和排名</span>
        <span class="token class-name">PointsBoard</span> myBoard <span class="token operator">=</span> isCurrent <span class="token operator">?</span>
                <span class="token function">queryMyCurrentBoard</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token comment">// 查询当前榜单（Redis）</span>
                <span class="token function">queryMyHistoryBoard</span><span class="token punctuation">(</span>season<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 查询历史榜单（MySQL）</span>
        <span class="token comment">// 3.查询榜单列表</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PointsBoard</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> isCurrent <span class="token operator">?</span>
                <span class="token function">queryCurrentBoardList</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> query<span class="token punctuation">.</span><span class="token function">getPageNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> query<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span>
                <span class="token function">queryHistoryBoardList</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 4.封装VO</span>
        <span class="token class-name">PointsBoardVO</span> vo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PointsBoardVO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 4.1.处理我的信息</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>myBoard <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            vo<span class="token punctuation">.</span><span class="token function">setPoints</span><span class="token punctuation">(</span>myBoard<span class="token punctuation">.</span><span class="token function">getPoints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            vo<span class="token punctuation">.</span><span class="token function">setRank</span><span class="token punctuation">(</span>myBoard<span class="token punctuation">.</span><span class="token function">getRank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> vo<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 4.2.查询用户信息</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> uIds <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">PointsBoard</span><span class="token operator">::</span><span class="token function">getUserId</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserDTO</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> userClient<span class="token punctuation">.</span><span class="token function">queryUserByIds</span><span class="token punctuation">(</span>uIds<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> userMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>uIds<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">CollUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            userMap <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">UserDTO</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> <span class="token class-name">UserDTO</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 4.3.转换VO</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PointsBoardItemVO</span><span class="token punctuation">&gt;</span></span> items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">PointsBoard</span> p <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">PointsBoardItemVO</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PointsBoardItemVO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            v<span class="token punctuation">.</span><span class="token function">setPoints</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getPoints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            v<span class="token punctuation">.</span><span class="token function">setRank</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getRank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            v<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>userMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            items<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        vo<span class="token punctuation">.</span><span class="token function">setBoardList</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> vo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PointsBoard</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryHistoryBoardList</span><span class="token punctuation">(</span><span class="token class-name">PointsBoardQuery</span> query<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// TODO</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PointsBoard</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryCurrentBoardList</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Integer</span> pageNo<span class="token punctuation">,</span> <span class="token class-name">Integer</span> pageSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1.计算分页</span>
        <span class="token keyword">int</span> from <span class="token operator">=</span> <span class="token punctuation">(</span>pageNo <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> pageSize<span class="token punctuation">;</span>
        <span class="token comment">// 2.查询</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ZSetOperations<span class="token punctuation">.</span>TypedTuple</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> tuples <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">reverseRangeWithScores</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> from<span class="token punctuation">,</span> from <span class="token operator">+</span> pageSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>tuples<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">CollUtils</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 3.封装</span>
        <span class="token keyword">int</span> rank <span class="token operator">=</span> from <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PointsBoard</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>tuples<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ZSetOperations<span class="token punctuation">.</span>TypedTuple</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> tuple <span class="token operator">:</span> tuples<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> userId <span class="token operator">=</span> tuple<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Double</span> points <span class="token operator">=</span> tuple<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>userId <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> points <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">PointsBoard</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PointsBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            p<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            p<span class="token punctuation">.</span><span class="token function">setPoints</span><span class="token punctuation">(</span>points<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            p<span class="token punctuation">.</span><span class="token function">setRank</span><span class="token punctuation">(</span>rank<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> list<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">PointsBoard</span> <span class="token function">queryMyHistoryBoard</span><span class="token punctuation">(</span><span class="token class-name">Long</span> season<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// TODO</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">PointsBoard</span> <span class="token function">queryMyCurrentBoard</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1.绑定key</span>
        <span class="token class-name">BoundZSetOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> ops <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">boundZSetOps</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2.获取当前用户信息</span>
        <span class="token class-name">String</span> userId <span class="token operator">=</span> <span class="token class-name">UserContext</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 3.查询积分</span>
        <span class="token class-name">Double</span> points <span class="token operator">=</span> ops<span class="token punctuation">.</span><span class="token function">score</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 4.查询排名</span>
        <span class="token class-name">Long</span> rank <span class="token operator">=</span> ops<span class="token punctuation">.</span><span class="token function">reverseRank</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 5.封装返回</span>
        <span class="token class-name">PointsBoard</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PointsBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        p<span class="token punctuation">.</span><span class="token function">setPoints</span><span class="token punctuation">(</span>points <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> points<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        p<span class="token punctuation">.</span><span class="token function">setRank</span><span class="token punctuation">(</span>rank <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> rank<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> p<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_2-历史排行榜" tabindex="-1"><a class="header-anchor" href="#_2-历史排行榜" aria-hidden="true">#</a> 2.历史排行榜</h1><p>在天机学堂项目中，积分排行榜是分赛季的，每一个月是一个赛季。因此每到每个月的月初，就会进入一个新的赛季。所有用户的积分应该清零，重新累积。</p><p>但是，我们能把Redis中的榜单数据直接清空吗？显然不行！Redis中的榜单数据是上个月的数据，属于历史榜单了，直接清空就丢失了一个赛季的数据。</p><p>因此，我们必须将Redis中的历史数据持久化到数据库中，然后再清零。如图：</p><figure><img src="`+f+'" alt="image-20230715215243355" tabindex="0" loading="lazy"><figcaption>image-20230715215243355</figcaption></figure><p>不过，这里就有一个问题需要解决：</p><p>假如有数百万用户，这就意味着每个赛季榜单都有数百万数据。随着时间推移，历史赛季越来越多，如果全部保存到一张表中，数据量会非常恐怖！</p><p>该怎么办呢？</p><h2 id="_2-1-海量数据存储策略" tabindex="-1"><a class="header-anchor" href="#_2-1-海量数据存储策略" aria-hidden="true">#</a> 2.1.海量数据存储策略</h2><p>对于数据库的海量数据存储，方案有很多，常见的有：</p><figure><img src="'+h+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_2-1-1-分区" tabindex="-1"><a class="header-anchor" href="#_2-1-1-分区" aria-hidden="true">#</a> 2.1.1.分区</h3><p>**表分区（Partition）**是一种数据存储方案，可以解决单表数据较多的问题。MySQL5.1开始支持表分区功能。</p><p>数据库的表最终肯定是保存在磁盘中，对于InoDB引擎，一张表的数据在磁盘上对应一个ibd文件。如图，我们的积分榜单表对应的文件：</p><figure><img src="'+_+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>如果表数据过多，就会导致文件体积非常大。文件就会跨越多个磁盘分区，数据检索时的速度就会非常慢。</p><p>为了解决这个问题，MySQL在5.1版本引入表分区功能。简单来说，就是按照某种规则，把表数据对应的ibd文件拆分成多个文件来存储。从物理上来看，一张表的数据被拆到多个表文件存储了；从逻辑上来看，他们对外表现是一张表。</p><p>例如，我们的历史榜单数据，可以按照赛季切分：</p><figure><img src="'+x+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>此时，赛季榜单表的磁盘文件就被分成了两个文件。但逻辑上还是一张表。增删改查的方式不会有什么变化，只不过底层MySQL底层的处理上会有变更。例如检索时可以只检索某个文件，而不是全部。</p><p>这样做有几个好处：</p><ul><li>可以存储更多的数据，突破单表上限。甚至可以存储到不同磁盘，突破磁盘上限</li><li>查询时可以根据规则只检索某一个文件，提高查询效率</li><li>数据统计时，可以多文件并行统计，最后汇总结果，提高统计效率</li><li>对于一些历史数据，如果不需要时，可以直接删除分区文件，提高删除效率</li></ul><p>表分区的本质是对数据的<strong>水平拆分</strong>，而拆分的方式也有多种，常见的有：</p><ul><li>Range分区：按照指定字段的取值范围分区</li><li>List分区：按照指定字段的枚举值分区，必须提前指定好所有的分区值，如果数据找不到分区会报错</li><li>Hash分区：基于字段做hash运算后分区，一般做hash运算的字段都是数值类型</li><li>Key分区：根据指定字段的值做运算的结果分区，与hash分区类似，但不限定字段类型</li></ul><p>对于赛季榜单来说，最合适的分区方式是基于赛季值分区，我们希望同一个赛季放到一个分区。这就只能使用List分区，而List分区却需要枚举出所有可能的分区值。但是赛季分区id是无限的，无法全部枚举，所以就非常尴尬。</p><p>MySQL的表分区详细信息可参考下面的文档：</p>',68),jn={href:"https://www.cnblogs.com/wenxuehai/p/15901779.html",target:"_blank",rel:"noopener noreferrer"},In=a('<figure><img src="'+w+'" alt="image-20230715215318258" tabindex="0" loading="lazy"><figcaption>image-20230715215318258</figcaption></figure><h3 id="_2-1-2-分表" tabindex="-1"><a class="header-anchor" href="#_2-1-2-分表" aria-hidden="true">#</a> 2.1.2.分表</h3><p><strong>分表</strong>是一种表设计方案，由开发者在创建表时按照自己的业务需求拆分表。也就是说这是开发者自己对表的处理，与数据库无关。</p><p>而且，一旦做了分表，无论是逻辑上，还是物理上，就从一张表变成了多张表！增删改查的方式就发生了变化，必须自己考虑要去哪张表做数据处理。</p><p>分区则在逻辑上是同一张表，增删改查与以前没有区别。这就是分区和分表最大的一种区别。</p><h4 id="_2-1-2-1-水平分表" tabindex="-1"><a class="header-anchor" href="#_2-1-2-1-水平分表" aria-hidden="true">#</a> 2.1.2.1.水平分表</h4><p>例如，对于赛季榜单，我们可以按照赛季拆分为多张表，<strong>每一个赛季一张新的表</strong>。如图：</p><figure><img src="'+S+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这种方式就是水平分表，<strong>表结构不变</strong>，仅仅是每张表<strong>数据不同</strong>。查询赛季1，就找第一张表。查询赛季2，就找第二张表。</p><p>由于分表是开发者的行为，因此拆分方式更加灵活。除了水平分表，也可以做<strong>垂直分表</strong>。</p><h4 id="_2-1-2-2-垂直分表" tabindex="-1"><a class="header-anchor" href="#_2-1-2-2-垂直分表" aria-hidden="true">#</a> 2.1.2.2.垂直分表</h4><p>什么是垂直分表呢？</p><p>如果一张表的字段非常多，比如达到30个以上，这样的表我们称为<strong>宽表</strong>。宽表由于字段太多，单行数据体积就会非常大，虽然数据不多，但可能表体积也会非常大！从而影响查询效率。</p><p>例如一个用户信息表，除了用户基本信息，还包含很多其它功能信息：</p><figure><img src="'+B+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这个时候，我们就可以把其中的一些不常用字段拆分出去。一张表中包含登录常用字段，另一张表包含其它字段：</p><figure><img src="'+P+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这个时候一张表就变成了两张表。而且两张表的<strong>结构不同</strong>，<strong>数据也不同</strong>。这种按照字段拆分表的方式，称为<strong>垂直拆分</strong>。</p><h4 id="_2-1-2-3-优缺点" tabindex="-1"><a class="header-anchor" href="#_2-1-2-3-优缺点" aria-hidden="true">#</a> 2.1.2.3.优缺点</h4><p>分表方案与分区方案相比有一些优点：</p><ul><li>拆分方式更加灵活</li><li>而且可以解决单表字段过多的问题</li></ul><p>但是也有一些确定：</p><ul><li>增删改查时，需要自己判断访问哪张表</li><li>垂直拆分还会导致事务问题及数据关联问题：原本一张表的操作，变为多张表操作。</li></ul><p>不过，在开发中我们很多情况下业务需求复杂，更看重分表的灵活性。因此，我们大多数情况下都会选择分表方案。</p><h3 id="_2-1-3-分库和集群" tabindex="-1"><a class="header-anchor" href="#_2-1-3-分库和集群" aria-hidden="true">#</a> 2.1.3.分库和集群</h3><p>无论是分区，还是分表，我们刚才的分析都是建立在单个数据库的基础上。但是单个数据库也存在一些问题：</p><ul><li>单点故障问题：数据库发生故障，整个系统就会瘫痪</li><li>单库的性能瓶颈问题：单库受服务器限制，其网络带宽、CPU、连接数都有瓶颈</li><li>单库的存储瓶颈问题：单库的磁盘空间有上限，如果磁盘过大，数据检索的速度又会变慢</li></ul><p>综上，在大型系统中，我们除了要做分表、还需要对数据做分库，建立综合集群。</p><p>首先，在微服务项目中，我们会按照项目模块，每个微服务使用独立的数据库，因此每个库的表是不同的，这种分库模式成为<strong>垂直分库</strong>。</p><p>而为了保证单节点的高可用性，我们会给数据库建立主从集群，主节点向从节点同步数据。两者结构一样，可以看做是<strong>水平扩展</strong>。</p><p>这个时候就会出现垂直分库、水平扩展的综合集群，如图：</p><figure><img src="'+T+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这种模式的优缺点：</p><p>优点：</p><ul><li>解决了海量数据存储问题，突破了单机存储瓶颈</li><li>提高了并发能力，突破了单机性能瓶颈</li><li>避免了单点故障</li></ul><p>缺点：</p><ul><li>成本非常高</li><li>数据聚合统计比较麻烦</li><li>主从同步的一致性问题</li><li>分布式事务问题</li></ul><h2 id="_2-2-历史榜单的存储策略" tabindex="-1"><a class="header-anchor" href="#_2-2-历史榜单的存储策略" aria-hidden="true">#</a> 2.2.历史榜单的存储策略</h2><p>天机学堂项目是一个教育类项目，用户规模并不会很高，一般在十多万到百万级别。因此最终的数据规模也并不会非常庞大。</p><p>综合之前的分析，结合天机学堂的项目情况，我们可以对榜单数据做分表，但是暂时不需要做分库和集群。</p><p>由于我们要解决的是数据过多问题，因此分表的方式选择<strong>水平分表</strong>。具体来说，就是按照赛季拆分，每一个赛季是一个独立的表，如图：</p><figure><img src="'+j+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>不过这里我们可以做一些简化：</p><ul><li>我们可以将id采用自增id，那么id就是排名，排名字段就不需要了。</li><li>不同赛季用不同表，那么赛季字段就不需要了。</li></ul><p>综上，最终表结构可以是这样：</p><figure><img src="'+I+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>不过这就存在一个问题，每个赛季要有不同的表，这些表什么时候创建呢？</p><p>显然，应该在每个赛季刚开始的时候（月初）来创建新的赛季榜单表。每个月的月初执行一个创建表的任务，我们可以利用定时任务来实现。</p><p>由于表的名称中包含赛季id，因此在定时任务中我们还要先查询赛季信息，获取赛季id，拼接得到表名，最后创建表。</p><p>大概流程如图：</p><figure><img src="'+R+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>表结构如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>points_board_X<span class="token punctuation">`</span></span>\n <span class="token punctuation">(</span>\n    <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span>      <span class="token keyword">BIGINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;榜单id&#39;</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>user_id<span class="token punctuation">`</span></span> <span class="token keyword">BIGINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;学生id&#39;</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>points<span class="token punctuation">`</span></span>  <span class="token keyword">INT</span>    <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;积分值&#39;</span><span class="token punctuation">,</span>\n    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">,</span>\n    <span class="token keyword">INDEX</span> <span class="token identifier"><span class="token punctuation">`</span>idx_user_id<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>user_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span>\n <span class="token punctuation">)</span>\n    <span class="token keyword">COMMENT</span> <span class="token operator">=</span><span class="token string">&#39;学霸天梯榜&#39;</span>\n    <span class="token keyword">COLLATE</span> <span class="token operator">=</span> <span class="token string">&#39;utf8mb4_0900_ai_ci&#39;</span>\n    <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span>\n    ROW_FORMAT <span class="token operator">=</span> DYNAMIC\n <span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>表名称的前缀是<code>points_board_</code>，我们应该将其定义为常量。在<code>tj-learning</code>模块中定义：</p><figure><img src="'+L+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>同时，表中的字段少了2个（rank、season），因此我们需要修改对应的实体类：</p><figure><img src="'+O+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_2-3-定时任务生成榜单表" tabindex="-1"><a class="header-anchor" href="#_2-3-定时任务生成榜单表" aria-hidden="true">#</a> 2.3.定时任务生成榜单表</h2><p>接下来，我们通过SpringTask定义一个定时任务，在每月初动态生成赛季榜单表。</p><h3 id="_2-3-1-定时任务" tabindex="-1"><a class="header-anchor" href="#_2-3-1-定时任务" aria-hidden="true">#</a> 2.3.1.定时任务</h3><p>首先，在<code>tj-learning</code>模块下定义一个任务处理类：</p><figure><img src="'+N+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>handler</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">CollUtils</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">DateUtils</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">IPointsBoardSeasonService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">IPointsBoardService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">RequiredArgsConstructor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDateTime</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>constants<span class="token punctuation">.</span></span><span class="token class-name">LearningConstants</span><span class="token punctuation">.</span><span class="token static">POINTS_BOARD_TABLE_PREFIX</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@RequiredArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PointsBoardPersistentHandler</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">IPointsBoardSeasonService</span> seasonService<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">IPointsBoardService</span> pointsBoardService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">&quot;0 0 3 1 * ?&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 每月1号，凌晨3点执行</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createPointsBoardTableOfLastSeason</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 1.获取上月时间</span>
        <span class="token class-name">LocalDateTime</span> time <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minusMonths</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2.查询赛季id</span>
        <span class="token class-name">Integer</span> season <span class="token operator">=</span> seasonService<span class="token punctuation">.</span><span class="token function">querySeasonByTime</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>season <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 赛季不存在</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 3.创建表</span>
        pointsBoardService<span class="token punctuation">.</span><span class="token function">createPointsBoardTableBySeason</span><span class="token punctuation">(</span>season<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里调用了两个service的方法，一个是查询赛季，一个是创建表。</p><h3 id="_2-3-2-查询赛季id" tabindex="-1"><a class="header-anchor" href="#_2-3-2-查询赛季id" aria-hidden="true">#</a> 2.3.2.查询赛季id</h3><p>首先，我们在<code>tj-learning</code>模块的<code>com.tianji.learning.service.IPointsBoardSeasonService</code>中定义查询赛季的方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">IService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>po<span class="token punctuation">.</span></span><span class="token class-name">PointsBoardSeason</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDateTime</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
 *  服务类
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPointsBoardSeasonService</span> <span class="token keyword">extends</span> <span class="token class-name">IService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PointsBoardSeason</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token class-name">Integer</span> <span class="token function">querySeasonByTime</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在<code>com.tianji.learning.service.impl.PointsBoardSeasonServiceImpl</code>中实现该方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span><span class="token class-name">ServiceImpl</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>po<span class="token punctuation">.</span></span><span class="token class-name">PointsBoardSeason</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">PointsBoardSeasonMapper</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">IPointsBoardSeasonService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDateTime</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Optional</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
 *  服务实现类
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
 */</span>
<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PointsBoardSeasonServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PointsBoardSeasonMapper</span><span class="token punctuation">,</span> <span class="token class-name">PointsBoardSeason</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">IPointsBoardSeasonService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">querySeasonByTime</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PointsBoardSeason</span><span class="token punctuation">&gt;</span></span> optional <span class="token operator">=</span> <span class="token function">lambdaQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">le</span><span class="token punctuation">(</span><span class="token class-name">PointsBoardSeason</span><span class="token operator">::</span><span class="token function">getBeginTime</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">ge</span><span class="token punctuation">(</span><span class="token class-name">PointsBoardSeason</span><span class="token operator">::</span><span class="token function">getEndTime</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">oneOpt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> optional<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">PointsBoardSeason</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-3-创建表" tabindex="-1"><a class="header-anchor" href="#_2-3-3-创建表" aria-hidden="true">#</a> 2.3.3.创建表</h3><p>在<code>tj-learning</code>模块的<code>com.tianji.learning.service.IPointsBoardService</code>中定义创建表的方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">IService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>po<span class="token punctuation">.</span></span><span class="token class-name">PointsBoard</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">PointsBoardQuery</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">PointsBoardVO</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
 * 学霸天梯榜 服务类
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPointsBoardService</span> <span class="token keyword">extends</span> <span class="token class-name">IService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PointsBoard</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">PointsBoardVO</span> <span class="token function">queryPointsBoardBySeason</span><span class="token punctuation">(</span><span class="token class-name">PointsBoardQuery</span> query<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">createPointsBoardTableBySeason</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> season<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在<code>com.tianji.learning.service.impl.PointsBoardServiceImpl</code>中实现该方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createPointsBoardTableBySeason</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> season<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">getBaseMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createPointsBoardTable</span><span class="token punctuation">(</span><span class="token constant">POINTS_BOARD_TABLE_PREFIX</span> <span class="token operator">+</span> season<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的建表语句肯定是自定义SQL，需要现在在<code>com.tianji.learning.mapper.PointsBoardMapper</code>中定义出方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">BaseMapper</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>po<span class="token punctuation">.</span></span><span class="token class-name">PointsBoard</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Param</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
 * 学霸天梯榜 Mapper 接口
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PointsBoardMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PointsBoard</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">void</span> <span class="token function">createPointsBoardTable</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;tableName&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> tableName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在<code>tj-learning</code>模块的<code>src/resources/mapper/PointsBoardMapper.xml</code>中编写SQL：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span> <span class="token name">PUBLIC</span> <span class="token string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="token string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.tianji.learning.mapper.PointsBoardMapper<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>createPointsBoardTable<span class="token punctuation">&quot;</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>java.lang.String<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        CREATE TABLE \`\${tableName}\`
        (
            \`id\`      BIGINT NOT NULL AUTO_INCREMENT COMMENT &#39;榜单id&#39;,
            \`user_id\` BIGINT NOT NULL COMMENT &#39;学生id&#39;,
            \`points\`  INT    NOT NULL COMMENT &#39;积分值&#39;,
            PRIMARY KEY (\`id\`) USING BTREE,
            INDEX \`idx_user_id\` (\`user_id\`) USING BTREE
        )
            COMMENT =&#39;学霸天梯榜&#39;
            COLLATE = &#39;utf8mb4_0900_ai_ci&#39;
            ENGINE = InnoDB
            ROW_FORMAT = DYNAMIC
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-4-分布式任务调度" tabindex="-1"><a class="header-anchor" href="#_2-4-分布式任务调度" aria-hidden="true">#</a> 2.4.分布式任务调度</h2><p>目前，我们的定时任务都是基于SpringTask来实现的。但是SpringTask存在一些问题：</p><ul><li>当微服务多实例部署时，定时任务会被执行多次。而事实上我们只需要这个任务被执行一次即可。</li><li>我们除了要定时创建表，还要定时持久化Redis数据到数据库，我们希望这多个定时任务能够按照顺序依次执行，SpringTask无法控制任务顺序</li></ul><p>不仅仅是SpringTask，其它单机使用的定时任务工具，都无法实现像这种任务执行者的调度、任务执行顺序的编排、任务监控等功能。这些功能必须要用到分布式任务调度组件。</p><h3 id="_2-4-1-分布式任务调度原理" tabindex="-1"><a class="header-anchor" href="#_2-4-1-分布式任务调度原理" aria-hidden="true">#</a> 2.4.1.分布式任务调度原理</h3><p>那么分布式任务调度是如何实现任务调度和编排的呢？</p><p>我们先来看看普通定时任务的实现原理，一般定时任务中会有两个组件：</p><ul><li>任务：要执行的代码</li><li>任务触发器：基于定义好的规则触发任务</li></ul><p>因此在多实例部署的时候，每个启动的服务实例都会有自己的<strong>任务触发器</strong>，这样就会导致各个实例各自运行，无法统一控制：</p><figure><img src="`+E+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>那如果我们想要统一控制各个服务实例的任务执行和调度该怎么办？</p><p>大家应该能想到：就是要把任务触发器提取到各个服务实例之外，去做统一的触发、统一的调度。</p><p>事实上，大多数的分布式任务调度组件都是这样做的：</p><figure><img src="'+C+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这样一来，具体哪个任务该执行，什么时候执行，交给哪个应用实例来执行，全部都有统一的任务调度服务来统一控制。并且执行过程中的任务结果还可以通过回调接口返回，让我们方便的查看任务执行状态、执行日志。这样的服务就是<strong>分布式****调度服务</strong>了。</p><h3 id="_2-4-2-分布式任务调度技术对比" tabindex="-1"><a class="header-anchor" href="#_2-4-2-分布式任务调度技术对比" aria-hidden="true">#</a> 2.4.2.分布式任务调度技术对比</h3><p>能够实现分布式任务调度的技术有很多，常见的有：</p><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;"><strong>Quartz</strong></th><th style="text-align:center;"><strong>XXL-Job</strong></th><th style="text-align:center;"><strong>SchedulerX</strong></th><th style="text-align:center;"><strong>PowerJob</strong></th></tr></thead><tbody><tr><td style="text-align:center;"><strong>定时类型</strong></td><td style="text-align:center;">CRON</td><td style="text-align:center;">频率、间隔、CRON</td><td style="text-align:center;">频率、间隔、CRON、OpenAPI</td><td style="text-align:center;">频率、间隔、CRON、OpenAPI</td></tr><tr><td style="text-align:center;"><strong>任务类型</strong></td><td style="text-align:center;">Java</td><td style="text-align:center;">多语言脚本</td><td style="text-align:center;">多语言脚本</td><td style="text-align:center;">多语言脚本</td></tr><tr><td style="text-align:center;"><strong>任务调度方式</strong></td><td style="text-align:center;">随机</td><td style="text-align:center;">单机、分片</td><td style="text-align:center;">单机、广播、Map、MapReduce</td><td style="text-align:center;">单机、广播、分片、Map、MapReduce</td></tr><tr><td style="text-align:center;"><strong>管理控制台</strong></td><td style="text-align:center;">无</td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td></tr><tr><td style="text-align:center;"><strong>日志白屏</strong></td><td style="text-align:center;">无</td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td></tr><tr><td style="text-align:center;"><strong>报警监控</strong></td><td style="text-align:center;">无</td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td></tr><tr><td style="text-align:center;"><strong>工作流</strong></td><td style="text-align:center;">无</td><td style="text-align:center;">有限</td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td></tr></tbody></table><p>其中：</p><ul><li>Quartz由于功能相对比较落后，现在已经很少被使用了。</li><li>SchedulerX是阿里巴巴的云产品，收费。</li><li>PowerJob是阿里员工自己开源的一个组件，功能非常强大，不过目前市值占比还不高，还需要等待市场检验。</li><li>XXL-JOB：开源免费，功能虽然不如PowerJob，不过目前市场占比最高，稳定性有保证。</li></ul><p>我们课堂中会选择XXL-JOB这个组件，如果你们企业具备探索精神，而且需要一些分布式运算功能，推荐使用PowerJob。</p><h3 id="_2-4-3-xxl-job介绍" tabindex="-1"><a class="header-anchor" href="#_2-4-3-xxl-job介绍" aria-hidden="true">#</a> 2.4.3.XXL-JOB介绍</h3><p>官网地址：</p>',102),Rn={href:"https://www.xuxueli.com/xxl-job/",target:"_blank",rel:"noopener noreferrer"},Ln=a('<figure><img src="'+q+'" alt="image-20230715215435882" tabindex="0" loading="lazy"><figcaption>image-20230715215435882</figcaption></figure><p>XXL-JOB的运行原理和架构如图：</p><figure><img src="'+M+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>XXL-JOB分为两部分：</p><ul><li><strong>执行器</strong>：我们的服务引入一个XXL-JOB的依赖，就可以通过配置创建一个执行器。负责与XXL-JOB调度中心交互，执行本地任务。</li><li><strong>调度中心</strong>：一个独立服务，负责管理执行器、管理任务、任务执行的调度、任务结果和日志收集。</li></ul><h3 id="_2-4-4-xxl-job定时创建榜单表" tabindex="-1"><a class="header-anchor" href="#_2-4-4-xxl-job定时创建榜单表" aria-hidden="true">#</a> 2.4.4.XXL-JOB定时创建榜单表</h3><p>接下来，我们就来一个XXL-JOB的快速入门，顺便改造一下之前用SpringTask实现的定时创建榜单表的功能。</p><h4 id="_2-4-4-1-部署调度中心" tabindex="-1"><a class="header-anchor" href="#_2-4-4-1-部署调度中心" aria-hidden="true">#</a> 2.4.4.1.部署调度中心</h4>',8),On={href:"http://xxl-job.tianji.com",target:"_blank",rel:"noopener noreferrer"},Nn=a('<figure><img src="'+D+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>如果要自己部署，分为两步：</p><ul><li>运行初始化SQL，创建数据库表</li><li>利用Docker命令，创建并运行容器</li></ul><p>课前资料已经给出了脚本：</p><figure><img src="'+X+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>最终XXL-JOB的表结构如下：</p><figure><img src="'+A+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>说明：</p><div class="hint-container warning"><p class="hint-container-title">注意</p><ul><li>xxl_job_lock：任务调度锁表；</li><li>xxl_job_group：执行器信息表，维护任务执行器信息；</li><li>xxl_job_info：调度扩展信息表： 用于保存XXL-JOB调度任务的扩展信息，如任务分组、任务名、机器地址、执行器、执行入参和报警邮件等等；</li><li>xxl_job_log：调度日志表： 用于保存XXL-JOB任务调度的历史信息，如调度结果、执行结果、调度入参、调度机器和执行器等等；</li><li>xxl_job_log_report：调度日志报表：用户存储XXL-JOB任务调度日志的报表，调度中心报表功能页面会用到；</li><li>xxl_job_logglue：任务GLUE日志：用于保存GLUE更新历史，用于支持GLUE的版本回溯功能；</li><li>xxl_job_registry：执行器注册表，维护在线的执行器和调度中心机器地址信息；</li><li>xxl_job_user：系统用户表；</li></ul></div><h4 id="_2-4-4-2-微服务集成执行器" tabindex="-1"><a class="header-anchor" href="#_2-4-4-2-微服务集成执行器" aria-hidden="true">#</a> 2.4.4.2.微服务集成执行器</h4><p>首先需要在tj-learning服务引入依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--xxl-job--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.xuxueli<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>xxl-job-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后还需要配置执行器，下面是一个配置执行器的示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">XxlJobSpringExecutor</span> <span class="token function">xxlJobExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; xxl-job config init.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">XxlJobSpringExecutor</span> xxlJobSpringExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XxlJobSpringExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setAdminAddresses</span><span class="token punctuation">(</span>adminAddresses<span class="token punctuation">)</span><span class="token punctuation">;</span>
    xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setAppname</span><span class="token punctuation">(</span>appname<span class="token punctuation">)</span><span class="token punctuation">;</span>
    xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setIp</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>
    xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>
    xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setAccessToken</span><span class="token punctuation">(</span>accessToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
    xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setLogPath</span><span class="token punctuation">(</span>logPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setLogRetentionDays</span><span class="token punctuation">(</span>logRetentionDays<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> xxlJobSpringExecutor<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数说明：</p><ul><li>adminAddress：调度中心地址，天机学堂中就是填虚拟机地址</li><li>appname：微服务名称</li><li>ip和port：当前执行器的ip和端口，无需配置，自动获取</li><li>accessToken：访问令牌，在调度中心中配置令牌，所有执行器访问时都必须携带该令牌，否则无法访问。咱们项目的令牌已经配好，就是<code>tianji</code>。如果要修改，可以到虚拟机的<code>/usr/local/src/xxl-job/application.properties</code>文件中，修改<code>xxl.job.accessToken</code>属性，然后重启XXL-JOB即可。</li><li>logPath：任务运行日志的保存目录</li><li>logRetentionDays：日志最长保留时长</li></ul><p>但是呢，大家完全不需要自己配置调度器了，因为在天机学堂的tj-common模块已经实现了XXL-JOB的自动装配：</p><figure><img src="`+z+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>配置中的关键属性都已经在Nacos中共享了：</p><figure><img src="'+U+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="hint-container warning"><p class="hint-container-title">注意</p><p>所以，我们项目的微服务模块只要引入<code>了tj-common</code>，并且引入了XXL-JOB的依赖，就可以直接使用了。</p></div><h4 id="_2-4-4-3-定义任务" tabindex="-1"><a class="header-anchor" href="#_2-4-4-3-定义任务" aria-hidden="true">#</a> 2.4.4.3.定义任务</h4><p>接下来，把之前的SpringTask任务改成XXL-JOB的任务。</p><p>我们修改tj-learning模块下的<code>com.tianji.learning.handler.PointsBoardPersistentHandler</code>，将原本的<code>@Scheduled</code>注解替换为<code>@XXLJob</code>注解：</p><figure><img src="'+J+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>其中，<code>@XxlJob</code>注解中定义的就是当前<strong>任务的名称</strong>。</p><h4 id="_2-4-4-4-注册执行器" tabindex="-1"><a class="header-anchor" href="#_2-4-4-4-注册执行器" aria-hidden="true">#</a> 2.4.4.4.注册执行器</h4><p>接下来，重启<code>tj-learning</code>服务，登录XXL-JOB控制台，注册执行器。</p><figure><img src="'+F+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>在弹出的窗口中填写信息：</p><figure><img src="'+H+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>等待一段时间，会发现<code>learning-service</code>已经成功注册了：</p><figure><img src="'+V+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="_2-4-4-5-配置任务调度" tabindex="-1"><a class="header-anchor" href="#_2-4-4-5-配置任务调度" aria-hidden="true">#</a> 2.4.4.5.配置任务调度</h4><p>现在，执行器已经成功注册，任务也已经注册到调度中心。接下来，我们就可以来做任务调度了，也就是：</p><ul><li>分配任务什么时候执行</li><li>如果有多个执行器，应该由哪个执行器执行（路由策略）</li></ul><p>我们进入任务管理菜单，选中学习中心执行器，然后新增任务：</p><figure><img src="'+Q+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>在弹出表单中，填写任务调度信息：</p><figure><img src="'+Y+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>其中比较关键的几个配置：</p><ul><li>调度配置：也就是什么时候执行，一般选择cron表达式</li><li>任务配置：采用BEAN模式，指定JobHandler，这里指定的就是在项目中<code>@XxlJob</code>注解中的任务名称</li><li>路由策略：就是指如果有多个任务执行器，该由谁执行？这里支持的策略非常多： <ul><li><img src="'+K+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></li></ul></li></ul><p>路由策略说明：</p><ul><li>FIRST（第一个）：固定选择第一个执行器；</li><li>LAST（最后一个）：固定选择最后一个执行器；</li><li>ROUND（轮询）：在线的执行器按照轮询策略选择一个执行</li><li>RANDOM（随机）：随机选择在线的执行器；</li><li>CONSISTENT_HASH（一致性HASH）：每个任务按照Hash算法固定选择某一台执行器，且所有任务均匀散列在不同执行器上。</li><li>LEAST_FREQUENTLY_USED（最不经常使用）：使用频率最低的执行器优先被选举；</li><li>LEAST_RECENTLY_USED（最近最久未使用）：最久未使用的执行器优先被选举；</li><li>FAILOVER（故障转移）：按照顺序依次进行心跳检测，第一个心跳检测成功的执行器选定为目标执行器并发起调度；</li><li>BUSYOVER（忙碌转移）：按照顺序依次进行空闲检测，第一个空闲检测成功的执行器选定为目标执行器并发起调度；</li><li>SHARDING_BROADCAST(分片广播)：广播触发对应集群中所有执行器执行一次任务，同时系统自动传递分片参数；可根据分片参数开发分片任务</li></ul><h4 id="_2-4-4-6-执行一次" tabindex="-1"><a class="header-anchor" href="#_2-4-4-6-执行一次" aria-hidden="true">#</a> 2.4.4.6.执行一次</h4><p>当任务配置完成后，就会按照设置的调度策略，定期去执行了。不过，我们想要测试的话也可以手动执行一次任务。</p><p>在任务管理界面，点击要执行的任务后面的<code>操作</code>按钮，点击<code>执行一次</code>：</p><figure><img src="'+G+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>然后在弹出的窗口中，直接点保存即可执行：</p><figure><img src="'+Z+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>注意，如果是分片广播模式， 这里还可以填写一些任务参数。</p><p>然后在调度日志中，可以看到执行成功的日志信息：</p><figure><img src="'+W+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_2-4-榜单持久化" tabindex="-1"><a class="header-anchor" href="#_2-4-榜单持久化" aria-hidden="true">#</a> 2.4.榜单持久化</h2><p>榜单持久化的基本流程是这样的：</p><ul><li>创建表</li><li>持久化Redis数据到数据库</li><li>清理Redis数据</li></ul><p>现在，创建表的动作已经完成，接下来就轮到Redis数据的持久化了。持久化的步骤如下：</p><ul><li>读取Redis数据</li><li>判断数据是否存在 <ul><li>不存在，直接结束</li><li>存在，则继续</li></ul></li><li>保存数据到数据库</li></ul><p>不过，Redis的数据结构如图：</p><figure><img src="'+$+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>其KEY中包含一个上赛季对应的日期，因此要读取Redis数据，我们必须先得到上赛季的日期。</p><p>另外，我们采用了水平分表的策略，每一个赛季都是一个独立表。那么在写数据到数据库时，必须先知道表名称。</p><p>综上，最终持久化的业务流程如图：</p><figure><img src="'+nn+'" alt="image-20230715215636276" tabindex="0" loading="lazy"><figcaption>image-20230715215636276</figcaption></figure><h3 id="_2-4-1-动态表名" tabindex="-1"><a class="header-anchor" href="#_2-4-1-动态表名" aria-hidden="true">#</a> 2.4.1.动态表名</h3><p>持久化的流程中存在一个问题，我们的数据库持久化采用的是MybatisPlus来实现的。而MybatisPlus读取表名的方式是通过实体类上的<code>@Table</code>注解，而注解往往是写死的：</p><figure><img src="'+sn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>那我们该如何让MybatisPlus在执行的时候改变数据写入的表名称呢？</p><h4 id="_2-4-1-1-动态表名插件" tabindex="-1"><a class="header-anchor" href="#_2-4-1-1-动态表名插件" aria-hidden="true">#</a> 2.4.1.1.动态表名插件</h4><p>MybatisPlus中提供了一个动态表名的插件：</p>',70),En={href:"https://baomidou.com/pages/2a45ff/#dynamictablenameinnerinterceptor",target:"_blank",rel:"noopener noreferrer"},Cn=a('<figure><img src="'+an+'" alt="image-20230715215700210" tabindex="0" loading="lazy"><figcaption>image-20230715215700210</figcaption></figure><p>插件的部分源码如下：</p><figure><img src="'+tn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>可见表名称动态获取就是依赖于tableNameHandlerMapping中的具体的TableNameHandler，这个Map如图：</p><figure><img src="'+pn+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这个Map的key是旧的表名称，value是TableNameHandler，就是表的名称处理器，用于根据旧名称获取新名称。</p><p>TableNameHandler的源码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TableNameHandler</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 生成动态表名
     *
     * <span class="token keyword">@param</span> <span class="token parameter">sql</span>       当前执行 SQL
     * <span class="token keyword">@param</span> <span class="token parameter">tableName</span> 表名
     * <span class="token keyword">@return</span> String
     */</span>
    <span class="token class-name">String</span> <span class="token function">dynamicTableName</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token class-name">String</span> tableName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>OK，因此我们要做的事情就很简单了，定义<code>DynamicTableNameInnterInterceptor</code>，向其中添加一个<code>TableNameHandler</code>，将<code>points_board</code>这个表名，替换为<code>points_board_赛季id</code>的名称。</p><p>不过，新的问题来了，这个插件中的TableNameHandler该如何获取赛季对应的表名称呢？</p><p>计算表名的方式是获取获取上赛季时间，查询数据库中上赛季信息，得到上赛季id。然后拼接得到表名。</p><p>当我们批量的写数据到数据库时，<strong>如果每次插入都计算一次表名，那性能也太差了</strong>。因此，我们肯定是希望一次计算，在TableNameHandler中可以随时获取。</p><p>那么该如何实现呢？</p><h4 id="_2-4-1-2-传递表名" tabindex="-1"><a class="header-anchor" href="#_2-4-1-2-传递表名" aria-hidden="true">#</a> 2.4.1.2.传递表名</h4><p>我们先回顾一下整体业务流程：</p><figure><img src="`+en+'" alt="image-20230715215715456" tabindex="0" loading="lazy"><figcaption>image-20230715215715456</figcaption></figure><p>流程中，我们会先计算表名，然后去执行持久化，而动态表名插件就会生效，去替换表名。</p><p>因此，一旦我们计算完表名，以某种方式传递给插件中的TableNameHandler，那么就无需重复计算表名了。</p><p>不过，问题来了：要知道动态表名称插件，以及TableNameHandler，都是由MybatisPlus内部调用的。我们无法传递参数。</p><p>那么该如何传递表名称呢？</p><p>虽然无法传参，但是从计算表名，到动态表名插件执行，调用TableNameHandler，都是在一个线程内完成的。要在一个线程内实现数据共享，该用什么呢？</p><p>大家应该很容易想到，就是ThreadLocal.</p><p>我们可以在定时任务中计算完动态表名后，将表名存入ThreadLocal，然后在插件中从ThreadLocal中读取即可：</p><figure><img src="'+on+'" alt="image-20230715215737198" tabindex="0" loading="lazy"><figcaption>image-20230715215737198</figcaption></figure><p>我们在<code>tj-learning</code>的<code>com.tianji.learning.utils</code>包下定义一个传递表名称的工具：</p><figure><img src="'+cn+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>具体代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TableInfoContext</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token constant">TL</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span> info<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token constant">TL</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">TL</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token constant">TL</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在<code>tj-learning</code>模块下定义一个配置类，用于定义<code>DynamicTableNameInnterInterceptor</code>插件：</p><figure><img src="`+ln+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>具体代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>handler<span class="token punctuation">.</span></span><span class="token class-name">TableNameHandler</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>inner<span class="token punctuation">.</span></span><span class="token class-name">DynamicTableNameInnerInterceptor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">TableInfoContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">DynamicTableNameInnerInterceptor</span> <span class="token function">dynamicTableNameInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 准备一个Map，用于存储TableNameHandler</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">TableNameHandler</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 存入一个TableNameHandler，用来替换points_board表名称</span>
        <span class="token comment">// 替换方式，就是从TableInfoContext中读取保存好的动态表名</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;points_board&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>sql<span class="token punctuation">,</span> tableName<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">TableInfoContext</span><span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DynamicTableNameInnerInterceptor</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>插件虽然定义好了，但是该如何继承到MybatisPlus中呢？</p><p>在天机学堂项目中的tj-common模块中，已经实现了MybatisPlus的自动装配，并且定义了很多的MP插件。如果我们在自己的项目中重新定义MP配置，就会导致tj-common中的插件失效。</p><p>所以，我们应该修改<code>tj-common</code>中的MP配置，将<code>DynamicTableNameInnerInterceptor</code>配置进去。找到<code>tj-common</code>模块下的<code>MybatisConfig</code>配置：</p><figure><img src="`+un+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>修改其中的拦截器配置：</p><figure><img src="'+rn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>',38),qn={class:"hint-container tip"},Mn=n("p",{class:"hint-container-title"},"提示",-1),Dn=n("p",null,[n("strong",null,"注意"),s("：")],-1),Xn=n("li",null,[s("由于"),n("code",null,"DynamicTableNameInnerInterceptor"),s("并不是每一个微服务都用了，所以这里加入了@Autowired(required= false)，避免未定义该拦截器的微服务报错。")],-1),An={href:"https://baomidou.com/pages/2976a3/#innerinterceptor",target:"_blank",rel:"noopener noreferrer"},zn=a(`<h3 id="_2-4-2-定时持久化任务" tabindex="-1"><a class="header-anchor" href="#_2-4-2-定时持久化任务" aria-hidden="true">#</a> 2.4.2.定时持久化任务</h3><p>动态表名已经准备就绪，接下来我们就可以去定义定时任务，实现榜单持久化了。</p><p>在<code>tj-learning</code>模块的<code>com.tianji.learning.handler.PointsBoardPersistentHandler</code>中添加一个定时任务：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@XxlJob</span><span class="token punctuation">(</span><span class="token string">&quot;savePointsBoard2DB&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">savePointsBoard2DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 1.获取上月时间</span>
    <span class="token class-name">LocalDateTime</span> time <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minusMonths</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 2.计算动态表名</span>
    <span class="token comment">// 2.1.查询赛季信息</span>
    <span class="token class-name">Integer</span> season <span class="token operator">=</span> seasonService<span class="token punctuation">.</span><span class="token function">querySeasonByTime</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.2.将表名存入ThreadLocal</span>
    <span class="token class-name">TableInfoContext</span><span class="token punctuation">.</span><span class="token function">setInfo</span><span class="token punctuation">(</span><span class="token constant">POINTS_BOARD_TABLE_PREFIX</span> <span class="token operator">+</span> season<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 3.查询榜单数据</span>
    <span class="token comment">// 3.1.拼接KEY</span>
    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token class-name">RedisConstants</span><span class="token punctuation">.</span><span class="token constant">POINTS_BOARD_KEY_PREFIX</span> <span class="token operator">+</span> time<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">DateUtils</span><span class="token punctuation">.</span><span class="token constant">POINTS_BOARD_SUFFIX_FORMATTER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3.2.查询数据</span>
    <span class="token keyword">int</span> pageNo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> pageSize <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PointsBoard</span><span class="token punctuation">&gt;</span></span> boardList <span class="token operator">=</span> pointsBoardService<span class="token punctuation">.</span><span class="token function">queryCurrentBoardList</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> pageNo<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>boardList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 4.持久化到数据库</span>
        <span class="token comment">// 4.1.把排名信息写入id</span>
        boardList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>b <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            b<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">getRank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            b<span class="token punctuation">.</span><span class="token function">setRank</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 4.2.持久化</span>
        pointsBoardService<span class="token punctuation">.</span><span class="token function">saveBatch</span><span class="token punctuation">(</span>boardList<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 5.翻页</span>
        pageNo<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 任务结束，移除动态表名</span>
    <span class="token class-name">TableInfoContext</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的，由于榜单数据非常多，不可能一次性查完，因此这里采用的是分页查询的方式。而分页查询调用的是<code>com.tianji.learning.service.IPointsBoardService</code>中的<code>queryCurrentBoardList</code>方法。这个方法在service实现类中本来就有，只不过没有抽取到service接口。</p><p>因此这里要在<code>com.tianji.learning.service.IPointsBoardService</code>中抽取这个接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">IService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>po<span class="token punctuation">.</span></span><span class="token class-name">PointsBoard</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">PointsBoardQuery</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">PointsBoardVO</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
 * 学霸天梯榜 服务类
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPointsBoardService</span> <span class="token keyword">extends</span> <span class="token class-name">IService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PointsBoard</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">PointsBoardVO</span> <span class="token function">queryPointsBoardBySeason</span><span class="token punctuation">(</span><span class="token class-name">PointsBoardQuery</span> query<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">createPointsBoardTableBySeason</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> season<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PointsBoard</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryCurrentBoardList</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Integer</span> pageNo<span class="token punctuation">,</span> <span class="token class-name">Integer</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>把<code>com.tianji.learning.service.impl.PointsBoardServiceImpl</code>中的方法改为public：</p><figure><img src="`+kn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_2-4-3-xxl-job任务分片" tabindex="-1"><a class="header-anchor" href="#_2-4-3-xxl-job任务分片" aria-hidden="true">#</a> 2.4.3.XXL-JOB任务分片</h3><p>刚才定义的定时持久化任务，通过while死循环，不停的查询数据，直到把所有数据都持久化为止。这样如果数据量达到数百万，交给一个任务执行器来处理会耗费非常多时间。</p><p>因此，将来肯定会将学习服务多实例部署，这样就会有多个执行器并行执行。**但是，**如果交给多个任务执行器，大家执行相同代码，都从第1页逐页处理数据，又会出现重复处理的情况。</p><p>怎么办？</p><p>这就要用到任务分片的方案了。</p><p>怎样才能确保任务不重复呢？我们可以参考扑克牌发牌的原理：</p><ul><li>逐一给每个人发牌</li><li>发完一圈后，再回头给第一个人发</li><li>重复上述动作，直到牌发完为止</li></ul><figure><img src="'+dn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>与此类似，比如我们启动了3个服务实例，就有3个执行器。我们可以把执行器当做打牌的人，然后把每一页数据作为一张牌：</p><ul><li>把每页数据逐一分发给每个执行器，</li><li>发完一圈后，再回到第一个执行器。</li><li>直到所有页数据都发放完毕。</li></ul><p>那么数据分发的过程如图：</p><figure><img src="'+mn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>最终，每个执行器处理的数据页情况：</p><ul><li>执行器1：处理第1、4、7、10、13、...页数据</li><li>执行器2：处理第2、5、8、11、14、...页数据</li><li>执行器3：处理第3、6、9、12、15、...页数据</li></ul><p>要想知道每一个执行器执行哪些页数据，只要弄清楚两个关键参数即可：</p><ul><li>起始页码：pageNo</li><li>下一页的跨度：step</li></ul><p>而这两个参数是有规律的：</p><ul><li>起始页码：执行器编号是多少，起始页码就是多少</li><li>页跨度：执行器有几个，跨度就是多少。也就是说你要跳过别人读取过的页码</li></ul><p>因此，现在的关键就是获取两个数据：</p><ul><li>执行器编号</li><li>执行器数量</li></ul><p>这两个参数XXL-JOB作为任务调度中心，肯定是知道的，而且也提供了API帮助我们获取：</p><figure><img src="'+vn+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这里的分片序号其实就是执行器序号，不过是从0开始，那我们只要对序号+1，就可以作为起始页码了。</p><p>因此，最终我们改造代码，实现数据分片如图：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@XxlJob</span><span class="token punctuation">(</span><span class="token string">&quot;savePointsBoard2DB&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">savePointsBoard2DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 1.获取上月时间</span>
    <span class="token class-name">LocalDateTime</span> time <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minusMonths</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 2.计算动态表名</span>
    <span class="token comment">// 2.1.查询赛季信息</span>
    <span class="token class-name">Integer</span> season <span class="token operator">=</span> seasonService<span class="token punctuation">.</span><span class="token function">querySeasonByTime</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.2.存入ThreadLocal</span>
    <span class="token class-name">TableInfoContext</span><span class="token punctuation">.</span><span class="token function">setInfo</span><span class="token punctuation">(</span><span class="token constant">POINTS_BOARD_TABLE_PREFIX</span> <span class="token operator">+</span> season<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 3.查询榜单数据</span>
    <span class="token comment">// 3.1.拼接KEY</span>
    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token class-name">RedisConstants</span><span class="token punctuation">.</span><span class="token constant">POINTS_BOARD_KEY_PREFIX</span> <span class="token operator">+</span> time<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">DateUtils</span><span class="token punctuation">.</span><span class="token constant">POINTS_BOARD_SUFFIX_FORMATTER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3.2.查询数据</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token class-name">XxlJobHelper</span><span class="token punctuation">.</span><span class="token function">getShardIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token class-name">XxlJobHelper</span><span class="token punctuation">.</span><span class="token function">getShardTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> pageNo <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 起始页，就是分片序号+1</span>
    <span class="token keyword">int</span> pageSize <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PointsBoard</span><span class="token punctuation">&gt;</span></span> boardList <span class="token operator">=</span> pointsBoardService<span class="token punctuation">.</span><span class="token function">queryCurrentBoardList</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> pageNo<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>boardList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 4.持久化到数据库</span>
        <span class="token comment">// 4.1.把排名信息写入id</span>
        boardList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>b <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            b<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">getRank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            b<span class="token punctuation">.</span><span class="token function">setRank</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 4.2.持久化</span>
        pointsBoardService<span class="token punctuation">.</span><span class="token function">saveBatch</span><span class="token punctuation">(</span>boardList<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 5.翻页，跳过N个页，N就是分片数量</span>
        pageNo<span class="token operator">+=</span>total<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">TableInfoContext</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-4-清理redis缓存任务" tabindex="-1"><a class="header-anchor" href="#_2-4-4-清理redis缓存任务" aria-hidden="true">#</a> 2.4.4.清理Redis缓存任务</h3><p>当任务持久化以后，我们还要清理Redis中的上赛季的榜单数据，避免过多的内存占用。</p><p>在<code>tj-learning</code>模块的<code>com.tianji.learning.handler.PointsBoardPersistentHandler</code>中添加一个定时任务：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>handler</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">CollUtils</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">DateUtils</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>constants<span class="token punctuation">.</span></span><span class="token class-name">RedisConstants</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>po<span class="token punctuation">.</span></span><span class="token class-name">PointsBoard</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">IPointsBoardSeasonService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">IPointsBoardService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">TableInfoContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>xxl<span class="token punctuation">.</span>job<span class="token punctuation">.</span>core<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">XxlJobHelper</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>xxl<span class="token punctuation">.</span>job<span class="token punctuation">.</span>core<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">XxlJob</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">RequiredArgsConstructor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">StringRedisTemplate</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDateTime</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>constants<span class="token punctuation">.</span></span><span class="token class-name">LearningConstants</span><span class="token punctuation">.</span><span class="token static">POINTS_BOARD_TABLE_PREFIX</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@RequiredArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PointsBoardPersistentHandler</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">IPointsBoardSeasonService</span> seasonService<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">IPointsBoardService</span> pointsBoardService<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">StringRedisTemplate</span> redisTemplate<span class="token punctuation">;</span>

    <span class="token comment">// ... 略</span>

    <span class="token annotation punctuation">@XxlJob</span><span class="token punctuation">(</span><span class="token string">&quot;clearPointsBoardFromRedis&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clearPointsBoardFromRedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 1.获取上月时间</span>
        <span class="token class-name">LocalDateTime</span> time <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minusMonths</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2.计算key</span>
        <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token class-name">RedisConstants</span><span class="token punctuation">.</span><span class="token constant">POINTS_BOARD_KEY_PREFIX</span> <span class="token operator">+</span> time<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">DateUtils</span><span class="token punctuation">.</span><span class="token constant">POINTS_BOARD_SUFFIX_FORMATTER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 3.删除</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">unlink</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-5-任务链" tabindex="-1"><a class="header-anchor" href="#_2-4-5-任务链" aria-hidden="true">#</a> 2.4.5.任务链</h3><p>现在，所有任务都已经定义完毕。接下来就给配置任务调度了。</p><p>我们最终期望的任务执行顺序是这样的：</p><figure><img src="`+gn+'" alt="image-20230715215853599" tabindex="0" loading="lazy"><figcaption>image-20230715215853599</figcaption></figure><p>但问题来了，我们该如何控制三个任务的执行顺序呢？</p><p>这就要借助于XXL-JOB中的子任务功能了。</p><p>首先，我们把持久化榜单数据、清理Redis中历史榜单的任务也在XXL-JOB中定义出来。</p><p>首先是持久化榜单：</p><figure><img src="'+bn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>然后是清理Redis的任务：</p><figure><img src="'+yn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>接下来，回到任务管理页面，会看到3个任务都添加成功，并且每个任务都有自己的ID：</p><figure><img src="'+fn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>要想让任务A、B依次执行，其实就是配置任务B作为任务A的子任务。因此，我们按照下面方式配置：</p><ul><li>创建历史榜单表（10）的子任务是持久化榜单数据任务（12）</li><li>持久化榜单数据任务（12）的子任务是清理Redis中的历史榜单（13）</li></ul><p>也就是说：10的子任务是12, 12的子任务是13</p><p>首先，点击创建历史绑定表后面的操作，然后编辑：</p><figure><img src="'+hn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>然后在子任务中，填写持久化榜单数据任务的id，本例中是12：</p><figure><img src="'+_n+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>保存。</p><p>然后点击持久化榜单数据任务后面的操作，编辑：</p><figure><img src="'+xn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>然后在子任务一栏，填写清理Redis中的历史榜单的任务id，本例中是13：</p><figure><img src="'+wn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>好了，任务链形成了。</p><p>接下来，执行一次创建榜单表任务，就会发现后续的两个任务也依次执行了。</p><h1 id="_3-练习" tabindex="-1"><a class="header-anchor" href="#_3-练习" aria-hidden="true">#</a> 3.练习</h1><h2 id="_3-1-查询积分榜" tabindex="-1"><a class="header-anchor" href="#_3-1-查询积分榜" aria-hidden="true">#</a> 3.1.查询积分榜</h2><p>完善查询学霸积分榜功能，课堂中只实现了对当前赛季榜单的查询，大家需要完善对历史榜单数据的查询。</p><p>注意：历史榜单数据在不同的表中。</p><h2 id="_3-2-清理积分明细" tabindex="-1"><a class="header-anchor" href="#_3-2-清理积分明细" aria-hidden="true">#</a> 3.2.清理积分明细</h2><p>积分明细数据比积分榜单数据量更大，全部放到一张表中不太合适。建议按照赛季的日期对积分明细数据做水平拆分：</p><ul><li>当前赛季的数据依然保存在points_record表不变</li><li>每个历史赛季的积分明细需要从points_record表迁移到一张独立的表中</li><li>表名称规则points_record_xx，这里的xx就是赛季id</li></ul><p>通过一个定时任务在每月初完成数据迁移。</p><h1 id="_4-面试题" tabindex="-1"><a class="header-anchor" href="#_4-面试题" aria-hidden="true">#</a> 4.面试题</h1><p><strong>面试官：你在项目中负责积分排行榜功能，说说看你们排行榜怎么设计实现的？</strong></p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>答：我们的排行榜功能分为两部分：一个是当前赛季排行榜，一个是历史排行榜。</p><p>因为我们的产品设计是每个月为一个赛季，月初清零积分记录，这样学员就有持续的动力去学习。这就有了赛季的概念，因此也就有了当前赛季榜单和历史榜单的区分，其实现思路也不一样。</p><p>首先说当前赛季榜单，我们采用了Redis的SortedSet来实现。member是用户id，score就是当月积分总值。每当用户产生积分行为的时候，获取积分时，就会更新score值。这样Redis就会自动形成榜单了。非常方便且高效。</p><p>然后再说历史榜单，历史榜单肯定是保存到数据库了。不过由于数据过多，所以需要对数据做水平拆分，我们目前的思路是按照赛季来拆分，也就是每一个赛季的榜单单独一张表。这样做有几个好处：</p><ul><li>拆分数据时比较自然，无需做额外处理</li><li>查询数据时往往都是按照赛季来查询，这样一次只需要查一张表，不存在跨表查询问题</li></ul><p>因此我们就不需要用到分库分表的插件了，直接在业务层利用MybatisPlus就可以实现动态表名，动态插入了。简单高效。</p><p>我们会利用一个定时任务在每月初生成上赛季的榜单表，然后再用一个定时任务读取Redis中的上赛季榜单数据，持久化到数据库中。最后再有一个定时任务清理Redis中的历史数据。</p><p>这里要说明一下，这里三个任务是有关联的，之所以让任务分开定义，是为了避免任务耦合。这样在部分任务失败时，可以单独重试，无需所有任务从头重试。</p><p>当然，最终我们肯定要确保这三个任务的执行顺序，一定是依次执行的。</p></div><p><strong>面试官追问：你们使用Redis的SortedSet来保存榜单数据，如果用户量非常多怎么办？</strong></p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>首先Redis的SortedSet底层利用了跳表机制，性能还是非常不错的。即便有百万级别的用户量，利用SortedSet也没什么问题，性能上也能得到保证。在我们的项目用户量下，完全足够。</p><p>当系统用户量规模达到数千万，乃至数亿时，我们可以采用分治的思想，将用户数据按照积分范围划分为多个桶。</p><p>然后为每个桶创建一个SortedSet类型的key，这样就可以将数据分散，减少单个KEY的数据规模了。</p><p>而要计算排名时，只需要按照范围查询出用户积分所在的桶，再累加分值范围比他高的桶的用户数量即可。依然非常简单、高效。</p></div><p><strong>面试官追问：你们使用历史榜单采用的定时任务框架是哪个？处理数百万的榜单数据时任务是如何分片的？你们是如何确保多个任务依次执行的呢？</strong></p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>答：我们采用的是XXL-JOB框架。</p><p>XXL-JOB自带任务分片广播机制，每一个任务执行器都能通过API得到自己的分片编号、总分片数量。在做榜单数据批处理时，我们是按照分页查询的方式：</p><ul><li>每个执行器的读取的起始页都是自己的分片编号+1，例如第一个执行器，其起始页就是1，第二个执行器，其起始页就是2，以此类推</li><li>然后不是逐页查询，而是有一个页的跨度，跨度值就是分片总数量。例如分了3片，那么跨度就是3</li></ul><p>此时，第一个分片处理的数据就是第1、4、7、10、13等几页数据，第二个分片处理的就是第2、5、8、11、14等页的数据，第三个分片处理的就是第3、6、9、12、15等页的数据。</p><p>这样就能确保所有数据都会被处理，而且每一个执行器都执行的是不同的数据了。</p><p>最后，要确保多个任务的执行顺序，可以利用XXL-JOB中的子任务功能。比如有任务A、B、C，要按照字母顺序依次执行，我们就可以将C设置为B的子任务，再将B设置为A的子任务。然后给A设置一个触发器。</p><p>这样，当A触发时，就会依次执行这三个任务了。</p></div>',80);function Un(Jn,Fn){const t=o("ExternalLinkIcon");return c(),i("div",null,[Bn,n("p",null,[n("a",Pn,[s("https://redis.io/commands/?group=sorted-set"),p(t)])]),Tn,n("p",null,[n("a",jn,[s("https://www.cnblogs.com/wenxuehai/p/15901779.html"),p(t)])]),In,n("p",null,[n("a",Rn,[s("https://www.xuxueli.com/xxl-job/"),p(t)])]),Ln,n("p",null,[s("调度中心在我们提供的虚拟机开发环境中已经部署完成了。访问："),n("a",On,[s("http://xxljob.tianji.com"),p(t)]),s("即可查看调度中心控制台页面。默认的账号密码是：admin/123456")]),Nn,n("p",null,[n("a",En,[s("https://baomidou.com/pages/2a45ff/#dynamictablenameinnerinterceptor"),p(t)])]),Cn,n("div",qn,[Mn,Dn,n("ul",null,[Xn,n("li",null,[s("MybatisPlus的插件定义顺序非常重要，必须按照一定的顺序来定义。参考："),n("a",An,[s("https://baomidou.com/pages/2976a3/#innerinterceptor"),p(t)])])])]),zn])}const Qn=e(Sn,[["render",Un],["__file","day08-排行榜功能.html.vue"]]);export{Qn as default};
