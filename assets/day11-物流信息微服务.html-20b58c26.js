import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-5f6064b2.js";const p="/assets/image-20240407183435278-347-fc46c486.gif",e="/assets/image-20240407183435279-348-3cc092ea.png",o="/assets/image-20240407183435279-349-f8db66a7.png",c="/assets/image-20240407183435279-350-564f6b8e.png",i="/assets/image-20240407183435279-351-fdd9aca0.png",l="/assets/image-20240407183435279-352-cb1390d9.png",u="/assets/image-20240407183435279-353-1a1b005f.png",r="/assets/image-20240407183435279-354-03fb1e73.png",k="/assets/image-20240407183435279-355-c2a807a3.png",d="/assets/image-20240407183435279-356-2e7f1981.png",m="/assets/image-20240407183435279-357-0dd1a9d7.png",v="/assets/image-20240407183435279-358-dd84ffed.png",b="/assets/image-20240407183435279-359-4c56326a.png",g="/assets/image-20240407183435279-360-ada4753c.png",f="/assets/image-20240407183435279-361-2769a881.png",h="/assets/image-20240407183435280-362-558d9ba1.png",y="/assets/image-20240407183435280-363-9f7a00cb.png",w="/assets/image-20240407183435280-364-7c5f774c.png",_="/assets/image-20240407183435280-365-b0ba122d.png",C="/assets/image-20240407183435280-366-7ec7e6fa.png",I="/assets/image-20240407183435280-367-19729b6e.png",q="/assets/image-20240407183435280-368-380fc739.png",T="/assets/image-20240407183435280-369-6cb5cd67.png",R="/assets/image-20240407183435280-370-25246890.png",O="/assets/image-20240407183435280-371-aeb4f1cb.png",S="/assets/image-20240407183435280-372-c42a57e6.png",x="/assets/image-20240407183435280-373-70aa89fe.png",j="/assets/image-20240407183435280-374-1ae54de2.png",M="/assets/image-20240407183435280-375-34277d11.png",E="/assets/image-20240407183435280-376-7c612b4c.png",L={},D=t('<h1 id="课程安排" tabindex="-1"><a class="header-anchor" href="#课程安排" aria-hidden="true">#</a> 课程安排</h1><ul><li>物流信息的需求分析</li><li>技术实现分析</li><li>基于MongoDB的功能实现</li><li>多级缓存的解决方案</li><li>Redis缓存存在的问题分析并解决</li></ul><h1 id="_1、背景说明" tabindex="-1"><a class="header-anchor" href="#_1、背景说明" aria-hidden="true">#</a> 1、背景说明</h1><p>快递员将包裹取走之后，直至收件人签收，期间发件人和收件人最为关心的就是“快递到哪了”，如何让收发件人清晰的了解到包裹的“实时”状态，就需要将物流信息给用户展现出来，也就是今天要学习的主要内容【物流信息】。<br> 然而，此功能的并发量是有一定要求的，特别是在电商大促期间，快件数量非常庞大，也就意味着查询人的量也是很大的，所以，此处必须是缓存应用的集中地，我们也将在该业务中讲解Redis缓存应用的常见问题，并且去实施解决，从而形成通用的解决方案。<br> 如果这块搞不好，程序员又要背锅了……<br><img src="'+p+'" alt="" loading="lazy"></p><h1 id="_2、需求分析" tabindex="-1"><a class="header-anchor" href="#_2、需求分析" aria-hidden="true">#</a> 2、需求分析</h1><p>用户寄件后，是需要查看运单的运输详情，也就是需要查看整个转运节点，类似这样：<br><img src="'+e+'" alt="" loading="lazy"><br> 产品的需求描述如下（在快递员端的产品文档中）：<br><img src="'+o+'" alt="" loading="lazy"><br> 可以看出，物流信息中有状态、时间、具体信息、快递员姓名、快递员联系方式等信息。</p><h1 id="_3、实现分析" tabindex="-1"><a class="header-anchor" href="#_3、实现分析" aria-hidden="true">#</a> 3、实现分析</h1><p>基于上面的需求分析，我们该如何实现呢？首先要分析一下物流信息功能的特点：</p><ul><li>数据量大</li><li>查询频率高（签收后查询频率低）</li></ul><p>针对于以上的特点，我们可以进行逐一的分析，首选是数据量大，这个挑战是在存储方面，如果我们做技术选型的话，无非就是两种选择，一种是关系型数据库，另一种是非关系型数据库，显然，在存储大数据方面非关系型数据库更合适一些，以我们目前掌握的技术而言，选择MongoDB存储要比MySQL更合适一些。<br> 运单在签收之前，查询的频率是非常高的，用户可能会不断的刷物流信息，一般解决查询并发高的解决方案是通过缓存解决，我们也将对查询数据进行缓存。</p><h2 id="_3-1、mysql实现" tabindex="-1"><a class="header-anchor" href="#_3-1、mysql实现" aria-hidden="true">#</a> 3.1、MySQL实现</h2><p>如果采用MySQL的存储，一般是这样存储的，首选设计表结构：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>sl_transport_info<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>transport_order_id<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;运单号&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>status<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;状态，例如：运输中&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>info<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;详细信息，例如：您的快件已到达【北京通州分拣中心】&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>created<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;创建时间&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>updated<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;更新时间&#39;</span><span class="token punctuation">,</span>\n  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">8</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8mb4_0900_ai_ci<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>插入测试数据：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>sl_transport_info<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>transport_order_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>status<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>info<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>created<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>updated<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;SL920733749248&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;已取件&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;神领快递员已取件， 取件人【快递员，电话 18810966207}】&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2022-09-25 10:48:30&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2022-09-25 10:48:33&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>sl_transport_info<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>transport_order_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>status<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>info<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>created<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>updated<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;SL920733749262&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;已取件&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;神领快递员已取件， 取件人【快递员，电话 18810966207}】&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2022-09-25 10:51:11&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2022-09-25 10:51:14&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>sl_transport_info<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>transport_order_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>status<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>info<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>created<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>updated<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;SL920733749248&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;运输中&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;您的快件已到达【昌平区转运中心】&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2022-09-25 11:14:33&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2022-09-25 11:14:36&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>sl_transport_info<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>transport_order_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>status<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>info<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>created<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>updated<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;SL920733749248&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;运输中&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;您的快件已到达【北京市转运中心】&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2022-09-25 11:14:54&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2022-09-25 11:14:57&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>sl_transport_info<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>transport_order_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>status<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>info<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>created<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>updated<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&#39;SL920733749262&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;运输中&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;您的快件已到达【昌平区转运中心】&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2022-09-25 11:15:17&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2022-09-25 11:15:19&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>sl_transport_info<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>transport_order_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>status<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>info<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>created<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>updated<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">&#39;SL920733749262&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;运输中&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;您的快件已到达【江苏省南京市玄武区长江路】&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2022-09-25 11:15:44&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2022-09-25 11:15:47&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>sl_transport_info<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>transport_order_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>status<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>info<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>created<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>updated<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">&#39;SL920733749248&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;已签收&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;您的快递已签收，如有疑问请联系快递员【快递员}，电话18810966207】，感谢您使用神领快递，期待再次为您服务&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2022-09-25 11:16:16&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2022-09-25 11:16:19&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="'+c+`" alt="" loading="lazy"><br> 查询运单号【SL920733749248】的物流信息：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
	<span class="token operator">*</span> 
<span class="token keyword">FROM</span>
	sl_transport_info 
<span class="token keyword">WHERE</span>
	transport_order_id <span class="token operator">=</span> <span class="token string">&#39;SL920733749248&#39;</span> 
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
	created <span class="token keyword">ASC</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：<br><img src="`+i+`" alt="" loading="lazy"></p><h2 id="_3-2、mongodb实现" tabindex="-1"><a class="header-anchor" href="#_3-2、mongodb实现" aria-hidden="true">#</a> 3.2、MongoDB实现</h2><p>基于MongoDB的实现，可以充分利用MongoDB数据结构的特点，可以这样存储：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;_id&quot;</span><span class="token operator">:</span> ObjectId(<span class="token string">&quot;62c6c679a1222549d64ba01e&quot;</span>)<span class="token punctuation">,</span>
    <span class="token property">&quot;transportOrderId&quot;</span><span class="token operator">:</span> <span class="token string">&quot;SL1000000000585&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;infoList&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;created&quot;</span><span class="token operator">:</span> NumberLong(<span class="token string">&quot;1657192271195&quot;</span>)<span class="token punctuation">,</span>
            <span class="token property">&quot;info&quot;</span><span class="token operator">:</span> <span class="token string">&quot;神领快递员已取件， 取件人【快递员，电话 18810966207}】&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token string">&quot;已取件&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;created&quot;</span><span class="token operator">:</span> NumberLong(<span class="token string">&quot;1657192328518&quot;</span>)<span class="token punctuation">,</span>
            <span class="token property">&quot;info&quot;</span><span class="token operator">:</span> <span class="token string">&quot;神领快递员已取件， 取件人【快递员，电话 18810966207}】&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token string">&quot;已取件&quot;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;created&quot;</span><span class="token operator">:</span> NumberLong(<span class="token string">&quot;1657194104987&quot;</span>)<span class="token punctuation">,</span>
    <span class="token property">&quot;updated&quot;</span><span class="token operator">:</span> NumberLong(<span class="token string">&quot;1657194105064&quot;</span>)<span class="token punctuation">,</span>
    <span class="token property">&quot;_class&quot;</span><span class="token operator">:</span> <span class="token string">&quot;com.sl.transport.info.entity.TransportInfoEntity&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果有新的信息加入的话，只需要向【infoList】中插入元素即可，查询的话按照【transportOrderId】条件查询。<br><code>db.sl_transport_info.find({&quot;transportOrderId&quot;:&quot;SL1000000000585&quot;})</code><br><img src="`+l+`" alt="" loading="lazy"></p><h2 id="_3-3、分析" tabindex="-1"><a class="header-anchor" href="#_3-3、分析" aria-hidden="true">#</a> 3.3、分析</h2><p>从上面的实现分析来看，MySQL存储在一张表中，每条物流信息就是一条行数据，数据条数将是运单数量的数倍，查询时需要通过运单id作为条件，按照时间正序排序得到所有的结果，而MongoDB存储基于其自身特点可以将物流信息列表存储到属性中，数据量等于运单量，查询时只需要按照运单id查询即可。<br> 所以，使用MongoDB存储更适合物流信息这样的场景，我们将基于MongoDB进行实现。</p><h1 id="_4、功能实现" tabindex="-1"><a class="header-anchor" href="#_4、功能实现" aria-hidden="true">#</a> 4、功能实现</h1><h2 id="_4-1、service实现" tabindex="-1"><a class="header-anchor" href="#_4-1、service实现" aria-hidden="true">#</a> 4.1、Service实现</h2><p>在TransportInfoService中定义了3个方法：</p><ul><li><code>saveOrUpdate()</code> 新增或更新数据</li><li><code>queryByTransportOrderId()</code> 根据运单号查询物流信息</li></ul><h3 id="_4-2-1、saveorupdate" tabindex="-1"><a class="header-anchor" href="#_4-2-1、saveorupdate" aria-hidden="true">#</a> 4.2.1、saveOrUpdate</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">MongoTemplate</span> mongoTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">TransportInfoEntity</span> <span class="token function">saveOrUpdate</span><span class="token punctuation">(</span><span class="token class-name">String</span> transportOrderId<span class="token punctuation">,</span> <span class="token class-name">TransportInfoDetail</span> infoDetail<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//根据运单id查询</span>
        <span class="token class-name">Query</span> query <span class="token operator">=</span> <span class="token class-name">Query</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">Criteria</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&quot;transportOrderId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span>transportOrderId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//构造查询条件</span>
        <span class="token class-name">TransportInfoEntity</span> transportInfoEntity <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mongoTemplate<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token class-name">TransportInfoEntity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>transportInfoEntity<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//运单信息不存在，新增数据</span>
            transportInfoEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransportInfoEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            transportInfoEntity<span class="token punctuation">.</span><span class="token function">setTransportOrderId</span><span class="token punctuation">(</span>transportOrderId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            transportInfoEntity<span class="token punctuation">.</span><span class="token function">setInfoList</span><span class="token punctuation">(</span><span class="token class-name">ListUtil</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span>infoDetail<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            transportInfoEntity<span class="token punctuation">.</span><span class="token function">setCreated</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">//运单信息存在，只需要追加物流详情数据</span>
            transportInfoEntity<span class="token punctuation">.</span><span class="token function">getInfoList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>infoDetail<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//无论新增还是更新都要设置更新时间</span>
        transportInfoEntity<span class="token punctuation">.</span><span class="token function">setUpdated</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//保存/更新到MongoDB</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mongoTemplate<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>transportInfoEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-2、查询" tabindex="-1"><a class="header-anchor" href="#_4-2-2、查询" aria-hidden="true">#</a> 4.2.2、查询</h3><p>根据运单号查询物流信息。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">TransportInfoEntity</span> <span class="token function">queryByTransportOrderId</span><span class="token punctuation">(</span><span class="token class-name">String</span> transportOrderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//定义查询条件</span>
        <span class="token class-name">Query</span> query <span class="token operator">=</span> <span class="token class-name">Query</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">Criteria</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&quot;transportOrderId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span>transportOrderId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//查询数据</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mongoTemplate<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token class-name">TransportInfoEntity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-3、测试" tabindex="-1"><a class="header-anchor" href="#_4-2-3、测试" aria-hidden="true">#</a> 4.2.3、测试</h3><p>通过测试用例进行测试：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sl<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>info<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sl<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>info<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">TransportInfoDetail</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sl<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>info<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">TransportInfoEntity</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">TransportInfoServiceTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">TransportInfoService</span> transportInfoService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">saveOrUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> transportOrderId <span class="token operator">=</span> <span class="token string">&quot;SL1000000001561&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">TransportInfoDetail</span> transportInfoDetail <span class="token operator">=</span> <span class="token class-name">TransportInfoDetail</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token string">&quot;已取件&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;神领快递员已取件，取件人【张三】，电话：13888888888&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">created</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TransportInfoEntity</span> transportInfoEntity <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>transportInfoService<span class="token punctuation">.</span><span class="token function">saveOrUpdate</span><span class="token punctuation">(</span>transportOrderId<span class="token punctuation">,</span> transportInfoDetail<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>transportInfoEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">queryByTransportOrderId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> transportOrderId <span class="token operator">=</span> <span class="token string">&quot;SL1000000001561&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>transportInfoService<span class="token punctuation">.</span><span class="token function">queryByTransportOrderId</span><span class="token punctuation">(</span>transportOrderId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试结果：<br><img src="`+u+`" alt="" loading="lazy"></p><h2 id="_4-2、记录物流信息" tabindex="-1"><a class="header-anchor" href="#_4-2、记录物流信息" aria-hidden="true">#</a> 4.2、记录物流信息</h2><h3 id="_4-2-1、分析" tabindex="-1"><a class="header-anchor" href="#_4-2-1、分析" aria-hidden="true">#</a> 4.2.1、分析</h3><p>通过前面的需求分析，可以发现新增物流信息的节点比较多，在取件、派件、物流转运环节都有记录物流信息，站在整体架构的方面的考虑，该如何在众多的业务点钟记录物流信息呢？<br> 一般而言，会有两种方式，一种是微服务直接调用，另一种是通过消息的方式调用，也就是同步和异步的方式。选择哪种方式比较好呢？<br> 在这里，我们选择通过消息的方式，主要原因有两个：</p><ul><li>物流信息数据的更新的实时性并不高，例如，运单到达某个转运中心，晚几分种记录信息也是可以的。</li><li>更新数据时，并发量比较大，例如，一辆车装了几千或几万个包裹，到达某个转运中心后，司机入库时，需要一下记录几千或几万个运单的物流数据，在这一时刻并发量是比较大的，通过消息的方式，可以进行对流量削峰，从而保障系统的稳定性。</li></ul><h3 id="_4-2-2、消息结构" tabindex="-1"><a class="header-anchor" href="#_4-2-2、消息结构" aria-hidden="true">#</a> 4.2.2、消息结构</h3><p>消息的结构如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;info&quot;</span><span class="token operator">:</span> <span class="token string">&quot;您的快件已到达【$organId】&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token string">&quot;运输中&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;organId&quot;</span><span class="token operator">:</span> <span class="token number">1012479939628238305</span><span class="token punctuation">,</span>
    <span class="token property">&quot;transportOrderId&quot;</span><span class="token operator">:</span> <span class="token string">&quot;SL920733749248&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;created&quot;</span><span class="token operator">:</span> <span class="token number">1653133234913</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，在消息中，有具体信息、状态、机构id、运单号、时间，其中在info字段中，约定通过<code>$organId</code>占位符表示机构，也就是，需要通过传入的<code>organId</code>查询机构名称替换到<code>info</code>中，当然了，如果没有机构，无需替换。</p><h3 id="_4-2-3、功能实现" tabindex="-1"><a class="header-anchor" href="#_4-2-3、功能实现" aria-hidden="true">#</a> 4.2.3、功能实现</h3><p>在TransportInfoMQListener中对消息进行处理。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sl<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>info<span class="token punctuation">.</span>mq</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>convert<span class="token punctuation">.</span></span><span class="token class-name">Convert</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">StrUtil</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>json<span class="token punctuation">.</span></span><span class="token class-name">JSONUtil</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sl<span class="token punctuation">.</span>ms<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">OrganFeign</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sl<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>common<span class="token punctuation">.</span>constant<span class="token punctuation">.</span></span><span class="token class-name">Constants</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sl<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>common<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">TransportInfoMsg</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sl<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">OrganDTO</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sl<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>info<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">TransportInfoDetail</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sl<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>info<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">TransportInfoService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">ExchangeTypes</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Exchange</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Queue</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">QueueBinding</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RabbitListener</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 物流信息消息
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransportInfoMQListener</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">OrganFeign</span> organFeign<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">TransportInfoService</span> transportInfoService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>
            value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token class-name">Constants<span class="token punctuation">.</span>MQ<span class="token punctuation">.</span>Queues</span><span class="token punctuation">.</span><span class="token constant">TRANSPORT_INFO_APPEND</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token class-name">Constants<span class="token punctuation">.</span>MQ<span class="token punctuation">.</span>Exchanges</span><span class="token punctuation">.</span><span class="token constant">TRANSPORT_INFO</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">ExchangeTypes</span><span class="token punctuation">.</span><span class="token constant">TOPIC</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            key <span class="token operator">=</span> <span class="token class-name">Constants<span class="token punctuation">.</span>MQ<span class="token punctuation">.</span>RoutingKeys</span><span class="token punctuation">.</span><span class="token constant">TRANSPORT_INFO_APPEND</span>
    <span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listenTransportInfoMsg</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//{&quot;info&quot;:&quot;您的快件已到达【$organId】&quot;, &quot;status&quot;:&quot;运输中&quot;, &quot;organId&quot;:90001, &quot;transportOrderId&quot;:920733749248 , &quot;created&quot;:1653133234913}</span>
        <span class="token class-name">TransportInfoMsg</span> transportInfoMsg <span class="token operator">=</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">toBean</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token class-name">TransportInfoMsg</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Long</span> organId <span class="token operator">=</span> transportInfoMsg<span class="token punctuation">.</span><span class="token function">getOrganId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> transportOrderId <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">toStr</span><span class="token punctuation">(</span>transportInfoMsg<span class="token punctuation">.</span><span class="token function">getTransportOrderId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> info <span class="token operator">=</span> transportInfoMsg<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//查询机构信息</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> <span class="token string">&quot;$organId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">OrganDTO</span> organDTO <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>organFeign<span class="token punctuation">.</span><span class="token function">queryById</span><span class="token punctuation">(</span>organId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>organDTO <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            info <span class="token operator">=</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> <span class="token string">&quot;$organId&quot;</span><span class="token punctuation">,</span> organDTO<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//封装Detail对象</span>
        <span class="token class-name">TransportInfoDetail</span> infoDetail <span class="token operator">=</span> <span class="token class-name">TransportInfoDetail</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span>transportInfoMsg<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">created</span><span class="token punctuation">(</span>transportInfoMsg<span class="token punctuation">.</span><span class="token function">getCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//存储到MongoDB</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>transportInfoService<span class="token punctuation">.</span><span class="token function">saveOrUpdate</span><span class="token punctuation">(</span>transportOrderId<span class="token punctuation">,</span> infoDetail<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-4、测试" tabindex="-1"><a class="header-anchor" href="#_4-2-4、测试" aria-hidden="true">#</a> 4.2.4、测试</h3><p>此次测试通过发消息的方式进行，可以在RabbitMQ的管理界面中今天发送消息：<br><img src="`+r+'" alt="" loading="lazy"><br><img src="'+k+'" alt="" loading="lazy"><br> 结果：<br><img src="'+d+'" alt="" loading="lazy"></p><h1 id="_5、多级缓存解决方案" tabindex="-1"><a class="header-anchor" href="#_5、多级缓存解决方案" aria-hidden="true">#</a> 5、多级缓存解决方案</h1><p>目前我们已经实现了物流信息的保存、更新操作，基本功能已经了ok了，但是有个问题我们还没解决，就是前面提到的并发大的问题，一般而言，解决查询并发大的问题，常见的手段是为查询接口增加缓存，从而可以减轻持久层的压力。<br> 按照我们以往的经验，在查询接口中增加Redis缓存即可，将查询的结果数据存储到Redis中，执行查询时首先从Redis中命中，如果命中直接返回即可，没有命中查询MongoDB，将解决写入到Redis中。<br> 这样就解决问题了吗？其实并不是，试想一下，如果Redis宕机了或者是Redis中的数据大范围的失效，这样大量的并发压力就会进入持久层，会对持久层有较大的影响，甚至可能直接崩溃。<br> 如何解决该问题呢，可以通过多级缓存的解决方案来进行解决。</p><h2 id="_5-1、什么是多级缓存" tabindex="-1"><a class="header-anchor" href="#_5-1、什么是多级缓存" aria-hidden="true">#</a> 5.1、什么是多级缓存</h2><p><img src="'+m+'" alt="" loading="lazy"><br> 由上图可以看出，在用户的一次请求中，可以设置多个缓存以提升查询的性能，能够快速响应。</p><ul><li>浏览器的本地缓存</li><li>使用Nginx作为反向代理的架构时，可以启用Nginx的本地缓存，对于代理数据进行缓存</li><li>如果Nginx的本地缓存未命中，可以在Nginx中编写Lua脚本从Redis中命中数据</li><li>如果Redis依然没有命中的话，请求就会进入到Tomcat，也就是执行我们写的程序，在程序中可以设置进程级的缓存，如果命中直接返回即可。</li><li>如果进程级的缓存依然没有命中的话，请求才会进入到持久层查询数据。</li></ul><p>以上就是多级缓存的基本的设计思路，其核心思想就是让每一个请求节点尽可能的进行缓存操作。</p><div class="hint-container danger"><p class="hint-container-title">警告</p><p>🚨说明，由于我们没有学习过Lua脚本，所以我们将Redis的查询逻辑放到程序中进行，也就是我们将要在程序中实现二级缓存，分别是：JVM进程缓存和Redis缓存。</p></div><h2 id="_5-2、caffeine快速入门" tabindex="-1"><a class="header-anchor" href="#_5-2、caffeine快速入门" aria-hidden="true">#</a> 5.2、Caffeine快速入门</h2><p>Caffeine是一个基于Java8开发的，提供了近乎最佳命中率的高性能的本地缓存库，也就是可以通过Caffeine实现进程级的缓存。Spring内部的缓存使用的就是Caffeine。<br> Caffeine的性能非常强悍，下图是官方给出的性能对比：<br><img src="'+v+`" alt="" loading="lazy"></p><h3 id="_5-2-1、使用" tabindex="-1"><a class="header-anchor" href="#_5-2-1、使用" aria-hidden="true">#</a> 5.2.1、使用</h3><p>导入依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--jvm进程缓存--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.ben-manes.caffeine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>caffeine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基本使用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sl<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>info<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>benmanes<span class="token punctuation">.</span>caffeine<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">Cache</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>benmanes<span class="token punctuation">.</span>caffeine<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">Caffeine</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CaffeineTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCaffeine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建缓存对象</span>
        <span class="token class-name">Cache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> cache <span class="token operator">=</span> <span class="token class-name">Caffeine</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">initialCapacity</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">//缓存初始容量</span>
                <span class="token punctuation">.</span><span class="token function">maximumSize</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">//缓存最大容量</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//将数据存储缓存中</span>
        cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 从缓存中命中数据</span>
        <span class="token comment">// 参数一：缓存的key</span>
        <span class="token comment">// 参数二：Lambda表达式，表达式参数就是缓存的key，方法体是在未命中时执行</span>
        <span class="token comment">// 优先根据key查询进程缓存，如果未命中，则执行参数二的Lambda表达式，执行完成后会将结果写入到缓存中</span>
        <span class="token class-name">Object</span> value1 <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">,</span> key <span class="token operator">-&gt;</span> <span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//123</span>

        <span class="token class-name">Object</span> value2 <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;key2&quot;</span><span class="token punctuation">,</span> key <span class="token operator">-&gt;</span> <span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//456</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-2、驱逐策略" tabindex="-1"><a class="header-anchor" href="#_5-2-2、驱逐策略" aria-hidden="true">#</a> 5.2.2、驱逐策略</h3><p>Caffeine既然是缓存的一种，肯定需要有缓存的清除策略，不然的话内存总会有耗尽的时候。<br> Caffeine提供了三种缓存驱逐策略：</p><ul><li><strong>基于容量</strong>：设置缓存的数量上限</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 创建缓存对象</span>
<span class="token class-name">Cache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cache <span class="token operator">=</span> <span class="token class-name">Caffeine</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">maximumSize</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 设置缓存大小上限为 1，当缓存超出这个容量的时候，会使用Window TinyLfu策略来删除缓存。</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>基于时间</strong>：设置缓存的有效时间</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 创建缓存对象</span>
<span class="token class-name">Cache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cache <span class="token operator">=</span> <span class="token class-name">Caffeine</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 设置缓存有效期为 10 秒，从最后一次写入开始计时 </span>
    <span class="token punctuation">.</span><span class="token function">expireAfterWrite</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>基于引用</strong>：设置缓存为软引用或弱引用，利用GC来回收缓存数据。性能较差，不建议使用。</li></ul><div class="hint-container danger"><p class="hint-container-title">警告</p><p>**🚨注意：**在默认情况下，当一个缓存元素过期的时候，Caffeine不会自动立即将其清理和驱逐。而是在一次读或写操作后，或者在空闲时间完成对失效数据的驱逐。</p></div><h2 id="_5-3、一级缓存" tabindex="-1"><a class="header-anchor" href="#_5-3、一级缓存" aria-hidden="true">#</a> 5.3、一级缓存</h2><p>下面我们通过增加Caffeine实现一级缓存，主要是在 <code>com.sl.transport.info.controller.TransportInfoController</code> 中实现缓存逻辑。</p><h3 id="_5-3-1、caffeine配置" tabindex="-1"><a class="header-anchor" href="#_5-3-1、caffeine配置" aria-hidden="true">#</a> 5.3.1、Caffeine配置</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sl<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>info<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>benmanes<span class="token punctuation">.</span>caffeine<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">Cache</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>benmanes<span class="token punctuation">.</span>caffeine<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">Caffeine</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sl<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>info<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">TransportInfoDTO</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Caffeine缓存配置
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CaffeineConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${caffeine.init}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> init<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${caffeine.max}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> max<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Cache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">TransportInfoDTO</span><span class="token punctuation">&gt;</span></span> <span class="token function">transportInfoCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Caffeine</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">initialCapacity</span><span class="token punctuation">(</span>init<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">maximumSize</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体的配置项在Nacos中的配置中心的<code>sl-express-ms-transport-info.properties</code>中：<br><img src="`+b+`" alt="" loading="lazy"></p><h3 id="_5-3-2、实现缓存逻辑" tabindex="-1"><a class="header-anchor" href="#_5-3-2、实现缓存逻辑" aria-hidden="true">#</a> 5.3.2、实现缓存逻辑</h3><p>在<code>com.sl.transport.info.controller.TransportInfoController</code>中进行数据的命中，如果命中直接返回，没有命中查询MongoDB。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 根据运单id查询运单信息
     *
     * <span class="token keyword">@param</span> <span class="token parameter">transportOrderId</span> 运单号
     * <span class="token keyword">@return</span> 运单信息
     */</span>
    <span class="token annotation punctuation">@ApiImplicitParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;transportOrderId&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;运单id&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;查询&quot;</span><span class="token punctuation">,</span> notes <span class="token operator">=</span> <span class="token string">&quot;根据运单id查询物流信息&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;{transportOrderId}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">TransportInfoDTO</span> <span class="token function">queryByTransportOrderId</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;transportOrderId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> transportOrderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">TransportInfoDTO</span> transportInfoDTO <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>transportInfoCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>transportOrderId<span class="token punctuation">,</span> s <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">TransportInfoEntity</span> transportInfoEntity <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>transportInfoService<span class="token punctuation">.</span><span class="token function">queryByTransportOrderId</span><span class="token punctuation">(</span>transportOrderId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">toBean</span><span class="token punctuation">(</span>transportInfoEntity<span class="token punctuation">,</span> <span class="token class-name">TransportInfoDTO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>transportInfoDTO<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> transportInfoDTO<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SLException</span><span class="token punctuation">(</span><span class="token class-name">ExceptionEnum</span><span class="token punctuation">.</span><span class="token constant">NOT_FOUND</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-3、测试" tabindex="-1"><a class="header-anchor" href="#_5-3-3、测试" aria-hidden="true">#</a> 5.3.3、测试</h3><p>未命中场景：<br><img src="`+g+'" alt="" loading="lazy"><br> 已命中：<br><img src="'+f+'" alt="" loading="lazy"><br> 响应结果：<br><img src="'+h+`" alt="" loading="lazy"></p><h2 id="_5-4、二级缓存" tabindex="-1"><a class="header-anchor" href="#_5-4、二级缓存" aria-hidden="true">#</a> 5.4、二级缓存</h2><p>二级缓存通过Redis的存储实现，这里我们使用Spring Cache进行缓存数据的存储和读取。</p><h3 id="_5-4-1、redis配置" tabindex="-1"><a class="header-anchor" href="#_5-4-1、redis配置" aria-hidden="true">#</a> 5.4.1、Redis配置</h3><p>Spring Cache默认是采用jdk的对象序列化方式，这种方式比较占用空间而且性能差，所以往往会将值以json的方式存储，此时就需要对RedisCacheManager进行自定义的配置。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sl<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>info<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">RedisCacheConfiguration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">RedisCacheManager</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">GenericJackson2JsonRedisSerializer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">RedisSerializationContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">StringRedisSerializer</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Duration</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Redis相关的配置
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 存储的默认有效期时间，单位：小时
     */</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${redis.ttl:1}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> redisTtl<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">RedisCacheManager</span> <span class="token function">redisCacheManager</span><span class="token punctuation">(</span><span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 默认配置</span>
        <span class="token class-name">RedisCacheConfiguration</span> defaultCacheConfiguration <span class="token operator">=</span> <span class="token class-name">RedisCacheConfiguration</span><span class="token punctuation">.</span><span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">// 设置key的序列化方式为字符串</span>
                <span class="token punctuation">.</span><span class="token function">serializeKeysWith</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializationContext<span class="token punctuation">.</span>SerializationPair</span><span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">// 设置value的序列化方式为json格式</span>
                <span class="token punctuation">.</span><span class="token function">serializeValuesWith</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializationContext<span class="token punctuation">.</span>SerializationPair</span><span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">disableCachingNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 不缓存null</span>
                <span class="token punctuation">.</span><span class="token function">entryTtl</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofHours</span><span class="token punctuation">(</span>redisTtl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 默认缓存数据保存1小时</span>

        <span class="token comment">// 构redis缓存管理器</span>
        <span class="token class-name">RedisCacheManager</span> redisCacheManager <span class="token operator">=</span> <span class="token class-name">RedisCacheManager<span class="token punctuation">.</span>RedisCacheManagerBuilder</span>
                <span class="token punctuation">.</span><span class="token function">fromConnectionFactory</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">getConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">cacheDefaults</span><span class="token punctuation">(</span>defaultCacheConfiguration<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">transactionAware</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 只在事务成功提交后才会进行缓存的put/evict操作</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> redisCacheManager<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-4-2、缓存注解" tabindex="-1"><a class="header-anchor" href="#_5-4-2、缓存注解" aria-hidden="true">#</a> 5.4.2、缓存注解</h3><p>接下来需要在Service中增加SpringCache的注解，确保数据可以保存、更新数据到Redis。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;transport-info&quot;</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">&quot;#p0&quot;</span><span class="token punctuation">)</span> <span class="token comment">//更新缓存数据</span>
    <span class="token keyword">public</span> <span class="token class-name">TransportInfoEntity</span> <span class="token function">saveOrUpdate</span><span class="token punctuation">(</span><span class="token class-name">String</span> transportOrderId<span class="token punctuation">,</span> <span class="token class-name">TransportInfoDetail</span> infoDetail<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//省略代码</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;transport-info&quot;</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">&quot;#p0&quot;</span><span class="token punctuation">)</span> <span class="token comment">//新增缓存数据</span>
    <span class="token keyword">public</span> <span class="token class-name">TransportInfoEntity</span> <span class="token function">queryByTransportOrderId</span><span class="token punctuation">(</span><span class="token class-name">String</span> transportOrderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment">//省略代码</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-4-3、测试" tabindex="-1"><a class="header-anchor" href="#_5-4-3、测试" aria-hidden="true">#</a> 5.4.3、测试</h3><p>重启服务，进行功能测试，发现数据可以正常写入到Redis中，并且查询时二级缓存已经生效。<br><img src="`+y+`" alt="" loading="lazy"><br> 到这里，已经完成了一级和二级缓存的逻辑。</p><h2 id="_5-5、一级缓存更新的问题" tabindex="-1"><a class="header-anchor" href="#_5-5、一级缓存更新的问题" aria-hidden="true">#</a> 5.5、一级缓存更新的问题</h2><p>更新物流信息时，只是更新了Redis中的数据，并没有更新Caffeine中的数据，需要在更新数据时将Caffeine中相应的数据删除。<br> 具体实现如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">Cache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">TransportInfoDTO</span><span class="token punctuation">&gt;</span></span> transportInfoCache<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;transport-info&quot;</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">&quot;#p0&quot;</span><span class="token punctuation">)</span> <span class="token comment">//更新缓存数据</span>
    <span class="token keyword">public</span> <span class="token class-name">TransportInfoEntity</span> <span class="token function">saveOrUpdate</span><span class="token punctuation">(</span><span class="token class-name">String</span> transportOrderId<span class="token punctuation">,</span> <span class="token class-name">TransportInfoDetail</span> infoDetail<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//省略代码</span>

        <span class="token comment">//清除缓存中的数据</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>transportInfoCache<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span>transportOrderId<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//保存/更新到MongoDB</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mongoTemplate<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>transportInfoEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样的话就可以删除Caffeine中的数据，也就意味着下次查询时会从二级缓存中查询到数据，再存储到Caffeine中。</p><h2 id="_5-6、分布式场景下的问题" tabindex="-1"><a class="header-anchor" href="#_5-6、分布式场景下的问题" aria-hidden="true">#</a> 5.6、分布式场景下的问题</h2><h3 id="_5-6-1、问题分析" tabindex="-1"><a class="header-anchor" href="#_5-6-1、问题分析" aria-hidden="true">#</a> 5.6.1、问题分析</h3><p>通过前面的解决，视乎可以完成一级、二级缓存中数据的同步，如果在单节点项目中是没有问题的，但是，在分布式场景下是有问题的，看下图：<br><img src="`+w+'" alt="" loading="lazy"><br> 说明：</p><ul><li>部署了2个transport-info微服务节点，每个微服务都有自己进程级的一级缓存，都共享同一个Redis作为二级缓存</li><li>假设，所有节点的一级和二级缓存都是空的，此时，用户通过节点1查询运单物流信息，在完成后，节点1的caffeine和Redis中都会有数据</li><li>接着，系统通过节点2更新了物流数据，此时节点2中的caffeine和Redis都是更新后的数据</li><li>用户还是进行查询动作，依然是通过节点1查询，此时查询到的将是旧的数据，也就是出现了一级缓存与二级缓存之间的数据不一致的问题</li></ul><h3 id="_5-6-2、问题解决" tabindex="-1"><a class="header-anchor" href="#_5-6-2、问题解决" aria-hidden="true">#</a> 5.6.2、问题解决</h3><p>如何解决该问题呢？可以通过消息的方式解决，就是任意一个节点数据更新了数据，发个消息出来，通知其他节点，其他节点接收到消息后，将自己caffeine中相应的数据删除即可。<br> 关于消息的实现，可以采用RabbitMQ，也可以采用Redis的消息订阅发布来实现，在这里为了应用技术的多样化，所以采用Redis的订阅发布来实现。<br><img src="'+_+'" alt="" loading="lazy"></p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。<br><img src="'+C+`" alt="" loading="lazy"><br> 当有新消息通过 publish 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端。<br> Redis的订阅发布功能与传统的消息中间件（如：RabbitMQ）相比，相对轻量一些，针对数据准确和安全性要求没有那么高的场景可以直接使用。</p></div><p>在<code>com.sl.transport.info.config.RedisConfig</code>增加订阅的配置：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">CHANNEL_TOPIC</span> <span class="token operator">=</span> <span class="token string">&quot;sl-express-ms-transport-info-caffeine&quot;</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 配置订阅，用于解决Caffeine一致性的问题
     *
     * <span class="token keyword">@param</span> <span class="token parameter">connectionFactory</span> 链接工厂
     * <span class="token keyword">@param</span> <span class="token parameter">listenerAdapter</span> 消息监听器
     * <span class="token keyword">@return</span> 消息监听容器
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">RedisMessageListenerContainer</span> <span class="token function">container</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> connectionFactory<span class="token punctuation">,</span>
                                                   <span class="token class-name">MessageListenerAdapter</span> listenerAdapter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">RedisMessageListenerContainer</span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisMessageListenerContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        container<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        container<span class="token punctuation">.</span><span class="token function">addMessageListener</span><span class="token punctuation">(</span>listenerAdapter<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ChannelTopic</span><span class="token punctuation">(</span><span class="token constant">CHANNEL_TOPIC</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> container<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写<code>RedisMessageListener</code>用于监听消息，删除caffeine中的数据。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sl<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>info<span class="token punctuation">.</span>mq</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>convert<span class="token punctuation">.</span></span><span class="token class-name">Convert</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>benmanes<span class="token punctuation">.</span>caffeine<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">Cache</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sl<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>info<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">TransportInfoDTO</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span></span><span class="token class-name">Message</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>listener<span class="token punctuation">.</span>adapter<span class="token punctuation">.</span></span><span class="token class-name">MessageListenerAdapter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * redis消息监听，解决Caffeine一致性的问题
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisMessageListener</span> <span class="token keyword">extends</span> <span class="token class-name">MessageListenerAdapter</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">Cache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">TransportInfoDTO</span><span class="token punctuation">&gt;</span></span> transportInfoCache<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pattern<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//获取到消息中的运单id</span>
        <span class="token class-name">String</span> transportOrderId <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">toStr</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//将本jvm中的缓存删除掉</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>transportInfoCache<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span>transportOrderId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更新数据后发送消息：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;transport-info&quot;</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">&quot;#p0&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">TransportInfoEntity</span> <span class="token function">saveOrUpdate</span><span class="token punctuation">(</span><span class="token class-name">String</span> transportOrderId<span class="token punctuation">,</span> <span class="token class-name">TransportInfoDetail</span> infoDetail<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">//省略代码</span>

        <span class="token comment">//清除缓存中的数据</span>
        <span class="token comment">// this.transportInfoCache.invalidate(transportOrderId);</span>
        <span class="token comment">//发布订阅消息到redis</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>stringRedisTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token class-name">RedisConfig</span><span class="token punctuation">.</span><span class="token constant">CHANNEL_TOPIC</span><span class="token punctuation">,</span> transportOrderId<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//保存/更新到MongoDB</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mongoTemplate<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>transportInfoEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-6-3、测试" tabindex="-1"><a class="header-anchor" href="#_5-6-3、测试" aria-hidden="true">#</a> 5.6.3、测试</h3><p>测试时，需要启动2个相同的微服务，但是端口不能重复，需要设置不同的端口：<br><img src="`+I+'" alt="" loading="lazy"><br> 通过测试，发现可以接收到Redis订阅的消息：<br><img src="'+q+'" alt="" loading="lazy"><br> 最终可以解决多级缓存间的一致性的问题。</p><h1 id="_6、redis的缓存问题" tabindex="-1"><a class="header-anchor" href="#_6、redis的缓存问题" aria-hidden="true">#</a> 6、Redis的缓存问题</h1><p>在使用Redis时，在高并发场景下会出现一些问题，常见的问题有：缓存击穿、缓存雪崩、缓存穿透，这三个问题也是面试时的高频问题。</p><h2 id="_6-1、缓存击穿" tabindex="-1"><a class="header-anchor" href="#_6-1、缓存击穿" aria-hidden="true">#</a> 6.1、缓存击穿</h2><h3 id="_6-1-1、说明" tabindex="-1"><a class="header-anchor" href="#_6-1-1、说明" aria-hidden="true">#</a> 6.1.1、说明</h3><p>缓存击穿是指，某一热点数据存储到redis中，该数据处于高并发场景下，如果此时该key过期失效，这样就会有大量的并发请求进入到数据库，对数据库产生大的压力，甚至会压垮数据库。</p><h3 id="_6-1-2、解决方案" tabindex="-1"><a class="header-anchor" href="#_6-1-2、解决方案" aria-hidden="true">#</a> 6.1.2、解决方案</h3><p>针对于缓存击穿这种情况，常见的解决方案有两种：</p><ul><li>热数据不设置过期时间</li><li>使用互斥锁，可以使用redisson的分布式锁实现，就是从redis中查询不到数据时，不要立刻去查数据库，而是先获取锁，获取到锁后再去查询数据库，而其他未获取到锁的请求进行重试，这样就可以确保只有一个查询数据库并且更新缓存的请求。<br><img src="'+T+'" alt="" loading="lazy"></li></ul><h3 id="_6-1-3、实现" tabindex="-1"><a class="header-anchor" href="#_6-1-3、实现" aria-hidden="true">#</a> 6.1.3、实现</h3><p>在物流信息场景中，不涉及到此类问题，一般用户只会关注自己的运单信息，而不是并发的查询一个运单信息，所以该问题我们就暂不做实现，但是此类问题的解决方案的思想要学会。<br> 当然了，防止有人恶意根据运单号查询，可以通过设置验证码的方式进行，如下（韵达快递官网）：<br><img src="'+R+`" alt="" loading="lazy"></p><h2 id="_6-2、缓存雪崩" tabindex="-1"><a class="header-anchor" href="#_6-2、缓存雪崩" aria-hidden="true">#</a> 6.2、缓存雪崩</h2><h3 id="_6-2-1、说明" tabindex="-1"><a class="header-anchor" href="#_6-2-1、说明" aria-hidden="true">#</a> 6.2.1、说明</h3><p>缓存雪崩的情况往往是由两种情况产生：</p><ul><li>情况1：由于大量 key 设置了相同的过期时间（数据在缓存和数据库都存在），一旦到达过期时间点，这些 key 集体失效，造成访问这些 key 的请求全部进入数据库。</li><li>情况2：Redis 实例宕机，大量请求进入数据库</li></ul><h3 id="_6-2-2、解决方案" tabindex="-1"><a class="header-anchor" href="#_6-2-2、解决方案" aria-hidden="true">#</a> 6.2.2、解决方案</h3><p>针对于雪崩问题，可以分情况进行解决：</p><ul><li>情况1的解决方案 <ul><li>错开过期时间：在过期时间上加上随机值（比如 1~5 分钟）</li><li>服务降级：暂停非核心数据查询缓存，返回预定义信息（错误页面，空值等）</li></ul></li><li>情况2的解决方案 <ul><li>事前预防：搭建高可用集群</li><li>构建多级缓存，实现成本稍高</li><li>熔断：通过监控一旦雪崩出现，暂停缓存访问待实例恢复，返回预定义信息（有损方案）</li><li>限流：通过监控一旦发现数据库访问量超过阈值，限制访问数据库的请求数（有损方案）</li></ul></li></ul><h3 id="_6-2-3、实现" tabindex="-1"><a class="header-anchor" href="#_6-2-3、实现" aria-hidden="true">#</a> 6.2.3、实现</h3><p>我们将针对【情况1】的解决方案进行实现，主要是在默认的时间基础上随机增加1-10分钟有效期时间。<br> 需要注意的是，使用SpringCache的<code>@Cacheable</code>注解是无法指定有效时间的，所以需要自定义<code>RedisCacheManager</code>对有效期时间进行随机设置。<br> 自定义<code>RedisCacheManager</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sl<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>info<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ObjectUtil</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">RandomUtil</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">RedisCache</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">RedisCacheConfiguration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">RedisCacheManager</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">RedisCacheWriter</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Duration</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 自定义CacheManager，用于设置不同的过期时间，防止雪崩问题的发生
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRedisCacheManager</span> <span class="token keyword">extends</span> <span class="token class-name">RedisCacheManager</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">MyRedisCacheManager</span><span class="token punctuation">(</span><span class="token class-name">RedisCacheWriter</span> cacheWriter<span class="token punctuation">,</span> <span class="token class-name">RedisCacheConfiguration</span> defaultCacheConfiguration<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>cacheWriter<span class="token punctuation">,</span> defaultCacheConfiguration<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">RedisCache</span> <span class="token function">createRedisCache</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">RedisCacheConfiguration</span> cacheConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//获取到原有过期时间</span>
        <span class="token class-name">Duration</span> duration <span class="token operator">=</span> cacheConfig<span class="token punctuation">.</span><span class="token function">getTtl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>duration<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//在原有时间上随机增加1~10分钟</span>
            <span class="token class-name">Duration</span> newDuration <span class="token operator">=</span> duration<span class="token punctuation">.</span><span class="token function">plusMinutes</span><span class="token punctuation">(</span><span class="token class-name">RandomUtil</span><span class="token punctuation">.</span><span class="token function">randomInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            cacheConfig <span class="token operator">=</span> cacheConfig<span class="token punctuation">.</span><span class="token function">entryTtl</span><span class="token punctuation">(</span>newDuration<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">createRedisCache</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> cacheConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>MyRedisCacheManager</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">RedisCacheManager</span> <span class="token function">redisCacheManager</span><span class="token punctuation">(</span><span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 默认配置</span>
        <span class="token class-name">RedisCacheConfiguration</span> defaultCacheConfiguration <span class="token operator">=</span> <span class="token class-name">RedisCacheConfiguration</span><span class="token punctuation">.</span><span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">// 设置key的序列化方式为字符串</span>
                <span class="token punctuation">.</span><span class="token function">serializeKeysWith</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializationContext<span class="token punctuation">.</span>SerializationPair</span><span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">// 设置value的序列化方式为json格式</span>
                <span class="token punctuation">.</span><span class="token function">serializeValuesWith</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializationContext<span class="token punctuation">.</span>SerializationPair</span><span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">disableCachingNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 不缓存null</span>
                <span class="token punctuation">.</span><span class="token function">entryTtl</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofHours</span><span class="token punctuation">(</span>redisTtl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 默认缓存数据保存1小时</span>

        <span class="token comment">// 构redis缓存管理器</span>
        <span class="token comment">// RedisCacheManager redisCacheManager = RedisCacheManager.RedisCacheManagerBuilder</span>
        <span class="token comment">//         .fromConnectionFactory(redisTemplate.getConnectionFactory())</span>
        <span class="token comment">//         .cacheDefaults(defaultCacheConfiguration)</span>
        <span class="token comment">//         .transactionAware()</span>
        <span class="token comment">//         .build();</span>

        <span class="token comment">//使用自定义缓存管理器</span>
        <span class="token class-name">RedisCacheWriter</span> redisCacheWriter <span class="token operator">=</span> <span class="token class-name">RedisCacheWriter</span><span class="token punctuation">.</span><span class="token function">nonLockingRedisCacheWriter</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">getConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MyRedisCacheManager</span> myRedisCacheManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRedisCacheManager</span><span class="token punctuation">(</span>redisCacheWriter<span class="token punctuation">,</span> defaultCacheConfiguration<span class="token punctuation">)</span><span class="token punctuation">;</span>
        myRedisCacheManager<span class="token punctuation">.</span><span class="token function">setTransactionAware</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 只在事务成功提交后才会进行缓存的put/evict操作</span>
        <span class="token keyword">return</span> myRedisCacheManager<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-4、测试" tabindex="-1"><a class="header-anchor" href="#_6-2-4、测试" aria-hidden="true">#</a> 6.2.4、测试</h3><p><img src="`+O+'" alt="" loading="lazy"><br><img src="'+S+'" alt="" loading="lazy"></p><h2 id="_6-3、缓存穿透" tabindex="-1"><a class="header-anchor" href="#_6-3、缓存穿透" aria-hidden="true">#</a> 6.3、缓存穿透</h2><h3 id="_6-3-1、说明" tabindex="-1"><a class="header-anchor" href="#_6-3-1、说明" aria-hidden="true">#</a> 6.3.1、说明</h3><p>缓存穿透是指，如果一个 key 在缓存和数据库都不存在，那么访问这个 key 每次都会进入数据库</p><ul><li>很可能被恶意请求利用</li><li>缓存雪崩与缓存击穿都是数据库中有，但缓存暂时缺失</li><li>缓存雪崩与缓存击穿都能自然恢复，但缓存穿透则不能</li></ul><h3 id="_6-3-2、解决方案" tabindex="-1"><a class="header-anchor" href="#_6-3-2、解决方案" aria-hidden="true">#</a> 6.3.2、解决方案</h3><p>针对缓存穿透，一般有两种解决方案，分别是：</p><ul><li>如果数据库没有，也将此不存在的 key 关联 null 值放入缓存，缺点是这样的 key 没有任何业务作用，白占空间</li><li>采用BloomFilter（布隆过滤器）解决，基本思路就是将存在数据的哈希值存储到一个足够大的Bitmap（Bit为单位存储数据，可以大大节省存储空间）中，在查询redis时，先查询布隆过滤器，如果数据不存在直接返回即可，如果存在的话，再执行缓存中命中、数据库查询等操作。</li></ul><h3 id="_6-3-3、布隆过滤器" tabindex="-1"><a class="header-anchor" href="#_6-3-3、布隆过滤器" aria-hidden="true">#</a> 6.3.3、布隆过滤器</h3><p>布隆过滤器（Bloom Filter）是1970年由布隆提出的，它实际上是一个很长的二进制向量和一系列随机映射函数，既然是二进制，那存储的数据不是0就是1，默认是0。<br> 可以把它看作是这样的：<br><img src="'+x+'" alt="" loading="lazy"><br> 需要将数据存入隆过滤器中，才能判断是否存在，存入时要通过哈希算法计算数据的哈希值，通过哈希值确定存储都哪个位置。如下：<br><img src="'+j+'" alt="" loading="lazy"></p><div class="hint-container danger"><p class="hint-container-title">警告</p><p>说明：数据hello通过哈希算法计算哈希值，假设得到的值为8，这个值就是存储到布隆过滤器下标值。</p></div><p>如何判断数据存在或者不存在呢？和存储道理一样，假设判断【java】数据是否存在，首先通过哈希算法计算哈希值，通过下标判断值是0还是1，如果是0就不存在，1就存在。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>看到这里，你一定会有这样的疑问，不同的数据经过哈希算法计算，可能会得到相同的值，也就是，【张三】和【王五】可能会得到相同的hash值，会在同一个位置标记为1，这样的话，1个位置可能会代表多个数据，也就是会出现误判，没错，这个就是布隆过滤器最大的一个缺点，也是不可避免的特性。正因为这个特性，所以布隆过滤器基本是不能做删除动作的。</p></div><p>这里可以得出一个结论，使用布隆过滤器能够判断一定不存在，而不能用来判断一定存在。<br> 布隆过滤器虽然不能完全避免误判，但是可以降低误判率，如何降低误判率呢？就是增加多个哈希算法，计算多个hash值，因为不同的值，经过多个哈希算法计算得到相同值的概率要低一些。<br><img src="'+M+`" alt="" loading="lazy"></p><div class="hint-container danger"><p class="hint-container-title">警告</p><p>说明：可以看到，【hello】值经过3个哈希算法（实际不止3个）会计算出3个值，分别以这些值为坐标，标记数据为1，当判断值存在时，同样要经过这3个哈希算法计算3个哈希值，对应的都为1说明数据可能存在，如果其中有一个为0，就说明数据一定不存在。<br> 在这里也能看出布隆过滤器的另外一个特性，哈希算法越多，误判率越低，但是所占用的空间越多，查询效率将越低。</p></div><p>总结下布隆过滤器的优缺点：</p><ul><li>优点 <ul><li>存储的二进制数据，1或0，不存储真实数据，空间占用比较小且安全。</li><li>插入和查询速度非常快，因为是基于数组下标的，类似HashMap，其时间复杂度是O（K），其中k是指哈希算法个数。</li></ul></li><li>缺点 <ul><li>存在误判，可以通过增加哈希算法个数降低误判率，不能完全避免误判。</li><li>删除困难，因为一个位置可能会代表多个值，不能做删除。</li></ul></li></ul><p>牢记结论：布隆过滤器能够判断一定不存在，而不能用来判断一定存在。</p><h3 id="_6-3-4、实现" tabindex="-1"><a class="header-anchor" href="#_6-3-4、实现" aria-hidden="true">#</a> 6.3.4、实现</h3><p>关于布隆过滤器的使用，建议使用Google的Guava 或 Redission基于Redis实现，前者是在单体架构下比较适合，后者更适合在分布式场景下，便于多个服务节点之间共享。<br> Redission基于Redis，使用string类型数据，生成二进制数组进行存储，最大可用长度为：4294967294。<br> 引入Redission依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>导入Redission的配置：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sl<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>info<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>convert<span class="token punctuation">.</span></span><span class="token class-name">Convert</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">StrUtil</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>redisson<span class="token punctuation">.</span></span><span class="token class-name">Redisson</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>redisson<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">RedissonClient</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>redisson<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">Config</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>redisson<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">SingleServerConfig</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span></span><span class="token class-name">RedisProperties</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedissonConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">RedisProperties</span> redisProperties<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">RedissonClient</span> <span class="token function">redissonSingle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SingleServerConfig</span> serverConfig <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">useSingleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">&quot;redis://&quot;</span> <span class="token operator">+</span> redisProperties<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> redisProperties<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> <span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            serverConfig<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            serverConfig<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">Redisson</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自定义布隆过滤器配置：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sl<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>info<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Getter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 布隆过滤器相关配置
 */</span>
<span class="token annotation punctuation">@Getter</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BloomFilterConfig</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 名称，默认：sl-bloom-filter
     */</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${bloom.name:sl-bloom-filter}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 布隆过滤器长度，最大支持Integer.MAX_VALUE*2，即：4294967294，默认：1千万
     */</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${bloom.expectedInsertions:10000000}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> expectedInsertions<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 误判率，默认：0.05
     */</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${bloom.falseProbability:0.05d}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> falseProbability<span class="token punctuation">;</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义<code>BloomFilterService</code>接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sl<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>info<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 布隆过滤器服务
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BloomFilterService</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 初始化布隆过滤器
     */</span>
    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 向布隆过滤器中添加数据
     *
     * <span class="token keyword">@param</span> <span class="token parameter">obj</span> 待添加的数据
     * <span class="token keyword">@return</span> 是否成功
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 判断数据是否存在
     *
     * <span class="token keyword">@param</span> <span class="token parameter">obj</span> 数据
     * <span class="token keyword">@return</span> 是否存在
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写实现类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sl<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>info<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sl<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>info<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">BloomFilterConfig</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sl<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>info<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">BloomFilterService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>redisson<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">RBloomFilter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>redisson<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">RedissonClient</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostConstruct</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BloomFilterServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BloomFilterService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">RedissonClient</span> redissonClient<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">BloomFilterConfig</span> bloomFilterConfig<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">RBloomFilter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">getBloomFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>redissonClient<span class="token punctuation">.</span><span class="token function">getBloomFilter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bloomFilterConfig<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@PostConstruct</span> <span class="token comment">// spring启动后进行初始化</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">RBloomFilter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> bloomFilter <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBloomFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bloomFilter<span class="token punctuation">.</span><span class="token function">tryInit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bloomFilterConfig<span class="token punctuation">.</span><span class="token function">getExpectedInsertions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bloomFilterConfig<span class="token punctuation">.</span><span class="token function">getFalseProbability</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBloomFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBloomFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>改造TransportInfoController的查询逻辑，如果布隆过滤器中不存在直接返回即可，无需进行缓存命中。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@ApiImplicitParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;transportOrderId&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;运单id&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;查询&quot;</span><span class="token punctuation">,</span> notes <span class="token operator">=</span> <span class="token string">&quot;根据运单id查询物流信息&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;{transportOrderId}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">TransportInfoDTO</span> <span class="token function">queryByTransportOrderId</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;transportOrderId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> transportOrderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//如果布隆过滤器中不存在，无需缓存命中，直接返回即可</span>
        <span class="token keyword">boolean</span> contains <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bloomFilterService<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>transportOrderId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>contains<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SLException</span><span class="token punctuation">(</span><span class="token class-name">ExceptionEnum</span><span class="token punctuation">.</span><span class="token constant">NOT_FOUND</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">TransportInfoDTO</span> transportInfoDTO <span class="token operator">=</span> transportInfoCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>transportOrderId<span class="token punctuation">,</span> id <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">//未命中，查询MongoDB</span>
            <span class="token class-name">TransportInfoEntity</span> transportInfoEntity <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>transportInfoService<span class="token punctuation">.</span><span class="token function">queryByTransportOrderId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//转化成DTO</span>
            <span class="token keyword">return</span> <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">toBean</span><span class="token punctuation">(</span>transportInfoEntity<span class="token punctuation">,</span> <span class="token class-name">TransportInfoDTO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>transportInfoDTO<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> transportInfoDTO<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SLException</span><span class="token punctuation">(</span><span class="token class-name">ExceptionEnum</span><span class="token punctuation">.</span><span class="token constant">NOT_FOUND</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>改造<code>com.sl.transport.info.service.impl.TransportInfoServiceImpl#saveOrUpdate()</code>方法，将新增的运单数据写入到布隆过滤器中：<br><img src="`+E+'" alt="" loading="lazy"></p><div class="hint-container danger"><p class="hint-container-title">警告</p><p>可见，通过布隆过滤器可以解决缓存穿透的问题，还有一点需要注意，如果有存在的数据没有写入都布隆过滤器中就会导致查询不到真实存在的数据。</p></div><h1 id="_7、练习" tabindex="-1"><a class="header-anchor" href="#_7、练习" aria-hidden="true">#</a> 7、练习</h1><h2 id="_7-1、练习1" tabindex="-1"><a class="header-anchor" href="#_7-1、练习1" aria-hidden="true">#</a> 7.1、练习1</h2><p>难度系数：★★★★☆<br> 描述：在work微服务中完成发送【物流信息】的消息的逻辑，这样的话，work微服务就和transport-info微服务联系起来了。<br> 提示，一共有4处代码需要完善：</p><ul><li>com.sl.ms.work.mq.CourierMQListener#listenCourierPickupMsg()</li><li>com.sl.ms.work.service.impl.PickupDispatchTaskServiceImpl#saveTaskPickupDispatch() <ul><li>此处实现难度较大，会涉及到基础服务系统消息模块，需要阅读相应的代码进行理解。</li></ul></li><li>com.sl.ms.work.service.impl.TransportOrderServiceImpl#updateStatus()</li><li>com.sl.ms.work.service.impl.TransportOrderServiceImpl#updateByTaskId()</li></ul><div class="hint-container danger"><p class="hint-container-title">警告</p><p>另外，包裹的签收与拒收的消息已经在【快递员微服务】中实现，学生可自行阅读源码：</p><ul><li>com.sl.ms.web.courier.service.impl.TaskServiceImpl#sign()</li><li>com.sl.ms.web.courier.service.impl.TaskServiceImpl#reject()</li></ul></div><h1 id="_8、面试连环问" tabindex="-1"><a class="header-anchor" href="#_8、面试连环问" aria-hidden="true">#</a> 8、面试连环问</h1><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>面试官问：</p><ul><li>你们项目中的物流信息那块存储是怎么做的？为什么要选择MongoDB？</li><li>针对于查询并发高的问题你们是怎么解决的？有用多级缓存吗？具体是怎么用的？</li><li>多级缓存间的数据不一致是如何解决的？</li><li>来，说说在使用Redis场景中的缓存击穿、缓存雪崩、缓存穿透都是啥意思？对应的解决方案是啥？实际你解决过哪个问题？</li><li>说说布隆过滤器的优缺点是什么？什么样的场景适合使用布隆过滤器？</li></ul></div>',174),B=[D];function N(z,A){return s(),a("div",null,B)}const P=n(L,[["render",N],["__file","day11-物流信息微服务.html.vue"]]);export{P as default};
