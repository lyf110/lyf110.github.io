import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as l,c,a as n,b as a,d as e,e as t}from"./app-5f6064b2.js";const o="/assets/1564705879296-e35209ff.png",u="/assets/1563174971237-dea08eb2.png",r="/assets/1563183555286-a9af535b.png",d="/assets/1563175855992-c297668b.png",k="/assets/1563179772218-0d0d9f48.png",g="/assets/1563179902935-525509b7.png",v="/assets/1563180492994-7d258223.png",m="/assets/1563180539475-2b964db2.png",b="/assets/1563177009476-6bac326a.png",h="/assets/1563180113790-ab9f2934.png",f="/assets/1563180237909-058de2d3.png",y="/assets/1563181447217-d4a7db05.png",_="/assets/1563181784611-8a2ba6dd.png",x="/assets/1563181958556-fdbf08ef.png",w="/assets/1563182409461-18ad735f.png",I="/assets/1563182773889-ab297ebe.png",S="/assets/1563184636038-8d835322.png",C="/assets/1563184720423-5cf45e5f.png",F="/assets/1563263071310-534ea0ce.png",z="/assets/1563185890858-9c7264d2.png",P="/assets/1563186263700-abbf3554.png",A="/assets/1563187551870-1c6f42bc.png",R="/assets/1563188159621-da910e7c.png",q="/assets/1563188379721-5316e967.png",G="/assets/1563263330304-6f1b08f9.png",E="/assets/1563263375300-1db6311d.png",B="/assets/1563263584830-04844e09.png",U="/assets/1563264411000-861c0ee8.png",j="/assets/1563264375857-36778952.png",T="/assets/1563266971454-893c6d31.png",H="/assets/1563266992208-daf62e4a.png",M="/assets/1563266521280-e66c7aa4.png",O="/assets/1563267864789-4fe7793e.png",D="/assets/1563268861501-bae69ccd.png",N="/assets/1563271204828-f3229fbc.png",V="/assets/1563271441821-06309ed1.png",Z="/assets/1563270539576-049283d8.png",L="/assets/1563271532127-cc55ae18.png",Q="/assets/1563271699236-d2782f08.png",W="/assets/1563277019189-85104411.png",X="/assets/1563276977390-38a1c1e1.png",J="/assets/1563276659056-dcb24976.png",K="/assets/1563276502219-d409a7ba.png",Y="/assets/1563341945823-79dfb6a5.png",$="/assets/1563342280083-8c96c39e.png",nn="/assets/1563342582596-22a00696.png",an="/assets/1563343068548-6930dcf1.png",sn="/assets/1563343198348-12baa4cd.png",en="/assets/1563343333982-800658a1.png",tn="/assets/1563344003017-76274dc4.png",pn="/assets/1563344302139-bcab384e.png",ln="/assets/1563344594304-30dac4c8.png",cn="/assets/1563345502299-a5f3a3d9.png",on="/assets/1563346244241-410a7c93.png",un="/assets/1563346418143-c78a0dc8.png",rn="/assets/1563347549322-6fb527b1.png",dn="/assets/1563347461411-b1944ea1.png",kn="/assets/1563348390786-5a8302d6.png",gn="/assets/1563348597500-1cc50051.png",vn="/assets/1563348697132-fb30fe89.png",mn="/assets/1563348842750-e5dcb5a4.png",bn="/assets/1563349056119-295de591.png",hn="/assets/1563349816545-667246ee.png",fn="/assets/1563350219186-800f36b0.png",yn="/assets/1563350343117-468033cb.png",_n="/assets/1563350495056-fec15a6b.png",xn="/assets/1563350697689-94b21082.png",wn="/assets/1563362190341-69ba7eb3.png",In="/assets/1563362241174-aec7c6d8.png",Sn="/assets/1563957797980-9eae0ba8.png",Cn={},Fn=t('<h1 id="springcloud-二" tabindex="-1"><a class="header-anchor" href="#springcloud-二" aria-hidden="true">#</a> SpringCloud（二）</h1><p>反馈：</p><figure><img src="'+o+'" alt="1564705879296" tabindex="0" loading="lazy"><figcaption>1564705879296</figcaption></figure><ul><li>慢 适应</li><li>不要拖堂</li><li>好</li><li>看起来像： 点 3年 面 <ul><li>代码出错了：立马叫人（先自己去分析）</li><li>开发：环境（自己带） 小：硬盘 大厂：wiki服务器（FTP）</li><li>同事讲话（底气） 技术（认识）</li></ul></li><li>昨天：量大 （注解 配置）</li><li>看文档。 <ul><li>官网文档（英文）---&gt; 新的技术 ---&gt; 说明书</li><li>中文文档：成熟的技术 新的技术：坑</li></ul></li><li>后悔</li><li>不能</li></ul><p>课程回顾：</p><p>1、远程调用：</p><ul><li>场景：模拟调用第三方的接口（提供url 接口地址）</li><li>调用一：httpclient</li><li>调用二：RestTemplate</li></ul><p>2、eureka：协调一切</p><ul><li>注册中心</li><li>服务提供方</li><li>服务消费方</li></ul><p>3、Robbin：负载均衡</p><ul><li>@LoadBalanced</li><li>负载：默认的策略 轮询</li></ul><p>4、熔断器：</p><ul><li>场景：雪崩效应</li><li>思路：服务降级，默认提供一些数据</li><li>程序：Fallback方法（兜底） <ul><li>作用在方法</li><li>作用在类</li></ul></li></ul><p>课程目标：</p><p>1、能够使用Feign进行远程调用：更加优美的实现远程调用（符合程序员的逻辑 ）</p><p>2、能够搭建Spring Cloud Gateway网关</p><p>3、能够搭建Spring Cloud Config配置中心</p><p>4、能够使用Spring Cloud Bus消息总线</p><h1 id="_1-feign进行远程调用" tabindex="-1"><a class="header-anchor" href="#_1-feign进行远程调用" aria-hidden="true">#</a> 1 Feign进行远程调用</h1><h2 id="_1-1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-1-介绍" aria-hidden="true">#</a> 1.1 介绍</h2><p>Feign 的英文表意为“假装，伪装，变形”， 是一个<strong>http请求调用的轻量级框架</strong>，可以以Java接口注解的方式调用Http请求，而不用像Java中通过封装HTTP请求报文的方式直接调用。Feign通过处理注解，将请求模板化，当实际调用的时候，传入参数，根据参数再应用到请求上，进而转化成真正的请求，这种请求相对而言比较直观。<strong>Feign被广泛应用在Spring Cloud 的解决方案中</strong>，是学习基于Spring Cloud 微服务架构不可或缺的重要组件。</p><p><strong>http调用过程，如图：</strong></p><figure><img src="'+u+'" alt="1563174971237" tabindex="0" loading="lazy"><figcaption>1563174971237</figcaption></figure><p>Feign是声明式的web service客户端，它<strong>让微服务之间的调用变得更简单了，类似controller调用service</strong>。Spring Cloud集成了Ribbon和Eureka，可在使用Feign时提供负载均衡的http客户端。</p>',24),zn={href:"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2FOpenFeign%2Ffeign",target:"_blank",rel:"noopener noreferrer"},Pn=t('<p><strong>Feign的调用过程，如图：</strong></p><figure><img src="'+r+`" alt="1563183555286" tabindex="0" loading="lazy"><figcaption>1563183555286</figcaption></figure><p>综上，Feign的好处：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">-</span> <span class="token value attr-value">集成Ribbon的负载均衡功能</span>
<span class="token key attr-name">-</span> <span class="token value attr-value">集成Eureka服务注册与发现功能</span>
<span class="token key attr-name">-</span> <span class="token value attr-value">集成了Hystrix的熔断器功能</span>
<span class="token key attr-name">-</span> <span class="token value attr-value">支持请求压缩</span>
<span class="token key attr-name">-</span> <span class="token value attr-value">Feign以更加优雅的方式编写远程调用代码，并简化重复代码</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-2-入门程序" tabindex="-1"><a class="header-anchor" href="#_1-2-入门程序" aria-hidden="true">#</a> 1.2 入门程序</h2><h3 id="_1-2-1-需求" tabindex="-1"><a class="header-anchor" href="#_1-2-1-需求" aria-hidden="true">#</a> 1.2.1 需求</h3><p>使用Feign替代RestTemplate发送Rest请求</p><h3 id="_1-2-2-代码实现" tabindex="-1"><a class="header-anchor" href="#_1-2-2-代码实现" aria-hidden="true">#</a> 1.2.2 代码实现</h3><h4 id="_1-2-2-1-添加依赖" tabindex="-1"><a class="header-anchor" href="#_1-2-2-1-添加依赖" aria-hidden="true">#</a> 1.2.2.1 添加依赖</h4><p>在服务消费方【本次工程：eureka_client_consumer】添加Feign依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--配置feign--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+d+`" alt="1563175855992" tabindex="0" loading="lazy"><figcaption>1563175855992</figcaption></figure><h4 id="_1-2-2-2-编写feign客户端" tabindex="-1"><a class="header-anchor" href="#_1-2-2-2-编写feign客户端" aria-hidden="true">#</a> 1.2.2.2 编写Feign客户端</h4><p>在服务消费方编写Feign客户端接口UserClient，用于发送请求。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;eureka-client-provider&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserClient</span> <span class="token punctuation">{</span>

    <span class="token comment">// 地址：请求的是提供方的url地址</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user/findUserById/{id}&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+k+`" alt="1563179772218" tabindex="0" loading="lazy"><figcaption>1563179772218</figcaption></figure><h4 id="_1-2-2-3-编写controller" tabindex="-1"><a class="header-anchor" href="#_1-2-2-3-编写controller" aria-hidden="true">#</a> 1.2.2.3 编写Controller</h4><p>在服务消费方编写FeignConsumerController，注入UserClient并发送请求。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/feign&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignConsumerController</span> <span class="token punctuation">{</span>

    <span class="token comment">// 注入userClient</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserClient</span> userClient<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user/getUser/{id}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> userClient<span class="token punctuation">.</span><span class="token function">getUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+g+`" alt="1563179902935" tabindex="0" loading="lazy"><figcaption>1563179902935</figcaption></figure><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code>PS：
	在controller中注入UserClient报错但是可以正常编译并且访问，注意了这只是IDEA工具的检测问题，可以在IDEA中修改检测级别。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>IDEA 2018版：做如下配置</p><figure><img src="`+v+'" alt="1563180492994" tabindex="0" loading="lazy"><figcaption>1563180492994</figcaption></figure></li><li><p>IDEA 2017版：并没有这些选项，因此我们直接修改代码</p><figure><img src="'+m+`" alt="1563180539475" tabindex="0" loading="lazy"><figcaption>1563180539475</figcaption></figure></li></ul><h4 id="_1-2-2-4-开启feign功能" tabindex="-1"><a class="header-anchor" href="#_1-2-2-4-开启feign功能" aria-hidden="true">#</a> 1.2.2.4 开启Feign功能</h4><p>在启动类中添加@EnableFeignClients注解，开启Feign功能。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringCloudApplication</span>
<span class="token annotation punctuation">@EnableFeignClients</span>	<span class="token comment">// 开启Feign客户端功能</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaClientConsumerApplication</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">EurekaClientConsumerApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token annotation punctuation">@Bean</span>
	<span class="token annotation punctuation">@LoadBalanced</span>
    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+b+'" alt="1563177009476" tabindex="0" loading="lazy"><figcaption>1563177009476</figcaption></figure><h4 id="_1-2-2-5-测试" tabindex="-1"><a class="header-anchor" href="#_1-2-2-5-测试" aria-hidden="true">#</a> 1.2.2.5 测试</h4>',27),An={href:"http://localhost:8080/feign/user/getUser/1",target:"_blank",rel:"noopener noreferrer"},Rn=t('<figure><img src="'+h+`" alt="1563180113790" tabindex="0" loading="lazy"><figcaption>1563180113790</figcaption></figure><h4 id="_1-2-2-6-坑" tabindex="-1"><a class="header-anchor" href="#_1-2-2-6-坑" aria-hidden="true">#</a> 1.2.2.6 坑</h4><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code>使用Feign的时候,如果参数中带有@PathVariable形式的参数,则要用value属性去指定。
<span class="token key attr-name">标明对应的参数,否则会抛出IllegalStateException异常，异常信息：Feign</span> <span class="token value attr-value">PathVariable annotation was empty on param 0.</span>


<span class="token key attr-name">建议：RESTful风格</span> <span class="token value attr-value">  @Pathvariable（value）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+f+'" alt="1563180237909" tabindex="0" loading="lazy"><figcaption>1563180237909</figcaption></figure><h2 id="_1-3-熔断支持" tabindex="-1"><a class="header-anchor" href="#_1-3-熔断支持" aria-hidden="true">#</a> 1.3 熔断支持</h2><p>Feign默认对Hystrix支持。</p><figure><img src="'+y+'" alt="1563181447217" tabindex="0" loading="lazy"><figcaption>1563181447217</figcaption></figure><h3 id="_1-3-1-需求" tabindex="-1"><a class="header-anchor" href="#_1-3-1-需求" aria-hidden="true">#</a> 1.3.1 需求</h3><p>调用服务时，如果服务出现宕机，给用户响应一个友好提示。</p><h3 id="_1-3-2-代码实现" tabindex="-1"><a class="header-anchor" href="#_1-3-2-代码实现" aria-hidden="true">#</a> 1.3.2 代码实现</h3><h4 id="_1-3-2-1-开起feign对熔断器支持" tabindex="-1"><a class="header-anchor" href="#_1-3-2-1-开起feign对熔断器支持" aria-hidden="true">#</a> 1.3.2.1 开起Feign对熔断器支持</h4><p>开启Feign对熔断器支持，默认是关闭的。在服务消费方的application.yml文件中配置如下内容：</p><figure><img src="'+_+`" alt="1563181784611" tabindex="0" loading="lazy"><figcaption>1563181784611</figcaption></figure><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">feign</span><span class="token punctuation">:</span>
  <span class="token key atrule">hystrix</span><span class="token punctuation">:</span>
    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-3-2-2-编写fallback处理类" tabindex="-1"><a class="header-anchor" href="#_1-3-2-2-编写fallback处理类" aria-hidden="true">#</a> 1.3.2.2 编写Fallback处理类</h4><p>在工程的src目录下创建熔断器的处理类，需要实现Feign客户端的接口。</p><figure><img src="`+x+'" alt="1563181958556" tabindex="0" loading="lazy"><figcaption>1563181958556</figcaption></figure><h4 id="_1-3-2-3-调用fallback" tabindex="-1"><a class="header-anchor" href="#_1-3-2-3-调用fallback" aria-hidden="true">#</a> 1.3.2.3 调用Fallback</h4><p>在Feign客户端需要调用熔断器的处理类。</p><figure><img src="'+w+`" alt="1563182409461" tabindex="0" loading="lazy"><figcaption>1563182409461</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;eureka-client-provider&quot;</span><span class="token punctuation">,</span> fallback <span class="token operator">=</span> <span class="token class-name">UserClientFallback</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserClient</span> <span class="token punctuation">{</span>

    <span class="token comment">// 地址：请求的是提供方的url地址</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user/findUserById/{id}&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-3-2-4-测试" tabindex="-1"><a class="header-anchor" href="#_1-3-2-4-测试" aria-hidden="true">#</a> 1.3.2.4 测试</h4>`,22),qn={href:"http://localhost:8080/feign/user/getUser/1",target:"_blank",rel:"noopener noreferrer"},Gn=t('<figure><img src="'+I+`" alt="1563182773889" tabindex="0" loading="lazy"><figcaption>1563182773889</figcaption></figure><h2 id="_1-4-其他" tabindex="-1"><a class="header-anchor" href="#_1-4-其他" aria-hidden="true">#</a> 1.4 其他</h2><h3 id="_1-4-1-负载均衡" tabindex="-1"><a class="header-anchor" href="#_1-4-1-负载均衡" aria-hidden="true">#</a> 1.4.1 负载均衡</h3><p>Feign本身集成了Ribbon依赖和自动配置，因此不需要额外引入依赖，也不需要再注入RestTemplate对象。Feign内置的ribbon默认设置了请求超时时长，默认是1000ms，可以修改ribbon内部有重试机制，一旦超时，会自动重新发起请求。如果不希望重试可以关闭配置。</p><p>我们可以在服务消费方application.yml中配置如下内容：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 配置负载均衡</span>
<span class="token key atrule">eureka-client-consumer</span><span class="token punctuation">:</span>
  <span class="token key atrule">ribbon</span><span class="token punctuation">:</span>
    <span class="token key atrule">NFLoadBalancerRuleClassName</span><span class="token punctuation">:</span> com.netflix.loadbalancer.RandomRule <span class="token comment"># 配置为随机</span>
    <span class="token key atrule">ConnectTimeout</span><span class="token punctuation">:</span> <span class="token number">1000</span> <span class="token comment"># 指的是建立连接所用的时间</span>
    <span class="token key atrule">ReadTimeout</span><span class="token punctuation">:</span> <span class="token number">2000</span>    <span class="token comment"># 指的是建立连接后从服务器读取到可用资源所用的时间</span>
    <span class="token key atrule">MaxAutoRetries</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token comment"># 最大重试次数(第一个服务)</span>
    <span class="token key atrule">MaxAutoRetriesNextServer</span><span class="token punctuation">:</span> <span class="token number">0</span>     <span class="token comment"># 最大重试下一个服务次数(集群的情况才会用到)</span>
    <span class="token key atrule">OkToRetryOnAllOperations</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 是否对所有的请求都重试</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-2-请求压缩" tabindex="-1"><a class="header-anchor" href="#_1-4-2-请求压缩" aria-hidden="true">#</a> 1.4.2 请求压缩</h3><p>SpringCloudFeign支持对请求和响应进行GZIP压缩，以减少通信过程中的性能损耗。通过配置开启请求与响应的压缩功能：</p><ul><li>开启压缩功能</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 无注释版</span>
<span class="token key atrule">feign</span><span class="token punctuation">:</span>
	<span class="token key atrule">compression</span><span class="token punctuation">:</span>
        <span class="token key atrule">request</span><span class="token punctuation">:</span>
            <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
        <span class="token key atrule">response</span><span class="token punctuation">:</span>
            <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>

<span class="token key atrule">feign</span><span class="token punctuation">:</span>
	<span class="token key atrule">compression</span><span class="token punctuation">:</span>
        <span class="token key atrule">request</span><span class="token punctuation">:</span>
            <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 开启请求压缩</span>
        <span class="token key atrule">response</span><span class="token punctuation">:</span>
            <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 开启响应压缩</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对请求类型以及压缩大小进行限制</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 无注释版</span>
<span class="token key atrule">feign</span><span class="token punctuation">:</span>
	<span class="token key atrule">compression</span><span class="token punctuation">:</span>
		<span class="token key atrule">request</span><span class="token punctuation">:</span>
			<span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
			<span class="token key atrule">mime-types</span><span class="token punctuation">:</span>	text/html<span class="token punctuation">,</span>application/xml<span class="token punctuation">,</span>application/json
			<span class="token key atrule">min-request-size</span><span class="token punctuation">:</span> <span class="token number">2048</span> 
<span class="token comment">#  Feign配置</span>
<span class="token key atrule">feign</span><span class="token punctuation">:</span>
	<span class="token key atrule">compression</span><span class="token punctuation">:</span>
		<span class="token key atrule">request</span><span class="token punctuation">:</span>
			<span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 开启请求压缩</span>
			<span class="token key atrule">mime-types</span><span class="token punctuation">:</span>	text/html<span class="token punctuation">,</span>application/xml<span class="token punctuation">,</span>application/json <span class="token comment"># 设置压缩的数据类型</span>
			<span class="token key atrule">min-request-size</span><span class="token punctuation">:</span> <span class="token number">2048</span> <span class="token comment"># 设置触发压缩的大小下限</span>
			<span class="token comment">#以上数据类型，压缩大小下限均为默认值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_2-spring-cloud-gateway网关" tabindex="-1"><a class="header-anchor" href="#_2-spring-cloud-gateway网关" aria-hidden="true">#</a> 2 Spring Cloud Gateway网关</h1><h2 id="_2-1-api网关" tabindex="-1"><a class="header-anchor" href="#_2-1-api网关" aria-hidden="true">#</a> 2.1 API网关</h2><p>API 网关出现的原因是微服务架构的出现，不同的微服务一般会有不同的网络地址，而外部客户端可能需要调用多个服务的接口才能完成一个业务需求，如果让客户端直接与各个微服务通信，会有以下的问题：</p><ul><li>客户端会多次请求不同的微服务，增加了客户端的复杂性。</li><li>存在跨域请求（CORS A服务器----&gt;B服务器资源），在一定场景下处理相对复杂。</li><li>认证复杂，每个服务都需要独立认证。 url ：token（令牌or票据）=3434duri4fdewfdjsdiuresirwerwewsfh</li><li>难以重构，随着项目的迭代，可能需要重新划分微服务。例如，可能将多个服务合并成一个或者将一个服务拆分成多个。如果客户端直接与微服务通信，那么重构将会很难实施。</li><li>某些微服务可能使用了防火墙 （花钱买）/ 浏览器不友好的协议，直接访问会有一定的困难。</li></ul><p>以上这些问题可以借助 API 网关解决。API 网关是介于客户端和服务器端之间的中间层，所有的外部请求都会先经过 API 网关这一层。也就是说，API 的实现方面更多的考虑业务逻辑，而安全、性能、监控可以交由 API 网关来做，这样既提高业务灵活性又不缺安全性，架构图如图所示：</p><figure><img src="`+S+'" alt="1563184636038" tabindex="0" loading="lazy"><figcaption>1563184636038</figcaption></figure><p>使用 API 网关后的优点如下：</p><ul><li>易于监控。可以在网关收集监控数据并将其推送到外部系统进行分析。</li><li>易于认证。可以在网关上进行认证，然后再将请求转发到后端的微服务，而无须在每个微服务中进行认证。</li><li>减少了客户端与各个微服务之间的交互次数。</li></ul><h2 id="_2-2-网关选型" tabindex="-1"><a class="header-anchor" href="#_2-2-网关选型" aria-hidden="true">#</a> 2.2 网关选型</h2><h3 id="_2-2-1-网关选型" tabindex="-1"><a class="header-anchor" href="#_2-2-1-网关选型" aria-hidden="true">#</a> 2.2.1 网关选型</h3><p>加密：是否安全 不安全。</p><ul><li>生日碰撞（数学问题）</li><li>hash碰撞（物理实验 具体的应用与物理实验有距离）</li></ul><p>太不稳定</p><p>微服务架构中常用的网关，如下： nginx可以限流</p><figure><img src="'+C+'" alt="1563184720423" tabindex="0" loading="lazy"><figcaption>1563184720423</figcaption></figure><h3 id="_2-2-2-spring-cloud-gateway" tabindex="-1"><a class="header-anchor" href="#_2-2-2-spring-cloud-gateway" aria-hidden="true">#</a> 2.2.2 Spring Cloud Gateway</h3><h4 id="_2-2-2-1-介绍" tabindex="-1"><a class="header-anchor" href="#_2-2-2-1-介绍" aria-hidden="true">#</a> 2.2.2.1 介绍</h4><p>版本：1.4 2017 1.5 zuul</p><p>Spring Cloud Gateway 是 Spring Cloud 的一个<strong>全新项目</strong>，该项目是基于 Spring 5.0，Spring Boot 2.x 和 Project Reactor 等技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。</p><p>Spring Cloud Gateway 作为 Spring Cloud 生态系统中的网关，目标是替代 Netflix Zuul，其不仅提供统一的路由方式，并且基于 Filter 链的方式提供了网关基本的功能，例如：安全、监控、限流等。</p><h4 id="_2-2-2-2-术语" tabindex="-1"><a class="header-anchor" href="#_2-2-2-2-术语" aria-hidden="true">#</a> 2.2.2.2 术语</h4>',33),En=n("li",null,[n("strong",null,"Route（路由）"),a("：这是网关的基本构建块。它由一个 ID，一个目标 URI，一组断言和一组过滤器定义。如果断言为真，则路由匹配。")],-1),Bn=n("strong",null,"Predicate（断言）",-1),Un={href:"http://docs.oracle.com/javase/8/docs/api/java/util/function/Predicate.html",target:"_blank",rel:"noopener noreferrer"},jn={href:"https://docs.spring.io/spring/docs/5.0.x/javadoc-api/org/springframework/web/server/ServerWebExchange.html",target:"_blank",rel:"noopener noreferrer"},Tn=n("code",null,"ServerWebExchange",-1),Hn=n("li",null,[n("strong",null,"Filter（过滤器）"),a("：这是"),n("code",null,"org.springframework.cloud.gateway.filter.GatewayFilter"),a("的实例，我们可以使用它修改请求和响应")],-1),Mn=t('<h4 id="_2-2-2-3-流程" tabindex="-1"><a class="header-anchor" href="#_2-2-2-3-流程" aria-hidden="true">#</a> 2.2.2.3 流程</h4><p>客户端向 Spring Cloud Gateway 发出请求。然后在 Gateway Handler Mapping 中找到与请求相匹配的路由，将其发送到 Gateway Web Handler。Handler 再通过指定的过滤器链来将请求发送到我们实际的服务执行业务逻辑，然后返回。 过滤器之间用虚线分开是因为过滤器可能会在发送代理请求之前（“pre”）或之后（“post”）执行业务逻辑。</p><figure><img src="'+F+`" alt="1563263071310" tabindex="0" loading="lazy"><figcaption>1563263071310</figcaption></figure><h2 id="_2-3-入门程序" tabindex="-1"><a class="header-anchor" href="#_2-3-入门程序" aria-hidden="true">#</a> 2.3 入门程序</h2><h3 id="_2-3-1-创建maven工程" tabindex="-1"><a class="header-anchor" href="#_2-3-1-创建maven工程" aria-hidden="true">#</a> 2.3.1 创建maven工程</h3><p>通过spring 创建工程，并且添加需要的依赖：eureka以及gateway</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+z+'" alt="1563185890858" tabindex="0" loading="lazy"><figcaption>1563185890858</figcaption></figure><h3 id="_2-3-2-编写启动类" tabindex="-1"><a class="header-anchor" href="#_2-3-2-编写启动类" aria-hidden="true">#</a> 2.3.2 编写启动类</h3><p>创建的工程也属于一个服务，因此我们也需要启动并且交个Eureka注册中心管理。在启动类中添加@EnableDiscoveryClient注解或者@EnableEurekaClient。</p><figure><img src="'+P+`" alt="1563186263700" tabindex="0" loading="lazy"><figcaption>1563186263700</figcaption></figure><h3 id="_2-3-3-编写配置文件" tabindex="-1"><a class="header-anchor" href="#_2-3-3-编写配置文件" aria-hidden="true">#</a> 2.3.3 编写配置文件</h3><p>1、配置Eureka</p><p>2、配置api的路由规则</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">10010</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> api<span class="token punctuation">-</span>gateway
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> eureka<span class="token punctuation">-</span>client<span class="token punctuation">-</span>provider<span class="token punctuation">-</span>route
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span><span class="token number">9091</span>
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> Path=/user/<span class="token important">**</span>
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>10086/eureka
      

<span class="token comment">#注释</span>
<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">10010</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> api<span class="token punctuation">-</span>gateway
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token comment"># 路由(集合， - 代表集合)</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
      	<span class="token comment"># id唯一标识，(可自定义)</span>
        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> eureka<span class="token punctuation">-</span>client<span class="token punctuation">-</span>provider<span class="token punctuation">-</span>route
          <span class="token comment"># 路由服务提供方地址</span>
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span><span class="token number">9091</span>
          	<span class="token comment"># 路由拦截地址的规则(断言)</span>
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> Path=/user/<span class="token important">**</span>
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>10086/eureka
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-4-测试" tabindex="-1"><a class="header-anchor" href="#_2-3-4-测试" aria-hidden="true">#</a> 2.3.4 测试</h3>`,16),On={href:"http://localhost:10010/user/findUserById/2",target:"_blank",rel:"noopener noreferrer"},Dn=t('<figure><img src="'+A+`" alt="1563187551870" tabindex="0" loading="lazy"><figcaption>1563187551870</figcaption></figure><h2 id="_2-4-动态路由" tabindex="-1"><a class="header-anchor" href="#_2-4-动态路由" aria-hidden="true">#</a> 2.4 动态路由</h2><ul><li>刚才路由规则中，我们把路径对应服务地址写死了！如果服务提供者集群的话，这样做不合理。应该是<strong>根据服务名称</strong>，去Eureka注册中心查找服务对应的所有实例列表，然后进行动态路由！配置如下：</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment">#          uri: http://127.0.0.1:9091</span>
              <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//eureka<span class="token punctuation">-</span>client<span class="token punctuation">-</span>provider
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+R+'" alt="1563188159621" tabindex="0" loading="lazy"><figcaption>1563188159621</figcaption></figure>',5),Nn=n("p",null,"启动网关服务再次访问：本次测试访问4次结果如下（结果：会路由不到不同的服务提供方 PS：不同的负载均衡策略可能查看的结果不一样。）：",-1),Vn={href:"http://localhost:10010/user/findUserById/2",target:"_blank",rel:"noopener noreferrer"},Zn=n("figure",null,[n("img",{src:q,alt:"1563188379721",tabindex:"0",loading:"lazy"}),n("figcaption",null,"1563188379721")],-1),Ln=t('<h2 id="_2-5-过滤器" tabindex="-1"><a class="header-anchor" href="#_2-5-过滤器" aria-hidden="true">#</a> 2.5 过滤器</h2><p>由filter工作流程点，可以知道filter有着非常重要的作用，在“pre”类型的过滤器可以做参数校验、权限校验、流量监控、日志输出、协议转换等，在“post”类型的过滤器中可以做响应内容、响应头的修改，日志的输出，流量监控等。 (过滤器, 处理请求, 可以修改请求前的数据和返回后的数据, 类似于spring webmvc的interceptor)</p><p>当我们有很多个服务时，比如下图中的user-service、goods-service、sales-service等服务，客户端请求各个服务的Api时，每个服务都需要做相同的事情，比如鉴权、限流、日志输出等。</p><figure><img src="'+G+'" alt="1563263330304" tabindex="0" loading="lazy"><figcaption>1563263330304</figcaption></figure><p>对于这样重复的工作，有没有办法做的更好，答案是肯定的。在微服务的上一层加一个全局的权限控制、限流、日志输出的Api Gatewat服务，然后再将请求转发到具体的业务服务层。这个Api Gateway服务就是起到一个服务边界的作用，外接的请求访问系统，必须先通过网关层。</p><figure><img src="'+E+'" alt="1563263375300" tabindex="0" loading="lazy"><figcaption>1563263375300</figcaption></figure><p>Spring Cloud Gateway同zuul类似，有“pre”和“post”两种方式的filter。客户端的请求先经过“pre”类型的filter，然后将请求转发到具体的业务服务，比如上图中的user-service，收到业务服务的响应之后，再经过“post”类型的filter处理，最后返回响应到客户端。</p><figure><img src="'+B+'" alt="1563263584830" tabindex="0" loading="lazy"><figcaption>1563263584830</figcaption></figure><p>与zuul不同的是，filter除了分为“pre”和“post”两种方式的filter外，在Spring Cloud Gateway中，filter从作用范围可分为另外两种，一种是针对于单个路由的gateway filter，它在配置文件中的写法同predict类似；另外一种是针对于所有路由的global gateway filer。现在从作用范围划分的维度来讲解这两种filter。</p><h3 id="_2-5-1-过滤器分类" tabindex="-1"><a class="header-anchor" href="#_2-5-1-过滤器分类" aria-hidden="true">#</a> 2.5.1 过滤器分类</h3><ul><li>默认过滤器：出厂自带，实现好了拿来就用，不需要实现 <ul><li>全局默认过滤器</li><li>局部默认过滤器</li></ul></li><li>自定义过滤器：根据需求自己实现，实现后需配置，然后才能用哦。 <ul><li>全局过滤器：作用在所有路由上。</li><li>局部过滤器：配置在具体路由下，只作用在当前路由上。</li></ul></li></ul><p>默认过滤器几十个，常见如下：</p><table><thead><tr><th>过滤器名称</th><th>说明</th></tr></thead><tbody><tr><td>AddRequestHeader</td><td>对匹配上的请求加上Header</td></tr><tr><td>AddRequestParameters</td><td>对匹配上的请求路由</td></tr><tr><td>AddResponseHeader</td><td>对从网关返回的响应添加Header</td></tr><tr><td>StripPrefix</td><td>对匹配上的请求路径去除前缀</td></tr></tbody></table>',13),Qn={href:"https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.1.1.RELEASE/single/spring-cloud-gateway.html#_gatewayfilter_factories",target:"_blank",rel:"noopener noreferrer"},Wn=t(`<h3 id="_2-5-2-配置过滤器" tabindex="-1"><a class="header-anchor" href="#_2-5-2-配置过滤器" aria-hidden="true">#</a> 2.5.2 配置过滤器</h3><h4 id="_2-5-2-1-配置全局过滤器" tabindex="-1"><a class="header-anchor" href="#_2-5-2-1-配置全局过滤器" aria-hidden="true">#</a> 2.5.2.1 配置全局过滤器</h4><p>举个栗子：设置响应的头信息。</p><ul><li><p>第一步：修改application.yml文件</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> api<span class="token punctuation">-</span>gateway
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> eureka<span class="token punctuation">-</span>client<span class="token punctuation">-</span>provider<span class="token punctuation">-</span>route
<span class="token comment">#          uri: http://127.0.0.1:9091</span>
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//eureka<span class="token punctuation">-</span>client<span class="token punctuation">-</span>provider
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> Path=/user/<span class="token important">**</span>
      <span class="token key atrule">default-filters</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> AddResponseHeader=X<span class="token punctuation">-</span>Response<span class="token punctuation">-</span>Default<span class="token punctuation">-</span>MyName<span class="token punctuation">,</span>itheima
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+U+'" alt="1563264411000" tabindex="0" loading="lazy"><figcaption>1563264411000</figcaption></figure></li><li><p>第二步：通过浏览器查看</p><figure><img src="'+j+'" alt="1563264375857" tabindex="0" loading="lazy"><figcaption>1563264375857</figcaption></figure></li></ul><h4 id="_2-5-2-2-配置局部过滤器" tabindex="-1"><a class="header-anchor" href="#_2-5-2-2-配置局部过滤器" aria-hidden="true">#</a> 2.5.2.2 配置局部过滤器</h4>',5),Xn=n("p",null,"添加请求路径前缀",-1),Jn=t(`<li><p>第一步：修改application.yml文件</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> api<span class="token punctuation">-</span>gateway
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> eureka<span class="token punctuation">-</span>client<span class="token punctuation">-</span>provider<span class="token punctuation">-</span>route
<span class="token comment">#          uri: http://127.0.0.1:9091</span>
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//eureka<span class="token punctuation">-</span>client<span class="token punctuation">-</span>provider
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> Path=/<span class="token important">**</span>
          <span class="token key atrule">filters</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> PrefixPath=/user/findUserById
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+T+'" alt="1563266971454" tabindex="0" loading="lazy"><figcaption>1563266971454</figcaption></figure></li><li><p>第二步：重启网关服务：略</p></li>',2),Kn={href:"http://localhost:10010/1",target:"_blank",rel:"noopener noreferrer"},Yn=n("figure",null,[n("img",{src:H,alt:"1563266992208",tabindex:"0",loading:"lazy"}),n("figcaption",null,"1563266992208")],-1),$n=n("p",null,"路由说明：",-1),na=n("thead",null,[n("tr",null,[n("th",null,"配置"),n("th",null,"访问api网关地址"),n("th",null,"路由地址")])],-1),aa=n("td",null,"PrefixPath=/user",-1),sa={href:"http://localhost:10010/8",target:"_blank",rel:"noopener noreferrer"},ea={href:"http://localhost:9091/user/8",target:"_blank",rel:"noopener noreferrer"},ta=n("td",null,"PrefixPath=/user/abc",-1),pa={href:"http://localhost:10010/8",target:"_blank",rel:"noopener noreferrer"},ia={href:"http://localhost:9091/user/abc/8",target:"_blank",rel:"noopener noreferrer"},la=t(`<p>去除请求路径前缀</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code>在gateway中通过配置路由过滤器StripPrefix，来指定路由要去掉的前缀个数。以实现映射路径中地址的去除。
<span class="token key attr-name">例1：StripPrefix</span><span class="token punctuation">=</span><span class="token value attr-value">1</span>
路径/api/user/1将会被路由到/user/1

<span class="token key attr-name">例2：StripPrefix</span><span class="token punctuation">=</span><span class="token value attr-value">2</span>
路径/api/user/1将会被路由到/1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),ca=t(`<li><p>第一步：修改application.yml文件</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> api<span class="token punctuation">-</span>gateway
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> eureka<span class="token punctuation">-</span>client<span class="token punctuation">-</span>provider<span class="token punctuation">-</span>route
<span class="token comment">#          uri: http://127.0.0.1:9091</span>
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//eureka<span class="token punctuation">-</span>client<span class="token punctuation">-</span>provider
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> Path=/<span class="token important">**</span>
          <span class="token key atrule">filters</span><span class="token punctuation">:</span>
<span class="token comment">#            - PrefixPath=/user</span>
            <span class="token punctuation">-</span> StripPrefix=1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+M+'" alt="1563266521280" tabindex="0" loading="lazy"><figcaption>1563266521280</figcaption></figure></li><li><p>第二步：重启网关服务</p></li>',2),oa={href:"http://localhost:10010/xxx/user/findUserById/1",target:"_blank",rel:"noopener noreferrer"},ua=n("figure",null,[n("img",{src:O,alt:"1563267864789",tabindex:"0",loading:"lazy"}),n("figcaption",null,"1563267864789")],-1),ra=n("p",null,"路由说明：",-1),da=n("thead",null,[n("tr",null,[n("th",null,"配置"),n("th",null,"访问网关地址"),n("th",null,"路由地址（提供方）")])],-1),ka=n("td",null,"StripPrefix=1",-1),ga={href:"http://localhost:10010/api/user/1",target:"_blank",rel:"noopener noreferrer"},va={href:"http://localhost:9091/user/1",target:"_blank",rel:"noopener noreferrer"},ma=n("td",null,"StripPrefix=2",-1),ba={href:"http://localhost:10010/api/user/1",target:"_blank",rel:"noopener noreferrer"},ha={href:"http://localhost:9091/1",target:"_blank",rel:"noopener noreferrer"},fa=t('<h3 id="_2-5-3-自定义过滤器" tabindex="-1"><a class="header-anchor" href="#_2-5-3-自定义过滤器" aria-hidden="true">#</a> 2.5.3 自定义过滤器</h3><p>自定义过滤器：参考官方的文档</p><p>1、自定义全局的过滤器：必须实现接口：GlobalFilter、可以实现Ordered接口（指定该过滤器的执行顺序）</p><ul><li>需求：发送的请求中，必须携带令牌（无法访问）</li></ul><p>2、自定义局部的过滤器：必须实现接口：AbstractGatewayFilterFactory</p><ul><li>需求：限定请求的ip（A 可以访问 其他公司：不能访问）</li><li>自定义局部过滤器类的名称：不能随便写 XxxGatewayFilterFactory</li></ul><h4 id="_2-5-3-1-自定义全局过滤器" tabindex="-1"><a class="header-anchor" href="#_2-5-3-1-自定义全局过滤器" aria-hidden="true">#</a> 2.5.3.1 自定义全局过滤器</h4><p>Spring Cloud 中常见的内置过滤器如下：</p><figure><img src="'+D+'" alt="1563268861501" tabindex="0" loading="lazy"><figcaption>1563268861501</figcaption></figure><p>如果要自定义全局过滤，我们需要实现GlobalFilter接口（也可以实现Ordered接口，该接口中的方法代表该过滤器执行的优先级，值越小，优先级越高）。</p>',10),ya=n("strong",null,"PS：如果不会自定义全局过滤器，可以参考官方已实现的过滤器",-1),_a={href:"https://cloud.spring.io/spring-cloud-static/Greenwich.SR2/single/spring-cloud.html#_gatewayfilter_factories",target:"_blank",rel:"noopener noreferrer"},xa=t('<h5 id="_2-5-3-1-1-需求" tabindex="-1"><a class="header-anchor" href="#_2-5-3-1-1-需求" aria-hidden="true">#</a> 2.5.3.1.1 需求</h5><p>判断请求是否包含了请求参数“token”，如果不包含请求参数“token”则不转发路由，否则执行正常的业务逻辑。</p><h5 id="_2-5-3-1-2-自定义全局过滤器" tabindex="-1"><a class="header-anchor" href="#_2-5-3-1-2-自定义全局过滤器" aria-hidden="true">#</a> 2.5.3.1.2 自定义全局过滤器</h5><p>在网关服务工程中（在com.itheima.filter包下），自定义全局过滤器。</p><figure><img src="'+N+`" alt="1563271204828" tabindex="0" loading="lazy"><figcaption>1563271204828</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyGlobalFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span> <span class="token punctuation">{</span>


    <span class="token doc-comment comment">/**
     * <span class="token keyword">@author</span> 栗子
     * @Description 判断请求参数是否有token值
     * @Date 17:33 2019/7/16
     * <span class="token keyword">@param</span> <span class="token parameter">exchange</span>
     * <span class="token keyword">@param</span> <span class="token parameter">chain</span>
     * <span class="token keyword">@return</span> reactor.core.publisher.Mono<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.lang.Void</span><span class="token punctuation">&gt;</span></span>
     **/</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取请求参数token</span>
        <span class="token class-name">String</span> token <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueryParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">&quot;token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果为空，则无法继续执行业务</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;token is empty!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">UNAUTHORIZED</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 401：无效认证</span>
            <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@author</span> 栗子
     * @Description 代表过滤器的优先级，值越小优先级越高（先执行）
     * @Date 17:32 2019/7/16
     * <span class="token keyword">@param</span>
     * <span class="token keyword">@return</span> int
     **/</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token constant">PS</span>：方法参数说明
<span class="token class-name">ServerWebExchange</span> exchange：<span class="token class-name">Contract</span> <span class="token keyword">for</span> an <span class="token constant">HTTP</span> request<span class="token operator">-</span>response <span class="token class-name"><span class="token namespace">interaction<span class="token punctuation">.</span></span> Provides</span> access <span class="token keyword">to</span> <span class="token namespace">the</span> <span class="token constant">HTTP</span> request and response and also exposes additional server<span class="token operator">-</span>side processing related properties and features such as request attributes（官方）
<span class="token class-name">ServerWebExchange</span>是一个<span class="token constant">HTTP</span>请求<span class="token operator">-</span>响应交互的契约。提供对<span class="token constant">HTTP</span>请求和响应的访问，并公开额外的 服务器 端处理相关属性和特性，如请求属性。（存放着重要的请求<span class="token operator">-</span>响应属性、请求实例和响应实例等等，有点像 <span class="token class-name">Context</span> 的角色）

<span class="token class-name">GatewayFilterChain</span> chain：过滤器链（将所有的过滤器加入该链中，相当于我们之前学习的springmvc的拦截器链）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-5-3-1-3-测试" tabindex="-1"><a class="header-anchor" href="#_2-5-3-1-3-测试" aria-hidden="true">#</a> 2.5.3.1.3 测试</h5><p>启动网关服务，发送请求：</p>`,8),wa={href:"http://localhost:10010/abc/user/findUserById/1",target:"_blank",rel:"noopener noreferrer"},Ia=n("figure",null,[n("img",{src:V,alt:"1563271441821",tabindex:"0",loading:"lazy"}),n("figcaption",null,"1563271441821")],-1),Sa=n("figure",null,[n("img",{src:Z,alt:"1563270539576",tabindex:"0",loading:"lazy"}),n("figcaption",null,"1563270539576")],-1),Ca={href:"http://localhost:10010/abc/user/findUserById/1?token=srre878ererrdr43",target:"_blank",rel:"noopener noreferrer"},Fa=n("figure",null,[n("img",{src:L,alt:"1563271532127",tabindex:"0",loading:"lazy"}),n("figcaption",null,"1563271532127")],-1),za=t('<h4 id="_2-5-3-2-自定义局部过滤器" tabindex="-1"><a class="header-anchor" href="#_2-5-3-2-自定义局部过滤器" aria-hidden="true">#</a> 2.5.3.2 自定义局部过滤器</h4><p>实现局部过滤器，我们需要继承抽象类：AbstractGatewayFilterFactory</p><figure><img src="'+Q+'" alt="1563271699236" tabindex="0" loading="lazy"><figcaption>1563271699236</figcaption></figure><h5 id="_2-5-3-2-1-需求" tabindex="-1"><a class="header-anchor" href="#_2-5-3-2-1-需求" aria-hidden="true">#</a> 2.5.3.2.1 需求</h5><p>需求是如果在配置文件配置了一个IP，那么该ip就可以访问，其它IP通通不能访问。如果不使用该过滤器，那么所有IP都可以访问服务。</p><h5 id="_2-5-3-2-2-自定义局部过滤器" tabindex="-1"><a class="header-anchor" href="#_2-5-3-2-2-自定义局部过滤器" aria-hidden="true">#</a> 2.5.3.2.2 自定义局部过滤器</h5><p>创建自定义局部过滤器，代码实现如下：（定义局部过滤器时，要求过滤器类的名称有一定的规范性。XxxGatewayFilterFactory ）</p><figure><img src="'+W+`" alt="1563277019189" tabindex="0" loading="lazy"><figcaption>1563277019189</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IpForbidGatewayFilterFactory</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractGatewayFilterFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IpForbidGatewayFilterFactory<span class="token punctuation">.</span>Config</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">PARAM_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;forbidIp&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">IpForbidGatewayFilterFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">Config</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 这个方法指定属性名称</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">shortcutFieldOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token constant">PARAM_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">GatewayFilter</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Config</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// grab configuration from Config object</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> chain<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 获取请求参数</span>
            <span class="token class-name">String</span> ip <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ip地址：&quot;</span> <span class="token operator">+</span> ip<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getForbidIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment">// 放行</span>
                <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 不放行</span>
            exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">FORBIDDEN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//Put the configuration properties for your filter here</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Config</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> forbidIp<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getForbidIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> forbidIp<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setForbidIp</span><span class="token punctuation">(</span><span class="token class-name">String</span> forbidIp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>forbidIp <span class="token operator">=</span> forbidIp<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-5-3-2-3-配置局部过滤器-坑" tabindex="-1"><a class="header-anchor" href="#_2-5-3-2-3-配置局部过滤器-坑" aria-hidden="true">#</a> 2.5.3.2.3 配置局部过滤器（坑）</h5><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code>坑：在定义局部过滤器时，要求过滤器类的名称有一定的规范性。例如：XxxGatewayFilterFactory。配置局部过滤的名称时，并不是任意写，默认截取该类的XxxGatewayFilterFactory的GatewayFilterFactory前半部分，例如为Xxx。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+X+'" alt="1563276977390" tabindex="0" loading="lazy"><figcaption>1563276977390</figcaption></figure><figure><img src="'+J+'" alt="1563276659056" tabindex="0" loading="lazy"><figcaption>1563276659056</figcaption></figure><h5 id="_2-5-3-2-4-测试" tabindex="-1"><a class="header-anchor" href="#_2-5-3-2-4-测试" aria-hidden="true">#</a> 2.5.3.2.4 测试</h5>',14),Pa={href:"http://localhost:10010/abc/user/findUserById/1?token=srre878ererrdr43",target:"_blank",rel:"noopener noreferrer"},Aa=t('<figure><img src="'+K+'" alt="1563276502219" tabindex="0" loading="lazy"><figcaption>1563276502219</figcaption></figure><h1 id="_3-spring-cloud-config配置中心" tabindex="-1"><a class="header-anchor" href="#_3-spring-cloud-config配置中心" aria-hidden="true">#</a> 3 Spring Cloud Config配置中心</h1><h2 id="_3-1-介绍" tabindex="-1"><a class="header-anchor" href="#_3-1-介绍" aria-hidden="true">#</a> 3.1 介绍</h2><p>在传统的单体式应用系统中，我们通常会将配置文件和代码放在一起，但随着系统越来越大，需要实现的功能越来越多时，我们又不得不将系统升级为分布式系统，同时也会将系统的功能进行更加细化的拆分。拆分后，所有的服务应用都会有自己的配置文件，当需要修改某个服务的配置时，我们可能需要修改很多处，并且为了某一项配置的修改，可能需要重启这个服务相关的所有服务，这显然是非常麻烦的。</p><p>分布式系统中，由于<strong>服务数量非常多</strong>，配置文件分散在不同微服务项目中，管理极其不方便。为了便于集中配置的统一管理，在分布式架构中通常会使用分布式配置中心组件，目前比较流行的分布式配置中心组件有百度的disconf、阿里的diamond、携程的apollo和Spring Cloud的Config等 。相对于同类产品而言，Spring Cloud Config最大的优势就是和Spring的无缝集成，对于已有的Spring应用程序的迁移成本非常低，结合Spring Boot可使项目有更加统一的标准（包括依赖版本和约束规范），避免了因集成不同开发软件造成的版本依赖冲突等问题 。也支持配置文件放在远程仓库Git(GitHub、<strong>码云</strong>)。配置中心本质上是一个微服务，同样需要注册到Eureka服务中心！ 有。 项目中：技术点 OA 消耗的资源</p><figure><img src="'+Y+'" alt="1563341945823" tabindex="0" loading="lazy"><figcaption>1563341945823</figcaption></figure><h2 id="_3-2-git远程仓库配置-码云" tabindex="-1"><a class="header-anchor" href="#_3-2-git远程仓库配置-码云" aria-hidden="true">#</a> 3.2 GIT远程仓库配置（码云）</h2>',7),Ra=n("li",null,"知名的Git远程仓库有国外的GitHub和国内的码云(gitee)；",-1),qa=n("li",null,"GitHub主服务在外网，访问经常不稳定，如果希望服务稳定，可以使用码云；",-1),Ga={href:"http://gitee.com",target:"_blank",rel:"noopener noreferrer"},Ea=t('<h3 id="_3-2-1-创建远程仓库" tabindex="-1"><a class="header-anchor" href="#_3-2-1-创建远程仓库" aria-hidden="true">#</a> 3.2.1 创建远程仓库</h3><ul><li><p>第一步：新建仓库</p><figure><img src="'+$+'" alt="1563342280083" tabindex="0" loading="lazy"><figcaption>1563342280083</figcaption></figure></li><li><p>第二步：编写仓库相关信息</p><figure><img src="'+nn+'" alt="1563342582596" tabindex="0" loading="lazy"><figcaption>1563342582596</figcaption></figure></li></ul><h3 id="_3-2-2-创建配置文件" tabindex="-1"><a class="header-anchor" href="#_3-2-2-创建配置文件" aria-hidden="true">#</a> 3.2.2 创建配置文件</h3><ul><li><p>第一步：创建配置文件：统一管理</p><ul><li>配置文件命名规则：{application}-{profile}.yml或{application}-{profile}.properties <ul><li>application：应用名称，例如：user</li><li>profile：指定应用环境，例如：开发环境dev，测试环境test，生产环境pro等 <ul><li>开发环境 user-dev.yml</li><li>测试环境 user-test.yml</li><li>生产环境 user-pro.yml</li></ul></li></ul></li></ul><figure><img src="'+an+'" alt="1563343068548" tabindex="0" loading="lazy"><figcaption>1563343068548</figcaption></figure></li><li><p>第二步：创建配置文件并提交：将工程服务提供方工程【eureka-client-provider】下的配置文件内容复制过来</p><figure><img src="'+sn+'" alt="1563343198348" tabindex="0" loading="lazy"><figcaption>1563343198348</figcaption></figure></li><li><p>第三步：配置中心如下</p><figure><img src="'+en+'" alt="1563343333982" tabindex="0" loading="lazy"><figcaption>1563343333982</figcaption></figure></li></ul><h2 id="_3-3-搭建配置中心服务" tabindex="-1"><a class="header-anchor" href="#_3-3-搭建配置中心服务" aria-hidden="true">#</a> 3.3 搭建配置中心服务</h2><h3 id="_3-3-1-创建工程" tabindex="-1"><a class="header-anchor" href="#_3-3-1-创建工程" aria-hidden="true">#</a> 3.3.1 创建工程</h3><p>在父工程下继续创建配置中心服务工程config_center_server，并且需要注册到注册中心，因此需要添加如下依赖：</p><figure><img src="'+tn+'" alt="1563344003017" tabindex="0" loading="lazy"><figcaption>1563344003017</figcaption></figure><h3 id="_3-3-2-编写启动类" tabindex="-1"><a class="header-anchor" href="#_3-3-2-编写启动类" aria-hidden="true">#</a> 3.3.2 编写启动类</h3><p>在启动类中添加**@EnableConfigServer**、<strong>@EnableDiscoveryClient</strong></p><figure><img src="'+pn+`" alt="1563344302139" tabindex="0" loading="lazy"><figcaption>1563344302139</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableDiscoveryClient</span>	<span class="token comment">// 开启eureka</span>
<span class="token annotation punctuation">@EnableConfigServer</span> <span class="token comment">// 开启config服务支持</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigCenterServerApplication</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ConfigCenterServerApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-3-编写配置文件" tabindex="-1"><a class="header-anchor" href="#_3-3-3-编写配置文件" aria-hidden="true">#</a> 3.3.3 编写配置文件</h3><p>编写application.yml文件，配置内容如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">12000</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> config<span class="token punctuation">-</span>server
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span>
      <span class="token key atrule">server</span><span class="token punctuation">:</span>
        <span class="token key atrule">git</span><span class="token punctuation">:</span>
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//gitee.com/ruanwen/itheima<span class="token punctuation">-</span>spring<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>config.git
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>10086/eureka
<span class="token key atrule">logging</span><span class="token punctuation">:</span>
  <span class="token key atrule">level</span><span class="token punctuation">:</span>
    <span class="token key atrule">com</span><span class="token punctuation">:</span> debug

PS：注释说明
<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">12000</span> <span class="token comment"># 端口号</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> config<span class="token punctuation">-</span>server <span class="token comment"># 应用名</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span>
      <span class="token key atrule">server</span><span class="token punctuation">:</span>
        <span class="token key atrule">git</span><span class="token punctuation">:</span>
          <span class="token comment"># 配置gitee的仓库地址</span>
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//gitee.com/ruanwen/itheima<span class="token punctuation">-</span>spring<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>config.git
<span class="token comment"># Eureka服务中心配置</span>
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token comment"># 注册Eureka Server集群</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>10086/eureka
<span class="token comment"># com.itheima 包下的日志级别都为Debug</span>
<span class="token key atrule">logging</span><span class="token punctuation">:</span>
  <span class="token key atrule">level</span><span class="token punctuation">:</span>
    <span class="token key atrule">com</span><span class="token punctuation">:</span> debug

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-4-启动测试" tabindex="-1"><a class="header-anchor" href="#_3-3-4-启动测试" aria-hidden="true">#</a> 3.3.4 启动测试</h3>`,16),Ba={href:"http://localhost:12000/user-dev.yml",target:"_blank",rel:"noopener noreferrer"},Ua=t('<figure><img src="'+ln+'" alt="1563344594304" tabindex="0" loading="lazy"><figcaption>1563344594304</figcaption></figure><ul><li><p>修改码云中配置内容，再去刷新看看配置是否能同步：可以的。</p><figure><img src="'+cn+`" alt="1563345502299" tabindex="0" loading="lazy"><figcaption>1563345502299</figcaption></figure></li></ul><h2 id="_3-4-服务获取配置中心配置信息" tabindex="-1"><a class="header-anchor" href="#_3-4-服务获取配置中心配置信息" aria-hidden="true">#</a> 3.4 服务获取配置中心配置信息</h2><h3 id="_3-4-1-需求" tabindex="-1"><a class="header-anchor" href="#_3-4-1-需求" aria-hidden="true">#</a> 3.4.1 需求</h3><p>服务提供方工程中，配置文件内容不在由该服务自己去提供，而是从配置中心上获取。</p><h3 id="_3-4-2-添加依赖" tabindex="-1"><a class="header-anchor" href="#_3-4-2-添加依赖" aria-hidden="true">#</a> 3.4.2 添加依赖</h3><p>在服务提供方添加Spring Cloud Config依赖。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--spring cloud 配置中心--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+on+'" alt="1563346244241" tabindex="0" loading="lazy"><figcaption>1563346244241</figcaption></figure><h3 id="_3-4-3-修改配置" tabindex="-1"><a class="header-anchor" href="#_3-4-3-修改配置" aria-hidden="true">#</a> 3.4.3 修改配置</h3><ul><li><p>删除提供方application.yml文件； 应用场景：开发中配置具体的中间件（Redis、tomcat、mq等等）</p><ul><li>配置开发过程中的具体的应用的（应用性的配置：tomcat、redis、mq、kafka。。。）</li></ul></li><li><p>添加bootstrap.yml文件，配置内容如下 框架本身的配置信息。</p><ul><li>系统级别的配置（服务在启动的过程中需要加载配置信息）</li></ul><figure><img src="'+un+`" alt="1563346418143" tabindex="0" loading="lazy"><figcaption>1563346418143</figcaption></figure></li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 无注释版</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span>
      <span class="token key atrule">name</span><span class="token punctuation">:</span> user
      <span class="token key atrule">profile</span><span class="token punctuation">:</span> dev
      <span class="token key atrule">label</span><span class="token punctuation">:</span> master
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
        <span class="token key atrule">service-id</span><span class="token punctuation">:</span> config<span class="token punctuation">-</span>server
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>10086/eureka

<span class="token comment"># 注释版本      </span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span>
      <span class="token key atrule">name</span><span class="token punctuation">:</span> user <span class="token comment"># 与远程仓库中的配置文件的application保持一致，{application}-{profile}.yml</span>
      <span class="token key atrule">profile</span><span class="token punctuation">:</span> dev <span class="token comment"># 远程仓库中的配置文件的profile保持一致</span>
      <span class="token key atrule">label</span><span class="token punctuation">:</span> master <span class="token comment"># 远程仓库中的版本保持一致</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 使用配置中心</span>
        <span class="token key atrule">service-id</span><span class="token punctuation">:</span> config<span class="token punctuation">-</span>server <span class="token comment"># 配置中心服务id</span>

<span class="token comment">#向Eureka服务中心集群注册服务</span>
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>10086/eureka
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>当使用 Spring Cloud 的时候，配置信息一般是从 config server 加载的，为了取得配置信息（比如密码等），你需要一些提早的或引导配置。因此，把 config server 信息放在 bootstrap.yml，用来加载真正需要的配置信息。</p></li><li><p>application.yml和bootstrap.yml文件的说明</p><ul><li>bootstrap.yml文件是SpringBoot的默认配置文件，而且其加载时间相比于application.yml优先级更高（优先加载）</li><li>bootstrap.yml（系统级别）可以理解成系统级别的一些参数配置，一般不会变动</li><li>application.yml（应用级别）用来定义应用级别的参数</li></ul></li></ul><h3 id="_3-4-4-启动测试" tabindex="-1"><a class="header-anchor" href="#_3-4-4-启动测试" aria-hidden="true">#</a> 3.4.4 启动测试</h3><figure><img src="`+rn+'" alt="1563347549322" tabindex="0" loading="lazy"><figcaption>1563347549322</figcaption></figure><p>启动注册中心、服务提供方、网关服务、配置中心服务，判断是否能够进行调用：</p><figure><img src="'+dn+'" alt="1563347461411" tabindex="0" loading="lazy"><figcaption>1563347461411</figcaption></figure><h1 id="_4-spring-cloud-bus消息总线" tabindex="-1"><a class="header-anchor" href="#_4-spring-cloud-bus消息总线" aria-hidden="true">#</a> 4 Spring Cloud Bus消息总线</h1><h2 id="_4-1-需求" tabindex="-1"><a class="header-anchor" href="#_4-1-需求" aria-hidden="true">#</a> 4.1 需求</h2><p>获取配置中心的属性值：例如，获取test.hello对应的value值。</p><figure><img src="'+kn+'" alt="1563348390786" tabindex="0" loading="lazy"><figcaption>1563348390786</figcaption></figure><h2 id="_4-2-代码实现" tabindex="-1"><a class="header-anchor" href="#_4-2-代码实现" aria-hidden="true">#</a> 4.2 代码实现</h2><h3 id="_4-2-1-修改代码" tabindex="-1"><a class="header-anchor" href="#_4-2-1-修改代码" aria-hidden="true">#</a> 4.2.1 修改代码</h3><p>修改服务提供方controller代码，如下：</p><figure><img src="'+gn+'" alt="1563348597500" tabindex="0" loading="lazy"><figcaption>1563348597500</figcaption></figure><h3 id="_4-2-2-测试" tabindex="-1"><a class="header-anchor" href="#_4-2-2-测试" aria-hidden="true">#</a> 4.2.2 测试</h3>',26),ja={href:"http://localhost:10010/abc/user/findUserById/1?token=srre878ererrdr43",target:"_blank",rel:"noopener noreferrer"},Ta=n("figure",null,[n("img",{src:vn,alt:"1563348697132",tabindex:"0",loading:"lazy"}),n("figcaption",null,"1563348697132")],-1),Ha=n("li",null,[n("p",null,"重新编辑：配置中心的值，再次去测试："),n("figure",null,[n("img",{src:mn,alt:"1563348842750",tabindex:"0",loading:"lazy"}),n("figcaption",null,"1563348842750")])],-1),Ma=n("li",null,[n("p",null,"问题：当我们修改配置中心的值后，获取的数据还是原有的。提供方并没有及时同步到最新的数据。这个时候我们要重启服务提供方即可。"),n("figure",null,[n("img",{src:bn,alt:"1563349056119",tabindex:"0",loading:"lazy"}),n("figcaption",null,"1563349056119")])],-1),Oa=t('<h2 id="_4-3-思考" tabindex="-1"><a class="header-anchor" href="#_4-3-思考" aria-hidden="true">#</a> 4.3 思考</h2><p>如果有1000个（甚至更多）服务连接该配置中心，而每个服务又有多个实例（集群），那么都需要重启需要大量开销。而且在生产环境下也不允许这样去做，有可能会影响到线上的业务。因此，在这个问题当中我们可以通过Spring Cloud Bus消息总线去解决该问题。</p><h2 id="_4-4-spring-cloud-bus介绍" tabindex="-1"><a class="header-anchor" href="#_4-4-spring-cloud-bus介绍" aria-hidden="true">#</a> 4.4 Spring Cloud Bus介绍</h2><h3 id="_4-4-1-bus介绍" tabindex="-1"><a class="header-anchor" href="#_4-4-1-bus介绍" aria-hidden="true">#</a> 4.4.1 Bus介绍</h3><p>Spring Cloud Bus是用轻量的消息代理将分布式的节点连接起来,可以用于<strong>广播</strong>配置文件的更改或者服务的监控管理。一个关键的思想就是,消息总线可以为微服务做监控,也可以实现应用程序之间相互通信。 Spring Cloud Bus可选的消息代理线线泡括RabbitMQ、Kaka等。本次我们用 RabbitMQ作为 Spring Cloud的消息组件去刷新更改微服务的配置文件。</p><p>Spring Cloud Bus的一个功能就是让这个过程变得简单,当远程Git仓库的配置更改后,只需要向某一个微服务实例发送一个<strong>Post请求</strong>,通过消息组件通知其他微 服务实例重新拉取配置文件。</p><p>消息总线：</p><figure><img src="'+hn+`" alt="1563349816545" tabindex="0" loading="lazy"><figcaption>1563349816545</figcaption></figure><h3 id="_4-4-2-入门程序" tabindex="-1"><a class="header-anchor" href="#_4-4-2-入门程序" aria-hidden="true">#</a> 4.4.2 入门程序</h3><h4 id="_4-4-2-1-安装rabbitmq-软件" tabindex="-1"><a class="header-anchor" href="#_4-4-2-1-安装rabbitmq-软件" aria-hidden="true">#</a> 4.4.2.1 安装RabbitMQ-软件</h4><p>安装后并启动：略。（可参考文档中的安装步骤）</p><h4 id="_4-4-2-2-更新配置中心服务" tabindex="-1"><a class="header-anchor" href="#_4-4-2-2-更新配置中心服务" aria-hidden="true">#</a> 4.4.2.2 更新配置中心服务</h4><ul><li><p>第一步：在工程中添加依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--消息总线依赖--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-bus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--RabbitMQ依赖--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-stream-binder-rabbit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+fn+`" alt="1563350219186" tabindex="0" loading="lazy"><figcaption>1563350219186</figcaption></figure></li><li><p>第二步：修改application.yml文件</p><p>在配置文件中添加如下内容：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> guest
    <span class="token key atrule">password</span><span class="token punctuation">:</span> guest
<span class="token key atrule">management</span><span class="token punctuation">:</span>
  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>
    <span class="token key atrule">web</span><span class="token punctuation">:</span>
      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>
        <span class="token key atrule">include</span><span class="token punctuation">:</span> bus<span class="token punctuation">-</span>refresh

<span class="token comment"># 注释版</span>
<span class="token comment"># rabbitmq的配置信息；如下配置的rabbit都是默认值，其实可以完全不配置</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> guest
    <span class="token key atrule">password</span><span class="token punctuation">:</span> guest
<span class="token comment"># 暴露触发消息总线的地址</span>
<span class="token key atrule">management</span><span class="token punctuation">:</span>
  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>
    <span class="token key atrule">web</span><span class="token punctuation">:</span>
      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>
        <span class="token comment"># 暴露触发消息总线的地址</span>
        <span class="token key atrule">include</span><span class="token punctuation">:</span> bus<span class="token punctuation">-</span>refresh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+yn+`" alt="1563350343117" tabindex="0" loading="lazy"><figcaption>1563350343117</figcaption></figure></li></ul><h4 id="_4-4-2-3-更新服务提供方服务" tabindex="-1"><a class="header-anchor" href="#_4-4-2-3-更新服务提供方服务" aria-hidden="true">#</a> 4.4.2.3 更新服务提供方服务</h4><ul><li><p>第一步：在工程中添加依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--消息总线依赖--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-bus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--RabbitMQ依赖--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-stream-binder-rabbit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--健康监控依赖--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+_n+`" alt="1563350495056" tabindex="0" loading="lazy"><figcaption>1563350495056</figcaption></figure></li><li><p>第二步：修改bootstrap.yml文件：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> guest
    <span class="token key atrule">password</span><span class="token punctuation">:</span> guest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>第三步：修改UserController，添加**@RefreshScope**注解，刷新配置。</p><figure><img src="`+xn+'" alt="1563350697689" tabindex="0" loading="lazy"><figcaption>1563350697689</figcaption></figure></li></ul><h4 id="_4-4-2-4-启动相关服务测试" tabindex="-1"><a class="header-anchor" href="#_4-4-2-4-启动相关服务测试" aria-hidden="true">#</a> 4.4.2.4 启动相关服务测试</h4>',16),Da=n("li",null,[n("p",null,"修改码云上配置文件：略。")],-1),Na={href:"http://127.0.0.1:12000/actuator/bus-refresh",target:"_blank",rel:"noopener noreferrer"},Va=n("figure",null,[n("img",{src:wn,alt:"1563362190341",tabindex:"0",loading:"lazy"}),n("figcaption",null,"1563362190341")],-1),Za=n("li",null,[n("p",null,"再测试：效果如下："),n("figure",null,[n("img",{src:In,alt:"1563362241174",tabindex:"0",loading:"lazy"}),n("figcaption",null,"1563362241174")])],-1),La=n("h1",{id:"spring-cloud总架构",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#spring-cloud总架构","aria-hidden":"true"},"#"),a(" Spring Cloud总架构")],-1),Qa=n("figure",null,[n("img",{src:Sn,alt:"1563957797980",tabindex:"0",loading:"lazy"}),n("figcaption",null,"1563957797980")],-1);function Wa(Xa,Ja){const s=i("ExternalLinkIcon");return l(),c("div",null,[Fn,n("p",null,[a("开源项目地址： "),n("a",zn,[a("https://github.com/OpenFeign/feign"),e(s)])]),Pn,n("p",null,[a("启动服务并且进行访问测试。"),n("a",An,[a("http://localhost:8080/feign/user/getUser/1"),e(s)])]),Rn,n("p",null,[a("停止服务提供方程序，发送请求"),n("a",qn,[a("http://localhost:8080/feign/user/getUser/1"),e(s)]),a(" ，结果如下：")]),Gn,n("ul",null,[En,n("li",null,[Bn,a("：这是一个 "),n("a",Un,[a("Java 8 的 Predicate"),e(s)]),a("。输入类型是一个 "),n("a",jn,[Tn,e(s)]),a("。我们可以使用它来匹配来自 HTTP 请求的任何内容，例如 headers 或参数。 请求做一些配置")]),Hn]),Mn,n("p",null,[a("启动所有服务，访问测试："),n("a",On,[a("http://localhost:10010/user/findUserById/2"),e(s)])]),Dn,n("ul",null,[n("li",null,[Nn,n("p",null,[n("a",Vn,[a("http://localhost:10010/user/findUserById/2"),e(s)])]),Zn])]),Ln,n("p",null,[a("详细说明官方"),n("a",Qn,[a("链接"),e(s)])]),Wn,n("ul",null,[n("li",null,[Xn,n("ul",null,[Jn,n("li",null,[n("p",null,[a("第三步：测试："),n("a",Kn,[a("http://localhost:10010/1"),e(s)])]),Yn]),n("li",null,[$n,n("table",null,[na,n("tbody",null,[n("tr",null,[aa,n("td",null,[n("a",sa,[a("http://localhost:10010/8"),e(s)])]),n("td",null,[n("a",ea,[a("http://localhost:9091/user/8"),e(s)])])]),n("tr",null,[ta,n("td",null,[n("a",pa,[a("http://localhost:10010/8"),e(s)])]),n("td",null,[n("a",ia,[a("http://localhost:9091/user/abc/8"),e(s)])])])])])])])]),n("li",null,[la,n("ul",null,[ca,n("li",null,[n("p",null,[a("第三步：测试："),n("a",oa,[a("http://localhost:10010/xxx/user/findUserById/1"),e(s)])]),ua]),n("li",null,[ra,n("table",null,[da,n("tbody",null,[n("tr",null,[ka,n("td",null,[n("a",ga,[a("http://localhost:10010/api/user/1"),e(s)])]),n("td",null,[n("a",va,[a("http://localhost:9091/user/1"),e(s)])])]),n("tr",null,[ma,n("td",null,[n("a",ba,[a("http://localhost:10010/api/user/1"),e(s)])]),n("td",null,[n("a",ha,[a("http://localhost:9091/1"),e(s)])])])])])])])])]),fa,n("p",null,[ya,a("。（"),n("a",_a,[a("https://cloud.spring.io/spring-cloud-static/Greenwich.SR2/single/spring-cloud.html#_gatewayfilter_factories"),e(s)]),a(" ）")]),xa,n("ul",null,[n("li",null,[n("p",null,[a("请求："),n("a",wa,[a("http://localhost:10010/abc/user/findUserById/1"),e(s)])]),Ia,Sa]),n("li",null,[n("p",null,[a("请求："),n("a",Ca,[a("http://localhost:10010/abc/user/findUserById/1?token=srre878ererrdr43"),e(s)])]),Fa])]),za,n("p",null,[a("启动网关服务，发送请求："),n("a",Pa,[a("http://localhost:10010/abc/user/findUserById/1?token=srre878ererrdr43"),e(s)])]),Aa,n("ul",null,[Ra,qa,n("li",null,[a("码云访问地址："),n("a",Ga,[a("http://gitee.com"),e(s)])])]),Ea,n("ul",null,[n("li",null,[a("启动注册中心服务以及该服务进行测试："),n("a",Ba,[a("http://localhost:12000/user-dev.yml"),e(s)])])]),Ua,n("ul",null,[n("li",null,[n("p",null,[a("启动提供方，测试："),n("a",ja,[a("http://localhost:10010/abc/user/findUserById/1?token=srre878ererrdr43"),e(s)])]),Ta]),Ha,Ma]),Oa,n("ul",null,[Da,n("li",null,[n("p",null,[a("广播：发送POST请求，地址："),n("a",Na,[a("http://127.0.0.1:12000/actuator/bus-refresh"),e(s)])]),Va]),Za]),La,Qa])}const $a=p(Cn,[["render",Wa],["__file","SpringCloud（二）.html.vue"]]);export{$a as default};
