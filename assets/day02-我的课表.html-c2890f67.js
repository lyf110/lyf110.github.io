import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as n,b as s,d as t,e as p}from"./app-5f6064b2.js";const l="/assets/1689420902042-73-e852d532.png",u="/assets/1689420902014-1-f2cda4b9.png",r="/assets/1689420902015-2-1249474e.png",d="/assets/1689420902015-3-d65ff6c8.png",k="/assets/1689420902015-4-93525a4a.png",m="/assets/1689420902015-5-8868c842.png",g="/assets/1689420902015-6-42ce8e8f.png",v="/assets/1689420902016-7-049f3e62.png",b="/assets/image-20230715193603535-241e70ff.png",f="/assets/1689420902016-8-392c2a9e.png",y="/assets/1689420902016-9-e2270f45.png",h="/assets/1689420902016-10-25a4945f.png",_="/assets/1689420902016-11-4c5d3dcc.png",w="/assets/1689420902016-12-06c44c51.png",L="/assets/1689420902016-13-204213c5.png",x="/assets/image-20230715230256872-91f29c6a.png",I="/assets/1689420902017-14-f6050524.png",O="/assets/1689420902017-15-a7d39e87.png",C="/assets/1689420902017-16-c42a3e5d.png",q="/assets/1689420902017-17-cffe7e9f.png",S="/assets/1689420902017-18-10b56ea6.png",E="/assets/image-20230715193903752-d5767bb5.png",T="/assets/1689420902017-19-f095098f.png",j="/assets/1689420902017-20-ceec982a.png",M="/assets/1689420902017-21-d82ed8d5.png",z="/assets/1689420902017-22-09af7b38.png",R="/assets/image-20230715194001763-f0927a45.png",U="/assets/1689420902018-23-f488b58b.png",N="/assets/1689420902018-24-64dd653e.png",D="/assets/1689420902018-25-177190db.png",A="/assets/image-20230715194115675-d252cbf5.png",P="/assets/1689420902018-26-5b1deb44.png",V="/assets/1689420902018-27-582da6b0.png",B="/assets/image-20230715194138170-77c6a070.png",F="/assets/1689420902018-28-19cb9067.png",G="/assets/1689420902018-29-4a699746.png",Q="/assets/1689420902018-30-25f40de7.png",H="/assets/1689420902018-31-d984d752.png",J="/assets/1689420902018-32-e077db7b.png",K="/assets/1689420902019-33-0b900f06.png",Y="/assets/image-20230715194027037-4a91b46d.png",X="/assets/1689420902019-34-0cdb8edd.png",W="/assets/1689420902019-35-fd75e228.png",Z="/assets/1689420902019-36-6e692d2e.png",$="/assets/1689420902019-37-e9b56182.png",nn="/assets/1689420902019-38-8c9f6998.png",sn="/assets/1689420902019-39-54d726b1.png",an="/assets/1689420902019-40-d787fae2.png",tn="/assets/1689420902019-41-57ef94cb.png",pn="/assets/1689420902019-42-2e60e192.png",en="/assets/1689420902020-43-79cdced9.png",on="/assets/1689420902020-44-05449b22.png",cn="/assets/1689420902020-45-b70f93b9.png",ln="/assets/1689420902020-46-971d5e7c.png",un="/assets/1689420902020-47-fd9fcff2.png",rn="/assets/1689420902020-48-9cea9f23.png",dn="/assets/image-20230715194236375-a6139a5b.png",kn="/assets/1689420902020-49-a6d5cf8e.png",mn="/assets/1689420902020-50-bb2157ba.png",gn="/assets/1689420902020-51-aaaeca4f.png",vn="/assets/1689420902020-52-580a645b.png",bn="/assets/image-20230715194322425-082ab455.png",fn="/assets/1689420902021-53-22e3f4e2.png",yn="/assets/1689420902021-54-09d4899c.png",hn="/assets/1689420902021-55-e6bba646.png",_n="/assets/1689420902021-56-7d9fa013.png",wn="/assets/image-20230715193903752-d5767bb5.png",Ln="/assets/1689420902021-57-173b763f.png",xn="/assets/1689420902021-58-12149015.png",In="/assets/1689420902021-59-7cb32ca4.png",On="/assets/1689420902021-60-4f17810b.png",Cn="/assets/1689420902021-61-e999d1f8.png",qn="/assets/1689420902017-21-d82ed8d5.png",Sn="/assets/1689420902022-63-edfa7cd1.png",En="/assets/image-20230715194452905-65b67171.png",Tn="/assets/image-20230715194504849-a150208c.png",jn="/assets/1689420902022-64-0d4d0b6c.png",Mn="/assets/1689420902022-65-d7524286.png",zn="/assets/1689420902022-66-c713a13c.jpeg",Rn="/assets/image-20230715194553065-caa839ae.png",Un="/assets/1689420902022-67-ba237535.png",Nn="/assets/1689420902022-68-c1689966.png",Dn="/assets/1689420902022-69-2544acdb.png",An="/assets/1689420902022-70-fa7d3de7.png",Pn="/assets/1689420902022-71-e0a91d84.png",Vn="/assets/1689420902023-72-78772a66.png",Bn="/assets/image-20230715194654140-e2f840ea.png",Fn={},Gn=p('<h1 id="day02-我的课表" tabindex="-1"><a class="header-anchor" href="#day02-我的课表" aria-hidden="true">#</a> day02-我的课表</h1><p>在昨天的学习中，我们解决了一个简单的BUG。并且演示了整个项目的核心业务流程。现在，你对项目有了基本的了解，是时候动手开发一些业务功能了。</p><p><strong>场景</strong>是这样的：</p><p>你进入公司以后，组长给你分配了一些简单的BUG修复功能，帮助你熟悉了整个项目。接下来你们小组接收了一个正式的开发任务：<strong>开发天机学堂项目的学习辅助相关功能</strong>。</p><p>不要小看这部分功能，作为一个在线教育项目，学习是核心。而怎样让学员有一个好的学习体验，持续有动力的学习，就显得非常关键。我们要实现的学习辅助功能，就是要起到激励、促进学员、帮助学员学习的功能，非常重要。</p><p>那么从哪里入手呢？</p><p>我们来回顾一下，在演示项目业务流程时，我们发现搜索课程、报名课程等流程都已经完成开发了。并且在《个人中心-我的订单》页面可以看到我们下单报名的课程：</p><figure><img src="'+l+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>然而，在我的课程页面中，却看不到这些课程：</p><figure><img src="'+u+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>看不到课程自然就无法学习。所以今天我们要完成的任务就是开发学习中心的《我的课程表》相关接口，让学员看到课程，然后才可以学习课程。</p><p>但是，很多同学进入公司以后，接手一个任务，根本毫无头绪，不知道从何做起。事实上，接口开发是有一些固定套路的。</p><p>企业实际开发中，一般的流程是这样的：</p><figure><img src="'+r+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>需要强调的一点是，开发中最重要的环节其实是前两步：</p><ul><li>原型分析、接口设计</li><li>数据库设计</li></ul><p>只要前两步分析完成，功能开发就比较简单了。</p><p>那为什么要先设计接口呢？原因有两点：</p><ul><li>第一：目前企业开发的模式往往是前后端分离，前后端并行开发。前端开发需要调用后端接口，后端需要开发接口返回数据给前端，要想并行开发，就必须有一套接口标准，前后端基于接口完成开发。</li><li>第二：设计接口的过程就是分析业务的过程，弄清楚了业务的细节，更有助于我们设计数据库结构，开发接口功能。</li></ul><p>因此，我们将遵循企业开发的流程，先分析原型、设计接口，再设计数据库结构，最后再开发接口功能。</p><p>通过今天的学习，我们要达成的目标如下：</p><ul><li>完成我的课程表相关功能</li><li>学会阅读产品原型，分析需求</li><li>能根据需求设计接口</li><li>能根据需求设计数据库表</li><li>学会跨微服务的业务开发</li></ul><h2 id="_1-接口设计" tabindex="-1"><a class="header-anchor" href="#_1-接口设计" aria-hidden="true">#</a> 1.接口设计</h2><p>天机学堂是一个开发中的项目，前期的需求分析已经完成，并且产品经理也设计出了产品原型，地址：</p>',24),Qn={href:"https://lanhuapp.com/link/#/invite?sid=qx03viNU",target:"_blank",rel:"noopener noreferrer"},Hn={href:"https://lanhuapp.com/link/#/invite?sid=qx0Fy3fa",target:"_blank",rel:"noopener noreferrer"},Jn=p('<p>我们可以基于产品原型来分析业务。</p><h3 id="_1-1-分析业务流程" tabindex="-1"><a class="header-anchor" href="#_1-1-分析业务流程" aria-hidden="true">#</a> 1.1.分析业务流程</h3><p>在用户的《个人中心》，有一个《我的课程》列表页，如图：</p><figure><img src="'+d+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>那么这些课程是从何而来的，原型的页面说明中有告诉我们：</p><figure><img src="'+k+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>从这里可以看出，凡是<strong>购买过的课程，都应该加入到课程列表</strong>中。</p><p>需要注意的是，刚刚加入课表的课程处于未学习状态，这个时候学员可以创建一个学习计划，规划后期的学习节奏：</p><figure><img src="'+m+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>所谓的学习计划，就是规划自己的学习频率：</p><figure><img src="'+g+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>一旦有了计划，系统就可以统计学习进度，并且提示用户，督促用户抓紧时间学习：</p><figure><img src="'+v+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>当然，在学习的过程中，课程的状态会不断发生变化：</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>页面开发规则</p><ol><li>已购课程状态变化</li></ol><p>1） 未学习，已购买课程还未开始学习，可以开始学习</p><p>2） 已学习，已购买课程已开始学习，展示学习进度，可以继续学习</p><p>3） 已学完，已购买课程已经学完，可以重新学习</p><p>4） 已失效，已购买课程已过期，不可继续学习，只能删除课程操作</p></div><p>由上述跟课程表有关的内容，我们可以推测出《课程表》的业务流转过程是这样的：</p><figure><img src="'+b+'" alt="image-20230715193603535" tabindex="0" loading="lazy"><figcaption>image-20230715193603535</figcaption></figure><p>在今天的任务中，我们先完成《课程表》相关功能，《学习计划》暂放一边。</p><h3 id="_1-2-接口统计" tabindex="-1"><a class="header-anchor" href="#_1-2-接口统计" aria-hidden="true">#</a> 1.2.接口统计</h3><p>我们来梳理一下在整个过程中学员可能要做哪些事情，这些事情将来就可能是我们要实现的服务端接口。梳理的方式就是查看原型图，分析哪里可能产生用户交互行为。</p><h4 id="_1-2-1-加入课表" tabindex="-1"><a class="header-anchor" href="#_1-2-1-加入课表" aria-hidden="true">#</a> 1.2.1.加入课表</h4><p>首先，用户支付完成后，需要将购买的课程加入课表：</p><figure><img src="'+f+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>而支付成功后，交易服务会基于MQ通知的方式，通知学习服务来执行加入课表的动作。因此，我们要实现的第一个接口就是：</p><blockquote><p>支付或报名课程后，监听到MQ通知，将课程加入课表。</p></blockquote><h4 id="_1-2-2-分页查询课表" tabindex="-1"><a class="header-anchor" href="#_1-2-2-分页查询课表" aria-hidden="true">#</a> 1.2.2.分页查询课表</h4><p>在加入课表以后，用户就可以在个人中心查看到这些课程：</p><figure><img src="'+y+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>因此，这里就需要第二个接口：</p><blockquote><p>分页查询我的课表</p></blockquote><p>当然，在这个页面大家还能看到跟<strong>学习计划</strong>有关的按钮，不过本节课我们暂时不讨论学习计划的相关功能实现。</p><p>另外，当课程学完后，可以选择删除课程：</p><figure><img src="'+h+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>所以，还要有删除课程的接口：</p><blockquote><p>删除指定课程</p></blockquote><p>除此以外，如果用户退款，也应该删除课表中的课程，这里同样是通过MQ通知来实现：</p><blockquote><p>退款后，监听到MQ通知，删除指定课程</p></blockquote><h4 id="_1-2-3-查询学习进度" tabindex="-1"><a class="header-anchor" href="#_1-2-3-查询学习进度" aria-hidden="true">#</a> 1.2.3.查询学习进度</h4><p>在个人中心，我的课表页面，还能看到用户最近的学习进度：</p><figure><img src="'+_+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这里就包含两个接口：</p><div class="hint-container warning"><p class="hint-container-title">注意</p><ol><li>查询最近正在学习的课程</li><li>查询学习计划的进度（学习计划相关，暂不实现）</li></ol></div><h4 id="_1-2-4-查询指定课程学习状态" tabindex="-1"><a class="header-anchor" href="#_1-2-4-查询指定课程学习状态" aria-hidden="true">#</a> 1.2.4.查询指定课程学习状态</h4><p>还有，在课程详情页面，如果当前课程已经购买，也要展示出课程的学习进度：</p><figure><img src="'+w+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>因此，这里还需要一个接口：</p><blockquote><p>根据id查询指定课程的学习状态</p></blockquote><h4 id="_1-2-5-内部访问接口" tabindex="-1"><a class="header-anchor" href="#_1-2-5-内部访问接口" aria-hidden="true">#</a> 1.2.5.内部访问接口</h4><p>除了页面原型中看到的接口以外，其它微服务也对<code>tj-learning</code>服务有数据需求，并且也定义了一些需要我们实现的Feign接口。</p><p>在天机学堂的项目中，所有Feign接口都定义在了<code>tj-api</code>模块下，<code>learning</code>服务的接口定义在<code>com.tianji.api.client.learning</code>模块下：</p><figure><img src="'+L+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这里包含两个接口：</p><div class="hint-container warning"><p class="hint-container-title">注意</p><ol><li>统计某课程的报名人数：后台管理的某些地方需要知道课程的报名人数</li><li>校验当前用户是否报名了指定课程：用户学习课程的前提是报名了课程，某些业务中需要做校验</li></ol></div><h4 id="_1-2-6-总结" tabindex="-1"><a class="header-anchor" href="#_1-2-6-总结" aria-hidden="true">#</a> 1.2.6.总结</h4><p>综上，与我的课表有关的接口有：</p>',55),Kn=n("table",null,[n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},[n("strong",null,"编号")]),n("th",{style:{"text-align":"center"}},[n("strong",null,"接口简述")]),n("th",{style:{"text-align":"center"}},[n("strong",null,"请求方式")]),n("th",{style:{"text-align":"center"}},[n("strong",null,"请求路径")])])]),n("tbody",null,[n("tr",null,[n("td",{style:{"text-align":"center"}},"1"),n("td",{style:{"text-align":"center"}},"支付或报名课程后，立刻加入课表"),n("td",{style:{"text-align":"center"}},"MQ通知"),n("td",{style:{"text-align":"center"}})]),n("tr",null,[n("td",{style:{"text-align":"center"}},"2"),n("td",{style:{"text-align":"center"}},"分页查询我的课表"),n("td",{style:{"text-align":"center"}},"GET"),n("td",{style:{"text-align":"center"}},"/lessons/page")]),n("tr",null,[n("td",{style:{"text-align":"center"}},"3"),n("td",{style:{"text-align":"center"}},"查询我最近正在学习的课程"),n("td",{style:{"text-align":"center"}},"GET"),n("td",{style:{"text-align":"center"}},"/lessons/now")]),n("tr",{courseId:""},[n("td",{style:{"text-align":"center"}},"4"),n("td",{style:{"text-align":"center"}},"根据id查询指定课程的学习状态"),n("td",{style:{"text-align":"center"}},"GET"),n("td",{style:{"text-align":"center"}},"/lessons/")]),n("tr",{courseId:""},[n("td",{style:{"text-align":"center"}},"5"),n("td",{style:{"text-align":"center"}},"删除课表中的某课程"),n("td",{style:{"text-align":"center"}},"DELETE"),n("td",{style:{"text-align":"center"}},"/lessons/")]),n("tr",null,[n("td",{style:{"text-align":"center"}},"6"),n("td",{style:{"text-align":"center"}},"退款后，立刻移除课表中的课程"),n("td",{style:{"text-align":"center"}},"MQ通知"),n("td",{style:{"text-align":"center"}})]),n("tr",null,[n("td",{style:{"text-align":"center"}},"7"),n("td",{style:{"text-align":"center"}},"校验指定课程是否是课表中的有效课程（Feign接口）"),n("td",{style:{"text-align":"center"}},"GET"),n("td",{style:{"text-align":"center"}},"/lessons/{courseId}/valid")]),n("tr",null,[n("td",{style:{"text-align":"center"}},"8"),n("td",{style:{"text-align":"center"}},"统计课程学习人数（Feign接口）"),n("td",{style:{"text-align":"center"}},"GET"),n("td",{style:{"text-align":"center"}},"/lessons/{courseId}/count")])])],-1),Yn=n("p",null,"那么接下来，我们就一起来分析、设计、实现这些接口吧。",-1),Xn=n("h3",{id:"_1-3-接口分析设计",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-3-接口分析设计","aria-hidden":"true"},"#"),s(" 1.3.接口分析设计")],-1),Wn=n("p",null,"那么问题来了，我们该如何分析、设计一个接口呢？",-1),Zn=n("h4",{id:"_1-3-1-接口分析和设计的一般方法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-3-1-接口分析和设计的一般方法","aria-hidden":"true"},"#"),s(" 1.3.1.接口分析和设计的一般方法")],-1),$n=n("p",null,"企业开发中往往会通过一些工具来设计API接口，比如比较常见的一款API接口工具：YAPI",-1),ns={href:"http://yapi.smart-xwork.cn/",target:"_blank",rel:"noopener noreferrer"},ss=p('<figure><img src="'+x+'" alt="image-20230715230256872" tabindex="0" loading="lazy"><figcaption>image-20230715230256872</figcaption></figure><p>我们先来看一下这个工具的接口设计页面，它分成三大部分：</p><ul><li>基本设置</li><li>请求参数设置</li><li>返回数据设置</li></ul><p>首先是基本设置：</p><figure><img src="'+I+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>在这里要填写的是某个接口的基本信息，例如接口名字、分类（或者叫分组）、状态等。但其中最重要的就是接口的路径。路径中需要填写的核心有两部分：</p><ul><li>请求方式：也就是http请求的方式，本例中是GET</li><li>请求路径：也就是请求的资源路径，本例中是/users</li></ul><p>知道了这些信息，前端就知道该<strong>向哪里发送请求了</strong>。</p><p>然后是当前接口的请求参数设置：</p><figure><img src="'+O+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这里主要描述查询参数的基本信息，包括：</p><ul><li>参数名称</li><li>参数是否必须</li><li>参数示例</li><li>参数描述</li></ul><p>由于这里是查询用户集合，请求方式是GET，因此查询参数就是普通的QUERY参数，也就是路径后的<code>?</code></p><p>拼接参数。如果是POST或者PUT请求，这里还可以传递更复杂的参数格式，比如FORM表单、JSON等</p><p>知道了这些，前端就知道<strong>发送请求时，要携带哪些参数</strong>了。</p><p>最后一部分就是返回数据设置：</p><figure><img src="'+C+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这里就定义了返回的详细信息：</p><ul><li>字段名称</li><li>字段类型</li><li>字段示例</li></ul><p>知道了这些信息，前端就知道<strong>渲染时可以使用的字段</strong>了。</p><p>综上所述，接口设计的核心要素包括：</p><ul><li>请求方式</li><li>请求路径</li><li>请求参数格式</li><li>返回值格式</li></ul><p>知道了上述信息，前端就知道该向哪里发请求、请求要携带哪些参数、请求可以得到什么结果。而后端也能根据这些信息定义Controller接口、知道接口方式和路径、方法的参数、方法的返回值格式了。</p><p>但问题来了，上述要素我们该如何得知呢？</p><p>一般来说，可以按照下面的思路来设计：</p><ul><li><strong>请求方式</strong>和<strong>请求路径</strong>：这一部分只要遵循Restful风格即可</li><li><strong>请求参数</strong>和<strong>返回值格式</strong>：结合页面原型和需求，与前端、后端、产品的同事共同协商决定。</li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>这里比较复杂的就是参数和返回值，在分析的时候切忌自己臆想，<strong>不确定的地方一定要跟<strong><strong>产品经理</strong></strong>反复确认，最好邮件确认</strong>，避免以后扯皮。</p><p>然后与前端协商，或者跟调用你接口的后端同事协商。看页面渲染、其它服务需要哪些数据，而我们要查询这些数据需要哪些参数，最终确定接口的参数和返回值格式。</p><p>注意，上述过程不是一蹴而就的，很有可能会经过多次调整，这是非常正常的现象，核心思想就是<strong>一定要多沟通，多确认，不要自己任意妄为</strong>。</p></div><p>由于教学需要，我们的前端全部都已经开发完成，无法沟通协商来修改了。因此我们重点是根据页面原型来分析参数和返回值需要的字段。</p><p>具体到字段的名字，我会告诉大家，大家按照我给出的字段来设计即可（因为前端字段名称都已经写死）。</p><h4 id="_1-3-2-分页查询我的课表" tabindex="-1"><a class="header-anchor" href="#_1-3-2-分页查询我的课表" aria-hidden="true">#</a> 1.3.2.分页查询我的课表</h4><p>按照Restful风格，查询请求应该使用<code>GET</code>方式。</p><p>请求路径一般是资源名称，比如这里资源是课表，所以资源名可以使用<code>lessons</code>，同时这里是分页查询，可以在路径后跟一个<code>/page</code>，代表分页查询</p><p>请求参数，因为是分页查询，首先肯定要包含分页参数，一般有两个：</p><ul><li>pageNo：页码</li><li>pageSize：每页大小</li></ul><p>同时还要看页面是否有其它过滤条件，查看原型：</p><figure><img src="'+q+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>可以发现，这里只有两个排序条件，没有过滤条件，因此加上两个排序字段即可：</p><ul><li>sortBy：排序方式</li><li>isAsc：是否升序</li></ul><p>而返回值则复杂一些，需要结合页面需要展示的信息来看：</p><figure><img src="'+S+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>肉眼可见的字段就包含：</p><ul><li>课程名称</li><li>课程加入课表时间</li><li>课程有效期结束时间</li><li>课程状态</li><li>课程已学习小节数</li><li>课程总小节数</li><li>课程是否创建了学习计划</li></ul><p>还有一些字段是页面中没有的，但是可以从功能需要中推测出来，例如：</p><ul><li>课程id：因为我们点击卡片，需要跳转到对应课程页面，必须知道课程id</li><li>课程封面：页面渲染时为了美观，一定会展示一个课程的封面图片</li><li>学习计划频率：当用户点击修改学习计划时，需要回显目前的学习计划频率</li><li>课表id，当前课程在课表中的对应id，当用户点击继续学习，或创建集合，需要根据课表来操作</li></ul><p>综上，最终的接口信息如下：</p><figure><img src="'+E+'" alt="image-20230715193903752" tabindex="0" loading="lazy"><figcaption>image-20230715193903752</figcaption></figure><p>后续所有的接口设计都可以参考这种思路来做。</p><p>与这个接口对应的，我们需要定义一下几个实体：</p><ul><li>统一的分页请求Query实体</li><li>统一的分页结果DTO实体</li><li>课表分页VO实体</li></ul><p>由于分页请求、分页结果比较常见，我们提前在tj-common模块定义好了。</p><p>其中，统一分页请求实体，称为PageQuery：</p><figure><img src="'+T+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>统一分页结果实体，称为PageDTO：</p><figure><img src="'+j+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>最后，返回结果中的课表VO实体，在课前资料已经提供给大家了：</p><figure><img src="'+M+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="_1-3-3-添加课程到课表" tabindex="-1"><a class="header-anchor" href="#_1-3-3-添加课程到课表" aria-hidden="true">#</a> 1.3.3.添加课程到课表</h4><p>当用户支付完成或者报名免费课程后，应该立刻将课程加入到课表中。交易服务会通过MQ通知学习服务，我们需要查看交易服务的源码，查看MQ通知的消息格式，来确定监听消息的格式。</p><p>我们以免费报名课程为例来看：</p><p>在<code>trade-service</code>的<code>OrderController</code>中，有一个报名免费课程的接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">&quot;免费课立刻报名接口&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/freeCourse/{courseId}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">PlaceOrderResultVO</span> <span class="token function">enrolledFreeCourse</span><span class="token punctuation">(</span>
    <span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span><span class="token string">&quot;免费课程id&quot;</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;courseId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> courseId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> orderService<span class="token punctuation">.</span><span class="token function">enrolledFreeCourse</span><span class="token punctuation">(</span>courseId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到这里调用了<code>OrderService</code>的<code>enrolledFreeCourse()</code>方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token annotation punctuation">@Transactional</span>
<span class="token keyword">public</span> <span class="token class-name">PlaceOrderResultVO</span> <span class="token function">enrolledFreeCourse</span><span class="token punctuation">(</span><span class="token class-name">Long</span> courseId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Long</span> userId <span class="token operator">=</span> <span class="token class-name">UserContext</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 1.查询课程信息</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> cIds <span class="token operator">=</span> <span class="token class-name">CollUtils</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>courseId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CourseSimpleInfoDTO</span><span class="token punctuation">&gt;</span></span> courseInfos <span class="token operator">=</span> <span class="token function">getOnShelfCourse</span><span class="token punctuation">(</span>cIds<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>courseInfos<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 课程不存在</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BizIllegalException</span><span class="token punctuation">(</span><span class="token class-name">TradeErrorInfo</span><span class="token punctuation">.</span><span class="token constant">COURSE_NOT_EXISTS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">CourseSimpleInfoDTO</span> courseInfo <span class="token operator">=</span> courseInfos<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>courseInfo<span class="token punctuation">.</span><span class="token function">getFree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 非免费课程，直接报错</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BizIllegalException</span><span class="token punctuation">(</span><span class="token class-name">TradeErrorInfo</span><span class="token punctuation">.</span><span class="token constant">COURSE_NOT_FREE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 2.创建订单</span>
    <span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.1.基本信息</span>
    order<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    order<span class="token punctuation">.</span><span class="token function">setTotalAmount</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    order<span class="token punctuation">.</span><span class="token function">setDiscountAmount</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    order<span class="token punctuation">.</span><span class="token function">setRealAmount</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    order<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">OrderStatus</span><span class="token punctuation">.</span><span class="token constant">ENROLLED</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    order<span class="token punctuation">.</span><span class="token function">setFinishTime</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    order<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token class-name">OrderStatus</span><span class="token punctuation">.</span><span class="token constant">ENROLLED</span><span class="token punctuation">.</span><span class="token function">getProgressName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.2.订单id</span>
    <span class="token class-name">Long</span> orderId <span class="token operator">=</span> <span class="token class-name">IdWorker</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
    order<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 3.订单详情</span>
    <span class="token class-name">OrderDetail</span> detail <span class="token operator">=</span> <span class="token function">packageOrderDetail</span><span class="token punctuation">(</span>courseInfo<span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 4.写入数据库</span>
    <span class="token function">saveOrderAndDetails</span><span class="token punctuation">(</span>order<span class="token punctuation">,</span> <span class="token class-name">CollUtils</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>detail<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 5.发送MQ消息，通知报名成功</span>
    rabbitMqHelper<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>
            <span class="token class-name">MqConstants<span class="token punctuation">.</span>Exchange</span><span class="token punctuation">.</span><span class="token constant">ORDER_EXCHANGE</span><span class="token punctuation">,</span>
            <span class="token class-name">MqConstants<span class="token punctuation">.</span>Key</span><span class="token punctuation">.</span><span class="token constant">ORDER_PAY_KEY</span><span class="token punctuation">,</span>
            <span class="token class-name">OrderBasicDTO</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orderId</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">userId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">courseIds</span><span class="token punctuation">(</span>cIds<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 6.返回vo</span>
    <span class="token keyword">return</span> <span class="token class-name">PlaceOrderResultVO</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">orderId</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">payAmount</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，通知报名成功的逻辑是这部分：</p><figure><img src="`+z+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>由此，我们可以得知发送消息的Exchange、RoutingKey，以及消息体。消息体的格式是OrderBasicDTO，包含四个字段：</p><ul><li>orderId：订单id</li><li>userId：下单的用户id</li><li>courseIds：购买的课程id集合</li><li>finishTime：支付完成时间</li></ul><p>因此，在学习服务，我们需要编写的消息监听接口规范如下：</p><figure><img src="'+R+'" alt="image-20230715194001763" tabindex="0" loading="lazy"><figcaption>image-20230715194001763</figcaption></figure><p>其中的请求参数实体，由于是与交易服务公用的数据传递实体，也就是DTO，因此已经提前定义到了<code>tj-api</code>模块下的DTO包了。</p><figure><img src="'+U+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="_1-3-4-查询正在学习的课程" tabindex="-1"><a class="header-anchor" href="#_1-3-4-查询正在学习的课程" aria-hidden="true">#</a> 1.3.4.查询正在学习的课程</h4><p>页面原型中，有两个地方需要查看正在学习的课程。</p><p>第一个，在个人中心-我的课程：</p><figure><img src="'+N+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>另一个，在已登录情况下，首页的悬浮窗中：</p><figure><img src="'+D+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>与之前类似，我们需要定义出：请求方式、请求路径、请求参数、返回值类型等信息。</p><ul><li>请求方式：Http请求，GET</li><li>请求路径：<code>/lessons/now</code>，代表的含义是正在学习的课表</li><li>请求参数：查询的是当前用户的课表，所以参数就是当前登录用户，无需传递，我们可以从登录凭证获取</li><li>返回值：返回的数据在页面就能看到： <ul><li>课程id</li><li>课程名称</li><li>课程封面</li><li>课程有效期（起始-终止）</li><li>课程总课时数</li><li>课程已学习课时数</li><li>课表中总课程数</li><li>正在学习的小节名称</li><li>正在学习的小节序号（让用户知道自己在学第几节）</li></ul></li></ul><p>因此，最终的接口规则如下：</p><figure><img src="'+A+'" alt="image-20230715194115675" tabindex="0" loading="lazy"><figcaption>image-20230715194115675</figcaption></figure><p>可以看到返回值结果与分页查询的课表VO基本类似，因此这里可以复用LearningLessonVO实体，但是需要添加几个字段：</p><ul><li>courseAmount</li><li>latestSectionName</li><li>latestSectionIndex</li></ul><h4 id="_1-3-5-根据id查询某课程学习状态" tabindex="-1"><a class="header-anchor" href="#_1-3-5-根据id查询某课程学习状态" aria-hidden="true">#</a> 1.3.5.根据id查询某课程学习状态</h4><p>在课程详情页，课程展示有两种不同形式：</p><ul><li>对于未购买的课程：展示为立刻购买或加入购物车</li></ul><figure><img src="'+P+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>对于已经购买的课程：展示为马上学习，并且显示学习的进度、有效期</li></ul><figure><img src="'+V+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>因此，进入详情页以后，前端需要查询用户的课表中是否有该课程，如果有该课程则需要返回课程的学习进度、课程有效期等信息。</p><p>按照Restful风格，请求方式是GET，请求路径是资源名称lessons，不过这里要根据id查询，因此可以利用路径占位符传参，最终路径就变为：<code>/lessons/{courseId}</code></p><p>返回的字段如页面所示，包含：</p><ul><li>课程id</li><li>课程状态</li><li>已学习小节数</li><li>加入课表时间、有效期结束时间</li></ul><p>因此，最终的接口设计如下：</p><figure><img src="'+B+'" alt="image-20230715194138170" tabindex="0" loading="lazy"><figcaption>image-20230715194138170</figcaption></figure><p>这里的返回值VO结构在之前定义的LearningLessonVO中都包含了，因此可以直接复用该VO，不再重复定义。</p><h4 id="_1-3-6-其它" tabindex="-1"><a class="header-anchor" href="#_1-3-6-其它" aria-hidden="true">#</a> 1.3.6.其它</h4><p>其它几个接口的设计就留给大家作为练习了。</p><h2 id="_2-数据结构" tabindex="-1"><a class="header-anchor" href="#_2-数据结构" aria-hidden="true">#</a> 2.数据结构</h2><p>基于之前的分析，我们已经知道了业务基本流程、用户的交互行为。而用户的这些行为必然产生数据，需要保存到数据库中。这些数据在保存时必须有设定好的结构，这样才能支撑我们完成各种接口功能。</p><p>接下来，我们就分析一下课表相关的业务对应的数据结构。</p><h3 id="_2-1-字段分析" tabindex="-1"><a class="header-anchor" href="#_2-1-字段分析" aria-hidden="true">#</a> 2.1.字段分析</h3><p>课表要记录的是用户的学习状态，所谓学习状态就是记录<strong>谁</strong>在学习<strong>哪个课程</strong>，<strong>学习的进度</strong>如何。</p><ul><li>其中，谁在学习哪个课程，就是一种关系。也就是说课表就是用户和课程的中间关系表。因此一定要包含三个字段： <ul><li>userId：用户id，也就是<strong>谁</strong></li><li>courseId：课程id，也就是学的<strong>课程</strong></li><li>id：唯一主键</li></ul></li><li>而学习进度，则是一些附加的功能字段，页面需要哪些功能就添加哪些字段即可： <ul><li>status：课程学习状态。0-未学习，1-学习中，2-已学完，3-已过期 <ul><li><img src="'+F+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></li></ul></li><li>planStatus：学习计划状态，0-没有计划，1-计划进行中</li><li>weekFreq：计划的学习频率 <ul><li><img src="'+G+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></li></ul></li><li>learnedSections：已学习小节数量，注意，课程总小节数、课程名称、封面等可由课程id查询得出，无需重复记录 <ul><li><img src="'+Q+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></li></ul></li><li>latestSectionId：最近一次学习的小节id，方便根据id查询最近学习的课程正在学第几节 <ul><li><img src="'+H+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></li></ul></li><li>latestLearnTime：最近一次学习时间，用于分页查询的排序： <ul><li><img src="'+J+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></li></ul></li><li>createTime和expireTime，也就是课程加入时间和过期时间 <ul><li><img src="'+K+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></li></ul></li></ul></li></ul><h3 id="_2-2-er图" tabindex="-1"><a class="header-anchor" href="#_2-2-er图" aria-hidden="true">#</a> 2.2.ER图</h3><p>我们可以结合原型图中包含的信息来画一个ER图，分析我的课表包含的信息：</p><figure><img src="'+Y+`" alt="image-20230715194027037" tabindex="0" loading="lazy"><figcaption>image-20230715194027037</figcaption></figure><h3 id="_2-3-表结构" tabindex="-1"><a class="header-anchor" href="#_2-3-表结构" aria-hidden="true">#</a> 2.3.表结构</h3><p>基于ER图，课表对应的数据库结构应该是这样的：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> learning_lesson <span class="token punctuation">(</span>
  id <span class="token keyword">bigint</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;主键&#39;</span><span class="token punctuation">,</span>
  user_id <span class="token keyword">bigint</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;学员id&#39;</span><span class="token punctuation">,</span>
  course_id <span class="token keyword">bigint</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;课程id&#39;</span><span class="token punctuation">,</span>
  <span class="token keyword">status</span> <span class="token keyword">tinyint</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;课程状态，0-未学习，1-学习中，2-已学完，3-已失效&#39;</span><span class="token punctuation">,</span>
  week_freq <span class="token keyword">tinyint</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;每周学习频率，每周3天，每天2节，则频率为6&#39;</span><span class="token punctuation">,</span>
  plan_status <span class="token keyword">tinyint</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;学习计划状态，0-没有计划，1-计划进行中&#39;</span><span class="token punctuation">,</span>
  learned_sections <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;已学习小节数量&#39;</span><span class="token punctuation">,</span>
  latest_section_id <span class="token keyword">bigint</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;最近一次学习的小节id&#39;</span><span class="token punctuation">,</span>
  latest_learn_time <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;最近一次学习的时间&#39;</span><span class="token punctuation">,</span>
  create_time <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;创建时间&#39;</span><span class="token punctuation">,</span>
  expire_time <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;过期时间&#39;</span><span class="token punctuation">,</span>
  update_time <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;更新时间&#39;</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> idx_user_id <span class="token punctuation">(</span>user_id<span class="token punctuation">,</span>course_id<span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8mb4_0900_ai_ci <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">&#39;学生课表&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们要创建一个名为<code>tj_learning</code>的database，并且执行上面的SQL语句，创建<code>learning_lesson</code>表：</p><figure><img src="`+X+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>当然，课前资料也提供了这张表对应的SQL语句：</p><figure><img src="'+W+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_2-4-创建分支" tabindex="-1"><a class="header-anchor" href="#_2-4-创建分支" aria-hidden="true">#</a> 2.4.创建分支</h3><p>一般开发新功能都需要创建一个feature类型分支，不能在DEV分支直接开发，因此这里我们新建一个功能分支。我们在项目目录中打开terminal控制台，输入命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> feature-lessons
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>发现整个项目都切换到了新的功能分支：</p><figure><img src="`+Z+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_2-5-代码生成" tabindex="-1"><a class="header-anchor" href="#_2-5-代码生成" aria-hidden="true">#</a> 2.5.代码生成</h3><p>在天机学堂项目中，我们使用的是Mybatis作为持久层框架，并且引入了MybatisPlus来简化开发。因此，在创建据库以后，就需要创建对应的实体类、mapper、service等。</p><p>这些代码格式固定，编写起来又比较费时。好在IDEA中提供了一个MP插件，可以生成这些重复代码：</p><figure><img src="'+$+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>安装完成以后，我们先配置一下数据库地址：</p><figure><img src="'+nn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>特别注意，数据库名不要填写错误：</p><figure><img src="'+sn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>然后配置代码自动生成的设置：</p><figure><img src="'+an+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>严格按照下图的模式去设置（图片放大后更清晰），不要填错项目名称和包名称：</p><figure><img src="'+tn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>最后，点击<code>code generatro</code>按钮，即可生成代码：</p><figure><img src="'+pn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>要注意的是，默认情况下PO的主键ID策略是自增长，而天机学堂项目默认希望采用雪花算法作为ID，因此这里需要对<code>LearningLesson</code>的ID策略做修改：</p><figure><img src="'+en+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>除此之外，我们还要按照Restful风格，对请求路径做修改：</p><figure><img src="'+on+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_2-6-状态枚举" tabindex="-1"><a class="header-anchor" href="#_2-6-状态枚举" aria-hidden="true">#</a> 2.6.状态枚举</h3><p>在数据结构中，课表是有学习状态的，学习计划也有状态：</p><figure><img src="'+cn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这些状态如果每次编码都手写很容易写错，因此一般都会定义出枚举：</p><figure><img src="'+ln+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>在课前资料中已经提供给大家了：</p><figure><img src="'+un+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>首先是课表状态<code>LessonStatus</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Getter</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">LessonStatus</span> <span class="token keyword">implements</span> <span class="token class-name">BaseEnum</span> <span class="token punctuation">{</span>
    <span class="token function">NOT_BEGIN</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;未学习&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">LEARNING</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;学习中&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">FINISHED</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;已学完&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">EXPIRED</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;已过期&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">;</span>
    <span class="token annotation punctuation">@JsonValue</span> <span class="token comment">// 指定JSON序列化枚举时用的值</span>
    <span class="token annotation punctuation">@EnumValue</span> <span class="token comment">// 指定与数据库交互时要做类型转换的值</span>
    <span class="token keyword">int</span> value<span class="token punctuation">;</span>
    <span class="token class-name">String</span> desc<span class="token punctuation">;</span>

    <span class="token class-name">LessonStatus</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@JsonCreator</span><span class="token punctuation">(</span>mode <span class="token operator">=</span> <span class="token class-name">JsonCreator<span class="token punctuation">.</span>Mode</span><span class="token punctuation">.</span><span class="token constant">DELEGATING</span><span class="token punctuation">)</span> <span class="token comment">// 指定JSON反序列化时使用的函数</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">LessonStatus</span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">LessonStatus</span> status <span class="token operator">:</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">equalsValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> status<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后是学习计划的状态<code>PlanStatus</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Getter</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">PlanStatus</span> <span class="token keyword">implements</span> <span class="token class-name">BaseEnum</span> <span class="token punctuation">{</span>
    <span class="token function">NO_PLAN</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;没有计划&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">PLAN_RUNNING</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;计划进行中&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@JsonValue</span> <span class="token comment">// 指定JSON序列化枚举时用的值</span>
    <span class="token annotation punctuation">@EnumValue</span> <span class="token comment">// 指定与数据库交互时要做类型转换的值</span>
    <span class="token keyword">int</span> value<span class="token punctuation">;</span>
    <span class="token class-name">String</span> desc<span class="token punctuation">;</span>

    <span class="token class-name">PlanStatus</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@JsonCreator</span><span class="token punctuation">(</span>mode <span class="token operator">=</span> <span class="token class-name">JsonCreator<span class="token punctuation">.</span>Mode</span><span class="token punctuation">.</span><span class="token constant">DELEGATING</span><span class="token punctuation">)</span> <span class="token comment">// 指定JSON反序列化时使用的函数</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">PlanStatus</span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">PlanStatus</span> status <span class="token operator">:</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">equalsValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> status<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样以来，我们就需要修改PO对象，用枚举类型替代原本的<code>Integer</code>类型：</p><figure><img src="`+rn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><code>MybatisPlus</code>会在我们与数据库交互时实现自动的数据类型转换，无需我们操心。</p><h2 id="_3-实现接口功能" tabindex="-1"><a class="header-anchor" href="#_3-实现接口功能" aria-hidden="true">#</a> 3.实现接口功能</h2><p>由于时间有限，这里我们只带着大家实现2个接口：</p><ul><li>添加课程到课表</li><li>分页查询我的课表</li></ul><h3 id="_3-1-添加课程到课表" tabindex="-1"><a class="header-anchor" href="#_3-1-添加课程到课表" aria-hidden="true">#</a> 3.1.添加课程到课表</h3><p>回顾一下接口信息：</p><figure><img src="'+dn+'" alt="image-20230715194236375" tabindex="0" loading="lazy"><figcaption>image-20230715194236375</figcaption></figure><p>其中的<code>Exchange</code>、<code>RoutingKey</code>都已经在<code>tj-common</code>中的<code>MqConstants</code>内定义好了：</p><figure><img src="'+kn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>我们只需要定义消息监听器就可以了。</p><h4 id="_3-1-1-定义消息监听器" tabindex="-1"><a class="header-anchor" href="#_3-1-1-定义消息监听器" aria-hidden="true">#</a> 3.1.1.定义消息监听器</h4><p>我们在tj-learning服务中定义一个MQ的监听器：</p><figure><img src="'+mn+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>mq</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>api<span class="token punctuation">.</span>dto<span class="token punctuation">.</span>trade<span class="token punctuation">.</span></span><span class="token class-name">OrderBasicDTO</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>common<span class="token punctuation">.</span>constants<span class="token punctuation">.</span></span><span class="token class-name">MqConstants</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">CollUtils</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">ILearningLessonService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">RequiredArgsConstructor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">ExchangeTypes</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Exchange</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Queue</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">QueueBinding</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RabbitListener</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@RequiredArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LessonChangeListener</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ILearningLessonService</span> lessonService<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 监听订单支付或课程报名的消息
     * <span class="token keyword">@param</span> <span class="token parameter">order</span> 订单信息
     */</span>
    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>
            value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;learning.lesson.pay.queue&quot;</span><span class="token punctuation">,</span> durable <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token class-name">MqConstants<span class="token punctuation">.</span>Exchange</span><span class="token punctuation">.</span><span class="token constant">ORDER_EXCHANGE</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">ExchangeTypes</span><span class="token punctuation">.</span><span class="token constant">TOPIC</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            key <span class="token operator">=</span> <span class="token class-name">MqConstants<span class="token punctuation">.</span>Key</span><span class="token punctuation">.</span><span class="token constant">ORDER_PAY_KEY</span>
    <span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listenLessonPay</span><span class="token punctuation">(</span><span class="token class-name">OrderBasicDTO</span> order<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 1.健壮性处理</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>order <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> order<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token class-name">CollUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getCourseIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// 数据有误，无需处理</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;接收到MQ消息有误，订单数据为空&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 2.添加课程</span>
        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;监听到用户{}的订单{}，需要添加课程{}到课表中&quot;</span><span class="token punctuation">,</span> order<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> order<span class="token punctuation">.</span><span class="token function">getOrderId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> order<span class="token punctuation">.</span><span class="token function">getCourseIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        lessonService<span class="token punctuation">.</span><span class="token function">addUserLessons</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> order<span class="token punctuation">.</span><span class="token function">getCourseIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>订单中与课表有关的字段就是userId、courseId，因此这里要传递的就是这两个参数。</p><p>注意，这里添加课程的核心逻辑是在<code>ILearningLessonService</code>中实现的，首先是接口声明：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">IService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>po<span class="token punctuation">.</span></span><span class="token class-name">LearningLesson</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
 * 学生课程表 服务类
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ILearningLessonService</span> <span class="token keyword">extends</span> <span class="token class-name">IService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LearningLesson</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">addUserLessons</span><span class="token punctuation">(</span><span class="token class-name">Long</span> userId<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> courseIds<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后是对应的实现类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LearningLessonServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LearningLessonMapper</span><span class="token punctuation">,</span> <span class="token class-name">LearningLesson</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">ILearningLessonService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUserLessons</span><span class="token punctuation">(</span><span class="token class-name">Long</span> userId<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> courseIds<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// TODO 添加课程信息到用户课程表</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-1-2-添加课表的流程分析" tabindex="-1"><a class="header-anchor" href="#_3-1-2-添加课表的流程分析" aria-hidden="true">#</a> 3.1.2.添加课表的流程分析</h4><p>接下来，我们来分析一下添加课表逻辑的业务流程。首先来对比一下请求参数和数据库字段：</p><p>参数：</p><ul><li>Long userId</li><li><code>List&lt;Long&gt; courseIds</code></li></ul><p>数据表：</p><figure><img src="`+gn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>一个userId和一个courseId是learning_lesson表中的一条数据。而订单中一个用户可能购买多个课程。因此请求参数中的courseId集合就需要逐个处理，将来会有多条课表数据。</p><p>另外，可以发现参数中只有userId和courseId，表中的其它字段都需要我们想办法来组织：</p><ul><li>status：课程状态，可以默认为0，代表未学习</li><li>week_freq：学习计划频率，可以为空，代表没有设置学习计划</li><li>plan_status：学习计划状态，默认为0，代表没有设置学习计划</li><li>learned_sections：已学习小节数，默认0，代表没有学习</li><li>latest_section_id：最近学习小节id，可以为空，代表最近没有学习任何小节</li><li>latest_learn_time：最近学习时间，可以为空，代表最近没有学习</li><li>create_time：创建时间，也就是当前时间</li><li><strong>expire_time</strong>：过期时间，这个要结合课程来计算。每个课程都有自己的有效期（valid_duration），因此过期时间就是create_time加上课程的有效期</li><li>update_time：更新时间，默认当前时间，有数据库实时更新，不用管</li></ul><p>可见在整张表中，需要我们在新增时处理的字段就剩下过期时间<code>expire_time</code>了。而要知道这个就必须根据courseId查询课程的信息，找到其中的课程有效期（<code>valid_duration</code>）。课程表结构如图：</p><figure><img src="'+vn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>因此，我们要做的事情就是根据courseId集合查询课程信息，然后分别计算每个课程的有效期，组织多个LearingLesson的数据，形成集合。最终批量新增到数据库即可。</p><p>流程如图：</p><figure><img src="'+bn+'" alt="image-20230715194322425" tabindex="0" loading="lazy"><figcaption>image-20230715194322425</figcaption></figure><p>那么问题来了，我们该如何根据课程id查询课程信息呢？</p><h4 id="_3-1-3-获取课程信息" tabindex="-1"><a class="header-anchor" href="#_3-1-3-获取课程信息" aria-hidden="true">#</a> 3.1.3.获取课程信息</h4><p>课程（course）的信息是由课程服务（course-service）来维护的，目前已经开发完成并部署到了虚拟机的开发环境中。</p><p>我们现在需要查询课程信息，自然需要调用课程服务暴露的Feign接口。如果没有这样的接口，则需要联系维护该服务的同事，<strong>协商</strong>开发相关接口。</p><p>在咱们的项目中，课程微服务已经暴露了一些接口。我们有三种方式可以查看已经开放的接口：</p><ul><li>与开发的同事<strong>交流沟通</strong></li><li>通过网关中的Swagger<strong>文档</strong>来查看</li><li>直接查看课程服务的<strong>源码</strong></li></ul><p>首先，我们来看一下swagger文档：</p><figure><img src="'+fn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>不过这种方式查看到的接口数量非常多，有很多是给前端用的。不一定有对应的Feign接口。</p><p>要查看Feign接口，需要到<code>tj-api</code>中查看：</p><figure><img src="'+yn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>检索其中的API，可以发现一个这样的接口：</p><figure><img src="'+hn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>根据id批量查询课程的基本信息，而在课程基本信息（<code>CourseSimpleInfoDTO</code>）中，就有有效期信息：</p><figure><img src="'+_n+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="_3-1-4-实现添加课程到课表" tabindex="-1"><a class="header-anchor" href="#_3-1-4-实现添加课程到课表" aria-hidden="true">#</a> 3.1.4.实现添加课程到课表</h4><p>现在，我们正式实现<code>LearningLessonServiceImpl</code>中的<code>addUserLessons</code>方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span>

<span class="token comment">// 略</span>

<span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;ALL&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@RequiredArgsConstructor</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LearningLessonServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LearningLessonMapper</span><span class="token punctuation">,</span> <span class="token class-name">LearningLesson</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">ILearningLessonService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">CourseClient</span> courseClient<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@Transactional</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUserLessons</span><span class="token punctuation">(</span><span class="token class-name">Long</span> userId<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> courseIds<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1.查询课程有效期</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CourseSimpleInfoDTO</span><span class="token punctuation">&gt;</span></span> cInfoList <span class="token operator">=</span> courseClient<span class="token punctuation">.</span><span class="token function">getSimpleInfoList</span><span class="token punctuation">(</span>courseIds<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>cInfoList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 课程不存在，无法添加</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;课程信息不存在，无法添加到课表&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 2.循环遍历，处理LearningLesson数据</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LearningLesson</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>cInfoList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">CourseSimpleInfoDTO</span> cInfo <span class="token operator">:</span> cInfoList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">LearningLesson</span> lesson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LearningLesson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 2.1.获取过期时间</span>
            <span class="token class-name">Integer</span> validDuration <span class="token operator">=</span> cInfo<span class="token punctuation">.</span><span class="token function">getValidDuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>validDuration <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> validDuration <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">LocalDateTime</span> now <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                lesson<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>
                lesson<span class="token punctuation">.</span><span class="token function">setExpireTime</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">plusMonths</span><span class="token punctuation">(</span>validDuration<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 2.2.填充userId和courseId</span>
            lesson<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            lesson<span class="token punctuation">.</span><span class="token function">setCourseId</span><span class="token punctuation">(</span>cInfo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>lesson<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 3.批量新增</span>
        <span class="token function">saveBatch</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-分页查询我的课表" tabindex="-1"><a class="header-anchor" href="#_3-2-分页查询我的课表" aria-hidden="true">#</a> 3.2.分页查询我的课表</h3><p>首先回顾一下接口信息：</p><figure><img src="`+wn+'" alt="image-20230715194427276" tabindex="0" loading="lazy"><figcaption>image-20230715194427276</figcaption></figure><h4 id="_3-2-1-实体" tabindex="-1"><a class="header-anchor" href="#_3-2-1-实体" aria-hidden="true">#</a> 3.2.1.实体</h4><p>在实现接口的时候，往往需要先把接口的<strong>请求参数</strong>、<strong>返回值</strong>对应的实体类声明出来。</p><h5 id="_3-2-1-1-query实体" tabindex="-1"><a class="header-anchor" href="#_3-2-1-1-query实体" aria-hidden="true">#</a> 3.2.1.1.Query实体</h5><p>在这个接口中，请求参数是一个通用的分页参数，我们在<code>tj-common</code>已经声明了：</p><figure><img src="'+Ln+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>主要的四个字段如下：</p><figure><img src="'+xn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>其中有几个方法，可以便捷的把PageQuery对象转换为MybatisPlus中的Page对象：</p><figure><img src="'+In+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h5 id="_3-2-1-2-dto实体" tabindex="-1"><a class="header-anchor" href="#_3-2-1-2-dto实体" aria-hidden="true">#</a> 3.2.1.2.DTO实体</h5><p>返回值是一个分页结果，因为分页太常用了，所以我们在<code>tj-common</code>定义了一个通用的分页结果类：</p><figure><img src="'+On+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>其中的核心代码如下：</p><figure><img src="'+Cn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h5 id="_3-2-1-3-vo实体" tabindex="-1"><a class="header-anchor" href="#_3-2-1-3-vo实体" aria-hidden="true">#</a> 3.2.1.3.VO实体</h5><p>返回值的分页结果中有一个实体集合，也就是VO实体，我们在课前资料也提供好了：</p><figure><img src="'+qn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>将其复制到项目中：</p><figure><img src="'+Sn+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="_3-2-2-接口声明" tabindex="-1"><a class="header-anchor" href="#_3-2-2-接口声明" aria-hidden="true">#</a> 3.2.2.接口声明</h4><p>万事具备，接下来根据我们分析的接口来定义和实现接口。</p><p>首先是controller，<code>tj-learning</code>服务的<code>LearningLessonController</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags <span class="token operator">=</span> <span class="token string">&quot;我的课表相关接口&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/lessons&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@RequiredArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LearningLessonController</span> <span class="token punctuation">{</span>
    
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ILearningLessonService</span> lessonService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">&quot;查询我的课表，排序字段 latest_learn_time:学习时间排序，create_time:购买时间排序&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/page&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">PageDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LearningLessonVO</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryMyLessons</span><span class="token punctuation">(</span><span class="token class-name">PageQuery</span> query<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> lessonService<span class="token punctuation">.</span><span class="token function">queryMyLessons</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，这里添加了Swagger相关注解，标记接口信息。</p><p>然后是service的接口，<code>tj-learning</code>服务的<code>ILearningLessonService</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">PageDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LearningLessonVO</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryMyLessons</span><span class="token punctuation">(</span><span class="token class-name">PageQuery</span> query<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后是实现类，tj-learning服务的LearningLessonServiceImpl：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">PageDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LearningLessonVO</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryMyLessons</span><span class="token punctuation">(</span><span class="token class-name">PageQuery</span> query<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// TODO 分页查询我的课表</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-3-获取登录用户" tabindex="-1"><a class="header-anchor" href="#_3-2-3-获取登录用户" aria-hidden="true">#</a> 3.2.3.获取登录用户</h4><p>既然是分页查询我的课表，除了分页信息以外，我还必须知道当前登录的用户是谁。那么，该从哪里获取用户信息呢？</p><h5 id="_3-2-3-1-实现思路" tabindex="-1"><a class="header-anchor" href="#_3-2-3-1-实现思路" aria-hidden="true">#</a> 3.2.3.1.实现思路</h5><p>天机学堂是基于JWT实现登录的，登录信息就保存在请求头的token中。因此要获取当前登录用户，只要获取请求头，解析其中的token即可。</p><p>但是，每个微服务都可能需要登录用户信息，在每个微服务都做token解析就属于重复编码了。因此我们的把token解析的行为放到了网关中，然后<strong>由<strong><strong>网关</strong></strong>把用户信息放入请求头，传递给下游</strong>微服务。</p><figure><img src="`+En+'" alt="image-20230715194452905" tabindex="0" loading="lazy"><figcaption>image-20230715194452905</figcaption></figure><p>每个微服务要从请求头拿出用户信息，在业务中使用，也比较麻烦，所以我们定义了一个HandlerInterceptor，拦截进入微服务的请求，并获取用户信息，存入UserContext（底层基于ThreadLocal）。这样后续的业务处理时就能直接从UserContext中获取用户了：</p><figure><img src="'+Tn+'" alt="image-20230715194504849" tabindex="0" loading="lazy"><figcaption>image-20230715194504849</figcaption></figure><p>以上就是天机学堂中获取用户信息的基本实现思路。</p><h5 id="_3-2-3-2-网关鉴权" tabindex="-1"><a class="header-anchor" href="#_3-2-3-2-网关鉴权" aria-hidden="true">#</a> 3.2.3.2.网关鉴权</h5><p>接下来我们一起来看看具体实现的代码。</p><p>首先是网关登录校验、传递用户信息的逻辑，<code>tj-gateway</code>中的<code>AccountAuthFilter</code>：</p><figure><img src="'+jn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>可以看到，网关将登录的<strong>用户信息放入请求头</strong>中传递到了下游的微服务。因此，我们只要在微服务中获取请求头，即可拿到登录的用户信息。</p><h5 id="_3-2-3-3-用户信息上下文" tabindex="-1"><a class="header-anchor" href="#_3-2-3-3-用户信息上下文" aria-hidden="true">#</a> 3.2.3.3.用户信息上下文</h5><p>然后是微服务中的获取请求头中的用户信息的拦截器。由于这个拦截器在每个微服务中都需要，与其重复编写，不如抽取到一个模块中。</p><p>所以在<code>tj-auth</code>模块中，有一个<code>tj-auth-resource-sdk</code>模块，已经把拦截器定义好了:</p><figure><img src="'+Mn+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>具体代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInfoInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1.尝试获取头信息中的用户信息</span>
        <span class="token class-name">String</span> authorization <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token class-name">JwtConstants</span><span class="token punctuation">.</span><span class="token constant">USER_HEADER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2.判断是否为空</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>authorization <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 3.转为用户id并保存到UserContext中</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Long</span> userId <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>authorization<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">UserContext</span><span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;用户身份信息格式不正确，{}, 原因：{}&quot;</span><span class="token punctuation">,</span> authorization<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 清理用户信息</span>
        <span class="token class-name">UserContext</span><span class="token punctuation">.</span><span class="token function">removeUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个拦截器中，获取到用户信息后保存到了<code>UserContext</code>中，这是一个基于<code>ThreadLocal</code>的工具，可以确保不同的请求之间互不干扰，避免线程安全问题发生：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserContext</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token constant">TL</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 保存用户信息
     * <span class="token keyword">@param</span> <span class="token parameter">userId</span> 用户id
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setUser</span><span class="token punctuation">(</span><span class="token class-name">Long</span> userId<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token constant">TL</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 获取用户
     * <span class="token keyword">@return</span> 用户id
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Long</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">TL</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 移除用户信息
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">removeUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token constant">TL</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>梳理一下，登录信息传递的过程是这样的：</p><figure><img src="`+zn+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>所以，以后在开发业务的时候，只需要在通过<code>UserContext</code>提供的<code>getUser()</code>方法就可以拿到用户<code>id</code>了。</p><h4 id="_3-2-4-实现查询我的课表" tabindex="-1"><a class="header-anchor" href="#_3-2-4-实现查询我的课表" aria-hidden="true">#</a> 3.2.4.实现查询我的课表</h4><p>修改之前的<code>tj-learning</code>中的<code>LearningLessonServiceImpl</code>的<code>queryMyLessons</code>方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">PageDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LearningLessonVO</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryMyLessons</span><span class="token punctuation">(</span><span class="token class-name">PageQuery</span> query<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1.获取当前登录用户</span>
    <span class="token class-name">Long</span> userId <span class="token operator">=</span> <span class="token class-name">UserContext</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.分页查询</span>
    <span class="token comment">// select * from learning_lesson where user_id = #{userId} order by latest_learn_time limit 0, 5</span>
    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LearningLesson</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> <span class="token function">lambdaQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">LearningLesson</span><span class="token operator">::</span><span class="token function">getUserId</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span> <span class="token comment">// where user_id = #{userId}</span>
            <span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">toMpPage</span><span class="token punctuation">(</span><span class="token string">&quot;latest_learn_time&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LearningLesson</span><span class="token punctuation">&gt;</span></span> records <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>records<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">PageDTO</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 3.查询课程信息</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">CourseSimpleInfoDTO</span><span class="token punctuation">&gt;</span></span> cMap <span class="token operator">=</span> <span class="token function">queryCourseSimpleInfoList</span><span class="token punctuation">(</span>records<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 4.封装VO返回</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LearningLessonVO</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>records<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 4.1.循环遍历，把LearningLesson转为VO</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">LearningLesson</span> r <span class="token operator">:</span> records<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 4.2.拷贝基础属性到vo</span>
        <span class="token class-name">LearningLessonVO</span> vo <span class="token operator">=</span> <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyBean</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token class-name">LearningLessonVO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 4.3.获取课程信息，填充到vo</span>
        <span class="token class-name">CourseSimpleInfoDTO</span> cInfo <span class="token operator">=</span> cMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">getCourseId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vo<span class="token punctuation">.</span><span class="token function">setCourseName</span><span class="token punctuation">(</span>cInfo<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vo<span class="token punctuation">.</span><span class="token function">setCourseCoverUrl</span><span class="token punctuation">(</span>cInfo<span class="token punctuation">.</span><span class="token function">getCoverUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vo<span class="token punctuation">.</span><span class="token function">setSections</span><span class="token punctuation">(</span>cInfo<span class="token punctuation">.</span><span class="token function">getSectionNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>vo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token class-name">PageDTO</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">CourseSimpleInfoDTO</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryCourseSimpleInfoList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LearningLesson</span><span class="token punctuation">&gt;</span></span> records<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 3.1.获取课程id</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> cIds <span class="token operator">=</span> records<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">LearningLesson</span><span class="token operator">::</span><span class="token function">getCourseId</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3.2.查询课程信息</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CourseSimpleInfoDTO</span><span class="token punctuation">&gt;</span></span> cInfoList <span class="token operator">=</span> courseClient<span class="token punctuation">.</span><span class="token function">getSimpleInfoList</span><span class="token punctuation">(</span>cIds<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>cInfoList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 课程不存在，无法添加</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BadRequestException</span><span class="token punctuation">(</span><span class="token string">&quot;课程信息不存在！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 3.3.把课程集合处理成Map，key是courseId，值是course本身</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">CourseSimpleInfoDTO</span><span class="token punctuation">&gt;</span></span> cMap <span class="token operator">=</span> cInfoList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">CourseSimpleInfoDTO</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> c <span class="token operator">-&gt;</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> cMap<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-查询正在学习的课程" tabindex="-1"><a class="header-anchor" href="#_3-3-查询正在学习的课程" aria-hidden="true">#</a> 3.3.查询正在学习的课程</h3><p>首先回顾一下接口信息：</p><figure><img src="`+Rn+'" alt="image-20230715194553065" tabindex="0" loading="lazy"><figcaption>image-20230715194553065</figcaption></figure><p>可以看到返回值结果与分页查询的课表VO基本类似，因此这里可以复用LearningLessonVO实体，但是需要添加几个字段：</p><ul><li>courseAmount</li><li>latestSectionName</li><li>latestSectionIndex</li></ul><h4 id="_3-3-1-查询章节信息" tabindex="-1"><a class="header-anchor" href="#_3-3-1-查询章节信息" aria-hidden="true">#</a> 3.3.1.查询章节信息</h4><p>小节名称、序号信息都在课程微服务（course-service）中，因此可以通过课程微服务提供的接口来查询：</p><figure><img src="'+Un+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>接口：</p><figure><img src="'+Nn+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>其中<code>CataSimpleInfoDTO</code>中就包含了章节信息：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CataSimpleInfoDTO</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">&quot;目录id&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">&quot;目录名称&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">&quot;数字序号，不包含章序号&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> cIndex<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3-2-代码实现" tabindex="-1"><a class="header-anchor" href="#_3-3-2-代码实现" aria-hidden="true">#</a> 3.3.2.代码实现</h4><p>首先是controller，<code>tj-learning</code>服务的<code>LearningLessonController</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags <span class="token operator">=</span> <span class="token string">&quot;我的课表相关接口&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/lessons&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@RequiredArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LearningLessonController</span> <span class="token punctuation">{</span>
    
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ILearningLessonService</span> lessonService<span class="token punctuation">;</span>

    <span class="token comment">// 。。。略</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/now&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">&quot;查询我正在学习的课程&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">LearningLessonVO</span> <span class="token function">queryMyCurrentLesson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> lessonService<span class="token punctuation">.</span><span class="token function">queryMyCurrentLesson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，这里添加了Swagger相关注解，标记接口信息。</p><p>然后是service的接口，<code>tj-learning</code>服务的<code>ILearningLessonService</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">LearningLessonVO</span> <span class="token function">queryMyCurrentLesson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后是实现类，<code>tj-learning</code>服务的<code>LearningLessonServiceImpl</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">CatalogueClient</span> catalogueClient<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">LearningLessonVO</span> <span class="token function">queryMyCurrentLesson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1.获取当前登录的用户</span>
    <span class="token class-name">Long</span> userId <span class="token operator">=</span> <span class="token class-name">UserContext</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.查询正在学习的课程 select * from xx where user_id = #{userId} AND status = 1 order by latest_learn_time limit 1</span>
    <span class="token class-name">LearningLesson</span> lesson <span class="token operator">=</span> <span class="token function">lambdaQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">LearningLesson</span><span class="token operator">::</span><span class="token function">getUserId</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">LearningLesson</span><span class="token operator">::</span><span class="token function">getStatus</span><span class="token punctuation">,</span> <span class="token class-name">LessonStatus</span><span class="token punctuation">.</span><span class="token constant">LEARNING</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token class-name">LearningLesson</span><span class="token operator">::</span><span class="token function">getLatestLearnTime</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token string">&quot;limit 1&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lesson <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 3.拷贝PO基础属性到VO</span>
    <span class="token class-name">LearningLessonVO</span> vo <span class="token operator">=</span> <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyBean</span><span class="token punctuation">(</span>lesson<span class="token punctuation">,</span> <span class="token class-name">LearningLessonVO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 4.查询课程信息</span>
    <span class="token class-name">CourseFullInfoDTO</span> cInfo <span class="token operator">=</span> courseClient<span class="token punctuation">.</span><span class="token function">getCourseInfoById</span><span class="token punctuation">(</span>lesson<span class="token punctuation">.</span><span class="token function">getCourseId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cInfo <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BadRequestException</span><span class="token punctuation">(</span><span class="token string">&quot;课程不存在&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    vo<span class="token punctuation">.</span><span class="token function">setCourseName</span><span class="token punctuation">(</span>cInfo<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    vo<span class="token punctuation">.</span><span class="token function">setCourseCoverUrl</span><span class="token punctuation">(</span>cInfo<span class="token punctuation">.</span><span class="token function">getCoverUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    vo<span class="token punctuation">.</span><span class="token function">setSections</span><span class="token punctuation">(</span>cInfo<span class="token punctuation">.</span><span class="token function">getSectionNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 5.统计课表中的课程数量 select count(1) from xxx where user_id = #{userId}</span>
    <span class="token class-name">Integer</span> courseAmount <span class="token operator">=</span> <span class="token function">lambdaQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">LearningLesson</span><span class="token operator">::</span><span class="token function">getUserId</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    vo<span class="token punctuation">.</span><span class="token function">setCourseAmount</span><span class="token punctuation">(</span>courseAmount<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 6.查询小节信息</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CataSimpleInfoDTO</span><span class="token punctuation">&gt;</span></span> cataInfos <span class="token operator">=</span>
            catalogueClient<span class="token punctuation">.</span><span class="token function">batchQueryCatalogue</span><span class="token punctuation">(</span><span class="token class-name">CollUtils</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>lesson<span class="token punctuation">.</span><span class="token function">getLatestSectionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">CollUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>cataInfos<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">CataSimpleInfoDTO</span> cataInfo <span class="token operator">=</span> cataInfos<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vo<span class="token punctuation">.</span><span class="token function">setLatestSectionName</span><span class="token punctuation">(</span>cataInfo<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vo<span class="token punctuation">.</span><span class="token function">setLatestSectionIndex</span><span class="token punctuation">(</span>cataInfo<span class="token punctuation">.</span><span class="token function">getCIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> vo<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-练习" tabindex="-1"><a class="header-anchor" href="#_4-练习" aria-hidden="true">#</a> 4.练习</h2><h3 id="_4-1-删除课表中课程-练习" tabindex="-1"><a class="header-anchor" href="#_4-1-删除课表中课程-练习" aria-hidden="true">#</a> 4.1.删除课表中课程（练习）</h3><h4 id="_4-4-1-业务分析" tabindex="-1"><a class="header-anchor" href="#_4-4-1-业务分析" aria-hidden="true">#</a> 4.4.1.业务分析</h4><p>删除课表中的课程有两种场景：</p><ul><li>用户直接删除已失效的课程</li><li>用户退款后触发课表自动删除</li></ul><h5 id="_4-4-1-1-退款通知" tabindex="-1"><a class="header-anchor" href="#_4-4-1-1-退款通知" aria-hidden="true">#</a> 4.4.1.1.退款通知</h5><p>其中用户退款与用户报名课程类似，都是基于MQ通知的方式。具体代码是在<code>tj-trade</code>模块的<code>RefundApplySerivceImpl</code>类的<code>handleRefundResult</code>方法中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token annotation punctuation">@Transactional</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRefundResult</span><span class="token punctuation">(</span><span class="token class-name">RefundResultDTO</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1.查询退款申请记录</span>
    <span class="token class-name">RefundApply</span> refundApply <span class="token operator">=</span> <span class="token function">getById</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getBizRefundOrderId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>refundApply <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">UserContext</span><span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span>refundApply<span class="token punctuation">.</span><span class="token function">getApprover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.判断结果，支付宝支付有可能直接返回退款成功结果，微信只会返回退款中</span>
    <span class="token class-name">RefundApply</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RefundApply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    r<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>refundApply<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    r<span class="token punctuation">.</span><span class="token function">setRefundChannel</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getRefundChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    r<span class="token punctuation">.</span><span class="token function">setRefundOrderNo</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getRefundOrderNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.1.判断状态是否退款中</span>
    <span class="token keyword">int</span> status <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token class-name">RefundResultDTO</span><span class="token punctuation">.</span><span class="token constant">RUNNING</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 退款中，结果未知，将其它数据写入数据库即可</span>
        <span class="token function">updateById</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 2.2.判断退款成功还是失败</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token class-name">RefundResultDTO</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 退款成功，记录状态</span>
        r<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">RefundStatus</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        r<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token class-name">RefundStatus</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">.</span><span class="token function">getProgressName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 2.3.退款失败，需要记录状态及退款失败原因</span>
        r<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">RefundStatus</span><span class="token punctuation">.</span><span class="token constant">FAILED</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        r<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token class-name">RefundStatus</span><span class="token punctuation">.</span><span class="token constant">FAILED</span><span class="token punctuation">.</span><span class="token function">getProgressName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        r<span class="token punctuation">.</span><span class="token function">setFailedReason</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 2.4.更新数据库</span>
    r<span class="token punctuation">.</span><span class="token function">setFinishTime</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">updateById</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 3.更新子订单状态</span>
    detailService<span class="token punctuation">.</span><span class="token function">updateRefundStatusById</span><span class="token punctuation">(</span>refundApply<span class="token punctuation">.</span><span class="token function">getOrderDetailId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 4.如果是退款成功，要取消用户报名的课程</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token class-name">RefundResultDTO</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 4.1.查询子订单信息</span>
        <span class="token class-name">OrderDetail</span> detail <span class="token operator">=</span> detailService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>refundApply<span class="token punctuation">.</span><span class="token function">getOrderDetailId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 4.2.发送MQ消息，通知报名成功</span>
        rabbitMqHelper<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>
                <span class="token class-name">MqConstants<span class="token punctuation">.</span>Exchange</span><span class="token punctuation">.</span><span class="token constant">ORDER_EXCHANGE</span><span class="token punctuation">,</span>
                <span class="token class-name">MqConstants<span class="token punctuation">.</span>Key</span><span class="token punctuation">.</span><span class="token constant">ORDER_REFUND_KEY</span><span class="token punctuation">,</span>
                <span class="token class-name">OrderBasicDTO</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">orderId</span><span class="token punctuation">(</span>refundApply<span class="token punctuation">.</span><span class="token function">getOrderId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">userId</span><span class="token punctuation">(</span>refundApply<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">courseIds</span><span class="token punctuation">(</span><span class="token class-name">CollUtils</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>detail<span class="token punctuation">.</span><span class="token function">getCourseId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发送通知的核心代码如下：</p><figure><img src="`+Dn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>与报名成功的通知类似，一样是OrderBasicDTO，参数信息包含三个：</p><ul><li>orderId：退款的订单id</li><li>userId：用户id</li><li>courseIds：退款的课程id</li></ul><p>请参考报名课程通知的处理逻辑来编写退款通知处理的功能。</p><h5 id="_4-4-1-2-用户删除课程" tabindex="-1"><a class="header-anchor" href="#_4-4-1-2-用户删除课程" aria-hidden="true">#</a> 4.4.1.2.用户删除课程</h5><p>用户可以直接删除《已失效》的课程：</p><figure><img src="'+An+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这里我们可以按照Restful的规范来定义这个删除接口：</p><ul><li>请求方式：删除业务的请求方式都是DELETE</li><li>请求路径：一般是资源名 + 标示，这里删除的是课表中的课程，因此：<code>/ls/lessons/{courseId}</code></li><li>请求参数：自然是路径中传递的课程id</li><li>返回值：无</li></ul><p>同学们可以尝试自己定义接口信息，实现接口功能</p><h4 id="_4-4-2-接口信息" tabindex="-1"><a class="header-anchor" href="#_4-4-2-接口信息" aria-hidden="true">#</a> 4.4.2.接口信息</h4><p>同学们自行设计</p><h3 id="_4-5-检查课程是否有效-练习-必做" tabindex="-1"><a class="header-anchor" href="#_4-5-检查课程是否有效-练习-必做" aria-hidden="true">#</a> 4.5.检查课程是否有效（练习-必做）</h3><p>这是一个微服务内部接口，当用户学习课程时，可能需要播放课程视频。此时提供视频播放功能的媒资系统就需要校验<code>用户是否有播放视频的资格</code>。所以，开发媒资服务（<code>tj-media</code>）的同事就请你提供这样一个接口。</p><h4 id="_4-5-1-业务分析" tabindex="-1"><a class="header-anchor" href="#_4-5-1-业务分析" aria-hidden="true">#</a> 4.5.1.业务分析</h4><p>用户要想有播放视频的资格，那就必须满足两个条件：</p><ul><li>用户课表中是否有该课程</li><li>课程状态是否是有效的状态（未过期）</li></ul><p>所以这个接口很简单，就是查询用户课表，做一个非空和状态的判断即可。</p><h4 id="_4-5-2-接口信息" tabindex="-1"><a class="header-anchor" href="#_4-5-2-接口信息" aria-hidden="true">#</a> 4.5.2.接口信息</h4><p>接口信息如下：</p><table><thead><tr><th><strong>接口说明</strong></th><th>根据课程id，检查当前用户的课表中是否有该课程，课程状态是否有效。</th></tr></thead><tbody><tr><td><strong>请求方式</strong></td><td>Http请求，GET</td></tr><tr><td><strong>请求路径</strong></td><td>/ls/lessons/{courseId}/valid</td></tr><tr><td><strong>请求参数格式</strong></td><td>课程id，请求路径占位符，参数名：courseId</td></tr><tr><td><strong>返回值格式</strong></td><td>课表lessonId，如果是报名了则返回lessonId，否则返回空</td></tr></tbody></table><p>具体参考<code>tj-api</code>模块下的<code>com.tianji.api.client.learning.LearningClient</code>接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 校验当前用户是否可以学习当前课程
 * <span class="token keyword">@param</span> <span class="token parameter">courseId</span> 课程id
 * <span class="token keyword">@return</span> lessonId，如果是报名了则返回lessonId，否则返回空
 */</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/lessons/{courseId}/valid&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">Long</span> <span class="token function">isLessonValid</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;courseId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> courseId<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-6-查询用户课表中指定课程状态-练习" tabindex="-1"><a class="header-anchor" href="#_4-6-查询用户课表中指定课程状态-练习" aria-hidden="true">#</a> 4.6.查询用户课表中指定课程状态（练习）</h3><h4 id="_4-6-1-业务分析" tabindex="-1"><a class="header-anchor" href="#_4-6-1-业务分析" aria-hidden="true">#</a> 4.6.1.业务分析</h4><p>在课程详情页，课程展示有两种不同形式：</p><ul><li>对于已经购买的课程：展示为马上学习，并且显示学习的进度、有效期 <ul><li><img src="`+Pn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></li></ul></li><li>对于未购买的课程：展示为立刻购买或加入购物车 <ul><li><img src="'+Vn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></li></ul></li></ul><p>因此，进入详情页以后，前端需要查询用户的课表中是否有该课程，如果有该课程则需要返回课程的学习进度、课程有效期等信息。</p><h4 id="_4-6-2-接口信息" tabindex="-1"><a class="header-anchor" href="#_4-6-2-接口信息" aria-hidden="true">#</a> 4.6.2.接口信息</h4><figure><img src="'+Bn+`" alt="image-20230715194654140" tabindex="0" loading="lazy"><figcaption>image-20230715194654140</figcaption></figure><h3 id="_4-7-统计课程的学习人数-练习" tabindex="-1"><a class="header-anchor" href="#_4-7-统计课程的学习人数-练习" aria-hidden="true">#</a> 4.7.统计课程的学习人数（练习）</h3><p>课程微服务中需要统计每个课程的报名人数，同样是一个内部调用接口，在tj-api模块中已经定义好了：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 统计课程学习人数
 * <span class="token keyword">@param</span> <span class="token parameter">courseId</span> 课程id
 * <span class="token keyword">@return</span> 学习人数
 */</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/lessons/{courseId}/count&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">Integer</span> <span class="token function">countLearningLessonByCourse</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;courseId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> courseId<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,323);function as(ts,ps){const a=o("ExternalLinkIcon");return c(),i("div",null,[Gn,n("p",null,[s("天机学堂-管理后台："),n("a",Qn,[s("https://lanhuapp.com/link/#/invite?sid=qx03viNU"),t(a)]),s(" 密码: Ssml 天机学堂-用户端："),n("a",Hn,[s("https://lanhuapp.com/link/#/invite?sid=qx0Fy3fa"),t(a)]),s(" 密码: ZsP3")]),Jn,Kn,Yn,Xn,Wn,Zn,$n,n("p",null,[n("a",ns,[s("http://yapi.smart-xwork.cn/"),t(a)])]),ss])}const cs=e(Fn,[["render",as],["__file","day02-我的课表.html.vue"]]);export{cs as default};
