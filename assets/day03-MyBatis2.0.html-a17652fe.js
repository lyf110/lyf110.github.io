import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-5f6064b2.js";const e="/assets/1561274291830-dd0590c5.png",p="/assets/1561276059949-d6f57084.png",o="/assets/tu_2-df631045.png",c="/assets/tu_3-2174511a.png",l="/assets/tu_4-1aa7e4bb.png",i="/assets/tu_5-7a29a83d.png",u="/assets/tu_6-ccfd3d78.png",r="/assets/tu_7-d28c2b24.png",d="/assets/1535361902219-8fe0b502.png",k="/assets/tu_9-dac27e01.png",v="/assets/1561283745286-4648474e.png",m="/assets/tu_10-04149ba4.png",b="/assets/1561284725407-b3d22ece.png",h={},g=t(`<h1 id="day03-mybatis" tabindex="-1"><a class="header-anchor" href="#day03-mybatis" aria-hidden="true">#</a> day03-MyBatis</h1><h1 id="学习目标" tabindex="-1"><a class="header-anchor" href="#学习目标" aria-hidden="true">#</a> 学习目标</h1><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> 掌握Mybatis的延迟加载</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> 掌握Mybatis缓存</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-2" disabled="disabled"><label class="task-list-item-label" for="task-item-2"> 掌握Mybatis注解开发</label></li></ul><h1 id="第一章-mybatis-延迟加载策略" tabindex="-1"><a class="header-anchor" href="#第一章-mybatis-延迟加载策略" aria-hidden="true">#</a> 第一章-Mybatis 延迟加载策略</h1><h2 id="知识点-mybatis-延迟加载策略" tabindex="-1"><a class="header-anchor" href="#知识点-mybatis-延迟加载策略" aria-hidden="true">#</a> 知识点-Mybatis 延迟加载策略</h2><h3 id="_1-目标" tabindex="-1"><a class="header-anchor" href="#_1-目标" aria-hidden="true">#</a> 1.目标</h3><p>​ 通过前面的学习，我们已经掌握了 Mybatis 中一对一，一对多，多对多关系的配置及实现，可以实现对象的关联查询。实际开发过程中很多时候我们并不需要总是在加载一方信息时就一定要加载另外一方的信息。 此时就是我们所说的延迟加载。</p><h3 id="_2-路径" tabindex="-1"><a class="header-anchor" href="#_2-路径" aria-hidden="true">#</a> 2.路径</h3><ol><li>什么是延迟加载</li><li>使用 Assocation 实现延迟加载 (多对一,一对一)</li><li>Collection 实现延迟加载 (一对多)</li></ol><h3 id="_3-讲解" tabindex="-1"><a class="header-anchor" href="#_3-讲解" aria-hidden="true">#</a> 3.讲解</h3><h4 id="_3-1什么是延迟加载" tabindex="-1"><a class="header-anchor" href="#_3-1什么是延迟加载" aria-hidden="true">#</a> 3.1什么是延迟加载</h4><p>​ 延迟加载：就是在需要用到数据时才进行加载(查询)，不需要用到数据时就不加载数据。延迟加载也称懒加载.</p><p>​ 坏处： 因为只有当需要用到数据时，才会进行数据库查询，这样在大批量数据查询时，因为查询工作也要消耗时间，所以可能造成用户等待时间变长，造成用户体验下降。</p><p>​ 好处： 先从单表查询，需要时再从关联表去关联查询，大大提高数据库性能，因为查询单表要比关联查询多张表速度要快.</p><h4 id="_3-2使用-assocation-实现延迟加载-多对一-一对一" tabindex="-1"><a class="header-anchor" href="#_3-2使用-assocation-实现延迟加载-多对一-一对一" aria-hidden="true">#</a> 3.2使用 Assocation 实现延迟加载 (多对一,一对一)</h4><h5 id="_3-2-1需求" tabindex="-1"><a class="header-anchor" href="#_3-2-1需求" aria-hidden="true">#</a> 3.2.1需求</h5><p>​ 查询账户(Account)信息并且关联查询用户(User)信息。</p><p>​ 先查询账户(Account)信息，当我们需要用到用户(User)信息时再查询用户(User)信息。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-- 1. 查询账户
SELECT * FROM t_account
-- 2, 再查询用户(等使用到用户再查询 account.getUser().getName())
--    再根据查询结果里面的uid查询当前账户所属的用户
SELECT * FROM t_user WHERE uid = 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ <code>sql:select * from account </code></p><h5 id="_3-2-2实现" tabindex="-1"><a class="header-anchor" href="#_3-2-2实现" aria-hidden="true">#</a> 3.2.2实现</h5><ul><li>User.java</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> uid<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span><span class="token comment">// 用户姓名</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span><span class="token comment">// 性别</span>
    <span class="token keyword">private</span> <span class="token class-name">Date</span> birthday<span class="token punctuation">;</span><span class="token comment">// 生日</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span><span class="token comment">// 地址</span>
  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Account.java</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> aid<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> uid<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Double</span> money<span class="token punctuation">;</span>

    <span class="token comment">//表达关系:1个用户对应1个账户</span>
    <span class="token keyword">private</span> <span class="token class-name">User</span> user<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>AccountDao.java</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountDao</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 查询账户信息(包含用户信息)
     *
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAccountList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>AccountDao.xml</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.itheima.dao.AccountDao<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>findAccountList<span class="token punctuation">&quot;</span></span>  <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>accountListId<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        SELECT * FROM t_account
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>accountListId<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Account<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>aid<span class="token punctuation">&quot;</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>aid<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>money<span class="token punctuation">&quot;</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>money<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>uid<span class="token punctuation">&quot;</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>uid<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token comment">&lt;!--association用于关联加载的对象,
                property属性:多方类里面一方对象的属性名
               javaType属性:一方对象的类型
               select属性: 用于关联查询另外的一方(User)对应的id
               column属性: 填写我们要传递给 select 映射的参数
               fetchType属性：lazy延迟
         --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user<span class="token punctuation">&quot;</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>User<span class="token punctuation">&quot;</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.itheima.dao.UserDao.findByUid<span class="token punctuation">&quot;</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>uid<span class="token punctuation">&quot;</span></span> <span class="token attr-name">fetchType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>lazy<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>UserDao.java</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 根据id查询user
     * <span class="token keyword">@param</span> <span class="token parameter">uid</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token class-name">User</span> <span class="token function">findByUid</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> uid<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>UserDao.xml</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>
        <span class="token name">PUBLIC</span> <span class="token string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span>
        <span class="token string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.itheima.dao.UserDao<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>findByUid<span class="token punctuation">&quot;</span></span>  <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>User<span class="token punctuation">&quot;</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Integer<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        SELECT * FROM t_user WHERE  uid = #{uid}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>测试</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DbTest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">SqlSessionFactoryUtil</span><span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">AccountDao</span> accountDao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">AccountDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> accountDao<span class="token punctuation">.</span><span class="token function">findAccountList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Account</span> account <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">User</span> user <span class="token operator">=</span> account<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-2-3小结" tabindex="-1"><a class="header-anchor" href="#_3-2-3小结" aria-hidden="true">#</a> 3.2.3小结</h5><ol><li>把Sql语句改成单表查询</li><li>在配置文件里面 association标签里面的: select, column,fetchType</li></ol><figure><img src="`+e+`" alt="1561274291830" tabindex="0" loading="lazy"><figcaption>1561274291830</figcaption></figure><h4 id="_3-3collection-实现延迟加载-一对多" tabindex="-1"><a class="header-anchor" href="#_3-3collection-实现延迟加载-一对多" aria-hidden="true">#</a> 3.3Collection 实现延迟加载 (一对多)</h4><h5 id="_3-3-1需求" tabindex="-1"><a class="header-anchor" href="#_3-3-1需求" aria-hidden="true">#</a> 3.3.1需求</h5><p>​ 完成加载用户对象时，查询该用户所拥有的账户信息。</p><p>​ 等账户信息使用的时候再查询.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 1.先把用户查询出来</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_user
<span class="token comment">-- 2. 等使用了该用户的账户的时候再把账户查询出来(user.getAccounts()...)</span>
<span class="token comment">--    把查询出来的uid去查询当前用户的账户信息</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_account <span class="token keyword">WHERE</span> uid <span class="token operator">=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-3-2实现" tabindex="-1"><a class="header-anchor" href="#_3-3-2实现" aria-hidden="true">#</a> 3.3.2实现</h5><ul><li>Account.java</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> aid<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> uid<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Double</span> money<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>User.java</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> uid<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span><span class="token comment">// 用户姓名</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span><span class="token comment">// 性别</span>
    <span class="token keyword">private</span> <span class="token class-name">Date</span> birthday<span class="token punctuation">;</span><span class="token comment">// 生日</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span><span class="token comment">// 地址</span>

    <span class="token comment">//表达关系:1个用户对应多个账户</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">&gt;</span></span> accounts<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>UserDao.java</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 查询所有的用户对应的账户信息
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findUserAccountList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>UserDao.xml</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>
        <span class="token name">PUBLIC</span> <span class="token string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span>
        <span class="token string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.itheima.dao.UserDao<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>findUserAccountList<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userListId<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        SELECT * FROM t_user
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userListId<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>uid<span class="token punctuation">&quot;</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>uid<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sex<span class="token punctuation">&quot;</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sex<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>birthday<span class="token punctuation">&quot;</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>birthday<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>address<span class="token punctuation">&quot;</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>address<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token comment">&lt;!--加载多方数据,property属性:一方类里面List集合的属性名; ofType:List中的对象类型--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>accounts<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>account<span class="token punctuation">&quot;</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.itheima.dao.AccountDao.findByUid<span class="token punctuation">&quot;</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>uid<span class="token punctuation">&quot;</span></span> <span class="token attr-name">fetchType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>lazy<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>AccountDao.java</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountDao</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 根据uid查询当前用户的账户
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByUid</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> uid<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>AccountDao.xml</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>
        <span class="token name">PUBLIC</span> <span class="token string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span>
        <span class="token string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.itheima.dao.AccountDao<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>findByUid<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Account<span class="token punctuation">&quot;</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Integer<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>
        SELECT * FROM t_account WHERE  uid = #{uid}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>测试方法</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DbTest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">SqlSessionFactoryUtil</span><span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">UserDao</span> userDao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">findUserAccountList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">User</span> user <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getAccounts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-3-3小结" tabindex="-1"><a class="header-anchor" href="#_3-3-3小结" aria-hidden="true">#</a> 3.3.3小结</h5><ol><li>先把左外连接语句改成单表查询语句</li><li>改映射文件的collection标签的: select, column, fetchType</li></ol><figure><img src="`+p+`" alt="1561276059949" tabindex="0" loading="lazy"><figcaption>1561276059949</figcaption></figure><h3 id="_4-总结" tabindex="-1"><a class="header-anchor" href="#_4-总结" aria-hidden="true">#</a> 4.总结</h3><table><thead><tr><th>类别</th><th>特点</th></tr></thead><tbody><tr><td>立即加载</td><td>只要一调用方法，则马上发起查询</td></tr><tr><td>延迟加载</td><td>只有在真正使用时，才发起查询，如果不用，则不查询。</td></tr></tbody></table><h1 id="第二章-mybatis缓存" tabindex="-1"><a class="header-anchor" href="#第二章-mybatis缓存" aria-hidden="true">#</a> 第二章-MyBatis缓存</h1><h2 id="知识点-缓存概述" tabindex="-1"><a class="header-anchor" href="#知识点-缓存概述" aria-hidden="true">#</a> 知识点-缓存概述</h2><h3 id="_1-目标-1" tabindex="-1"><a class="header-anchor" href="#_1-目标-1" aria-hidden="true">#</a> 1.目标</h3><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-3" disabled="disabled"><label class="task-list-item-label" for="task-item-3"> 掌握MyBatis缓存类别</label></li></ul><h3 id="_2-路径-1" tabindex="-1"><a class="header-anchor" href="#_2-路径-1" aria-hidden="true">#</a> 2.路径</h3><ol><li>缓存概述</li><li>为什么使用缓存</li><li>缓存的适用情况</li><li>MyBatis缓存类别</li></ol><h3 id="_3-讲解-1" tabindex="-1"><a class="header-anchor" href="#_3-讲解-1" aria-hidden="true">#</a> 3.讲解</h3><h4 id="_3-1缓存概述" tabindex="-1"><a class="header-anchor" href="#_3-1缓存概述" aria-hidden="true">#</a> 3.1缓存概述</h4><p>​ 缓存就是一块内存空间.保存临时数据</p><h4 id="_3-2为什么使用缓存" tabindex="-1"><a class="header-anchor" href="#_3-2为什么使用缓存" aria-hidden="true">#</a> 3.2为什么使用缓存</h4><p>​ 将数据源（数据库或者文件）中的数据读取出来存放到缓存中，再次获取的时候 ,直接从缓存中获取，可以减少和数据库交互的次数 ,这样可以提升程序的性能！</p><h4 id="_3-3缓存的适用情况" tabindex="-1"><a class="header-anchor" href="#_3-3缓存的适用情况" aria-hidden="true">#</a> 3.3缓存的适用情况</h4><ul><li>适用于缓存的：经常查询但不经常修改的(eg: 省市,类别数据)，数据的正确与否对最终结果影响不大的</li><li>不适用缓存的：经常改变的数据 , 敏感数据（例如：股市的牌价，银行的汇率，银行卡里面的钱)等等,</li></ul><h4 id="_3-4mybatis缓存类别" tabindex="-1"><a class="header-anchor" href="#_3-4mybatis缓存类别" aria-hidden="true">#</a> 3.4MyBatis缓存类别</h4><p>​ 一级缓存：它是sqlSession对象的缓存，自带的(不需要配置的)不可卸载(不想用还不行)的. 一级缓存的生命周期与sqlSession一致。</p><p>​ 二级缓存：它是SqlSessionFactory的缓存。只要是同一个SqlSessionFactory创建的SqlSession就解压共享二级缓存的内容，并且可以操作二级缓存。二级缓存如果要使用的话，需要我们自己手动开启(需要配置的)。</p><h3 id="_4-小结" tabindex="-1"><a class="header-anchor" href="#_4-小结" aria-hidden="true">#</a> 4.小结</h3><ol><li>缓存: 一块内存空间. 用来提升性能</li><li>MyBatis缓存类别 <ul><li>一级缓存: 依赖sqlSession, 自带的不可以卸载</li><li>二级缓存: 依赖sqlSessionFactory, 需要手动配置</li></ul></li></ol><h2 id="知识点-一级缓存" tabindex="-1"><a class="header-anchor" href="#知识点-一级缓存" aria-hidden="true">#</a> 知识点-一级缓存</h2><h3 id="_1-目标-2" tabindex="-1"><a class="header-anchor" href="#_1-目标-2" aria-hidden="true">#</a> 1.目标</h3><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-4" disabled="disabled"><label class="task-list-item-label" for="task-item-4"> 掌握MyBatis一级缓存</label></li></ul><h3 id="_2-路径-2" tabindex="-1"><a class="header-anchor" href="#_2-路径-2" aria-hidden="true">#</a> 2.路径</h3><ol><li>证明一级缓存的存在</li><li>一级缓存分析</li><li>测试一级缓存清空</li></ol><h3 id="_3-讲解-2" tabindex="-1"><a class="header-anchor" href="#_3-讲解-2" aria-hidden="true">#</a> 3.讲解</h3><h4 id="_3-1证明一级缓存的存在" tabindex="-1"><a class="header-anchor" href="#_3-1证明一级缓存的存在" aria-hidden="true">#</a> 3.1证明一级缓存的存在</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">//证明一级缓存的存在</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">SqlSessionFactoryUtil</span><span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">UserDao</span> userDao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">User</span> user01 <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">findByUid</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> user02 <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">findByUid</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user01 <span class="token operator">==</span> user02<span class="token punctuation">)</span><span class="token punctuation">;</span>

        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2一级缓存分析" tabindex="-1"><a class="header-anchor" href="#_3-2一级缓存分析" aria-hidden="true">#</a> 3.2一级缓存分析</h4><p>​ <img src="`+o+`" alt="img" loading="lazy"></p><p>​ 第一次发起查询用户 id 为 1 的用户信息，先去找缓存中是否有 id 为 1 的用户信息，如果没有，从数据库查询用户信息。得到用户信息，将用户信息存储到一级缓存中。第二次发起查询用户 id 为 1 的用户信息，先去找缓存中是否有 id 为 1 的用户信息，缓存中有，直接从缓存中获取用户信息。</p><p>​ 如果 sqlSession 去执行 commit操作（执行插入、更新、删除），清空 SqlSession 中的一级缓存，这样做的目的为了让缓存中存储的是最新的信息，避免脏读。</p><h4 id="_3-3测试一级缓存清空" tabindex="-1"><a class="header-anchor" href="#_3-3测试一级缓存清空" aria-hidden="true">#</a> 3.3测试一级缓存清空</h4><ul><li>关闭session</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">SqlSessionFactoryUtil</span><span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">UserDao</span> userDao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">User</span> user1 <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">findByUid</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> user2 <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">findByUid</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1 <span class="token operator">==</span> user2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>

        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">SqlSession</span> sqlSession02 <span class="token operator">=</span> <span class="token class-name">SqlSessionFactoryUtil</span><span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">UserDao</span> userDao02 <span class="token operator">=</span> sqlSession02<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">User</span> user3 <span class="token operator">=</span> userDao02<span class="token punctuation">.</span><span class="token function">findByUid</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//再次从数据库查询了</span>

    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>更新数据也会清空一级缓存</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">SqlSessionFactoryUtil</span><span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">UserDao</span> userDao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">User</span> user01 <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">findByUid</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user01<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">&quot;女&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userDao<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>user01<span class="token punctuation">)</span><span class="token punctuation">;</span>
        sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">User</span> user02 <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">findByUid</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user01 <span class="token operator">==</span> user02<span class="token punctuation">)</span><span class="token punctuation">;</span>

        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-小结-1" tabindex="-1"><a class="header-anchor" href="#_4-小结-1" aria-hidden="true">#</a> 4.小结</h3><ol><li>一级缓存依赖sqlSession的. 不需要配置, 默认就有</li><li>一级缓存结构其实类似Map</li><li>清空一级缓存的情况 <ul><li>关闭sqlSession</li><li>进行增删改操作, 提交</li></ul></li></ol><h2 id="知识点-二级缓存" tabindex="-1"><a class="header-anchor" href="#知识点-二级缓存" aria-hidden="true">#</a> 知识点-二级缓存</h2><h3 id="_1-目标-3" tabindex="-1"><a class="header-anchor" href="#_1-目标-3" aria-hidden="true">#</a> 1.目标</h3><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-5" disabled="disabled"><label class="task-list-item-label" for="task-item-5"> 掌握MyBatis二级缓存</label></li></ul><h3 id="_2-路径-3" tabindex="-1"><a class="header-anchor" href="#_2-路径-3" aria-hidden="true">#</a> 2.路径</h3><ol><li>二级缓存的结构</li><li>二级缓存的使用</li><li>二级缓存的测试</li></ol><h3 id="_3-讲解-3" tabindex="-1"><a class="header-anchor" href="#_3-讲解-3" aria-hidden="true">#</a> 3.讲解</h3><p>​ 二级缓存是SqlSessionFactory的缓存。只要是同一个SqlSessionFactory创建的SqlSession就共享二级缓存的内容，并且可以操作二级缓存.</p><h4 id="_3-1二级缓存的结构" tabindex="-1"><a class="header-anchor" href="#_3-1二级缓存的结构" aria-hidden="true">#</a> 3.1二级缓存的结构</h4><figure><img src="`+c+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="_3-2二级缓存的使用" tabindex="-1"><a class="header-anchor" href="#_3-2二级缓存的使用" aria-hidden="true">#</a> 3.2二级缓存的使用</h4><p>步骤:</p><ol><li>SqlMapConfig.xml 文件开启二级缓存 (默认就是true)</li><li>在映射文件里面添加cache标签</li><li>在映射文件的select标签里面开启缓存</li></ol><ul><li>在 SqlMapConfig.xml 文件开启二级缓存</li></ul><figure><img src="'+l+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>​ <mark>因为 cacheEnabled 的取值默认就为 true</mark>，所以这一步可以省略不配置。为 true 代表开启二级缓存；为 false 代表不开启二级缓存。</p><ul><li><p>配置相关的 Mapper 映射文件</p><p><code>&lt;cache&gt;</code> 标签表示当前这个 mapper 映射将使用二级缓存，区分的标准就看 mapper 的 namespace 值。</p><figure><img src="'+i+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure></li><li><p>配置 statement 上面的 useCache 属性</p><p>​ 将 UserDao.xml 映射文件中的 <code>&lt;select&gt;</code>标签中设置 useCache=”true”代表当前这个 statement 要使用二<br> 级缓存，如果不使用二级缓存可以设置为 false。<br> ​ 注意： 针对每次查询都需要最新的数据 sql，要设置成 useCache=false，禁用二级缓存。</p><figure><img src="'+u+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure></li></ul><h4 id="_3-3测试" tabindex="-1"><a class="header-anchor" href="#_3-3测试" aria-hidden="true">#</a> 3.3测试</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Test</span>
    <span class="token comment">//证明二级缓存</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">SqlSession</span> sqlSession01 <span class="token operator">=</span> <span class="token class-name">SqlSessionFactoryUtils</span><span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">UserDao</span> userDao <span class="token operator">=</span> sqlSession01<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> user01 <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">findByUid</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sqlSession01<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">SqlSession</span> sqlSession02 <span class="token operator">=</span> <span class="token class-name">SqlSessionFactoryUtils</span><span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">UserDao</span> userDao02 <span class="token operator">=</span> sqlSession02<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> user02 <span class="token operator">=</span> userDao02<span class="token punctuation">.</span><span class="token function">findByUid</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//没有查询数据库了,直接从二级缓存获得</span>

        sqlSession01<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 经过上面的测试，我们发现执行了两次查询，并且在执行第一次查询后，我们关闭了一级缓存，再去执行第二次查询时，我们发现并没有对数据库发出 sql 语句，所以此时的数据就只能是来自于我们所说的二级缓存。</p><h3 id="_4-小结-2" tabindex="-1"><a class="header-anchor" href="#_4-小结-2" aria-hidden="true">#</a> 4.小结</h3><h4 id="_4-1二级缓存" tabindex="-1"><a class="header-anchor" href="#_4-1二级缓存" aria-hidden="true">#</a> 4.1二级缓存</h4><ol><li>依赖sqlSessionFactory</li><li>使用步骤 <ul><li>在SqlMapConfig进行全局配置(默认就是true)</li><li>在映射文件里面配置<code>&lt;cache/&gt;</code></li><li>在映射文件的select标签里面配置属性 <code>useCache=&quot;true&quot;</code></li></ul></li></ol><h4 id="_4-2注意事项" tabindex="-1"><a class="header-anchor" href="#_4-2注意事项" aria-hidden="true">#</a> 4.2注意事项</h4><p>​ 当我们在使用二级缓存时，缓存的类一定要实现 java.io.Serializable 接口，这种就可以使用序列化 方式来保存对象。</p><figure><img src="`+r+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h1 id="第三章-mybatis注解开发" tabindex="-1"><a class="header-anchor" href="#第三章-mybatis注解开发" aria-hidden="true">#</a> 第三章-MyBatis注解开发</h1><p>​ 这几年来注解开发越来越流行， Mybatis 也可以使用注解开发方式，这样我们就可以减少编写 Mapper映射文件了。 本次我们先围绕一些基本的 CRUD来学习，再学习复杂映射关系及延迟加载。</p><h2 id="知识点-使用-mybatis-注解实现基本crud" tabindex="-1"><a class="header-anchor" href="#知识点-使用-mybatis-注解实现基本crud" aria-hidden="true">#</a> 知识点-使用 Mybatis 注解实现基本CRUD</h2><h3 id="_1-目标-4" tabindex="-1"><a class="header-anchor" href="#_1-目标-4" aria-hidden="true">#</a> 1.目标</h3><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-6" disabled="disabled"><label class="task-list-item-label" for="task-item-6"> 使用 Mybatis 注解实现基本CRUD</label></li></ul><h3 id="_2-分析" tabindex="-1"><a class="header-anchor" href="#_2-分析" aria-hidden="true">#</a> 2.分析</h3><ol><li>@Insert 新增 <ul><li>@SelectKey 获得新增后的数据的id</li></ul></li><li>@Delete 删除</li><li>@Update 更新</li><li>@Select 查询</li></ol><h3 id="_3-实现" tabindex="-1"><a class="header-anchor" href="#_3-实现" aria-hidden="true">#</a> 3.实现</h3><ul><li>Dao</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>


<span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM t_user&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token annotation punctuation">@SelectKey</span><span class="token punctuation">(</span>keyProperty <span class="token operator">=</span> <span class="token string">&quot;uid&quot;</span><span class="token punctuation">,</span>resultType <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>before <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>statement<span class="token operator">=</span><span class="token string">&quot;SELECT LAST_INSERT_ID()&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">&quot;INSERT INTO t_user(username,sex,birthday,address)VALUES(#{username},#{sex},#{birthday},#{address})&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">&quot;UPDATE t_user SET  username = #{username} ,sex = #{sex}, birthday = #{birthday},address = #{address} WHERE uid = #{uid}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token annotation punctuation">@Delete</span><span class="token punctuation">(</span><span class="token string">&quot;DELETE  FROM t_user WHERE uid = #{uid}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> uid<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT  * FROM  t_user WHERE  uid = #{uid}&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">User</span> <span class="token function">findByUid</span><span class="token punctuation">(</span><span class="token keyword">int</span> uid<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM t_user WHERE username like #{firstName}&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByFirstName</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstName<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>SqlMapConfig.xml</li></ul><figure><img src="`+d+`" alt="1535361902219" tabindex="0" loading="lazy"><figcaption>1535361902219</figcaption></figure><h3 id="_4-小结-3" tabindex="-1"><a class="header-anchor" href="#_4-小结-3" aria-hidden="true">#</a> 4.小结</h3><ol><li><p>@Insert(&quot;sql语句&quot;) 新增</p><ul><li>@SelectKey() 获得新增的记录的id</li></ul></li><li><p>@Delete(&quot;sql语句&quot;) 删除</p></li><li><p>@Update(&quot;sql语句&quot;) 更新</p></li><li><p>@Select(&quot;sql语句&quot;) 查询</p></li></ol><h2 id="知识点-使用mybatis注解实现复杂关系映射开发" tabindex="-1"><a class="header-anchor" href="#知识点-使用mybatis注解实现复杂关系映射开发" aria-hidden="true">#</a> 知识点-使用Mybatis注解实现复杂关系映射开发</h2><h3 id="_1-目标-5" tabindex="-1"><a class="header-anchor" href="#_1-目标-5" aria-hidden="true">#</a> 1.目标</h3><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-7" disabled="disabled"><label class="task-list-item-label" for="task-item-7"> 掌握Mybatis注解开发</label></li></ul><h3 id="_2-路径-4" tabindex="-1"><a class="header-anchor" href="#_2-路径-4" aria-hidden="true">#</a> 2.路径</h3><ol><li>复杂关系映射的注解说明</li><li>使用注解实现一对一复杂关系映射及延迟加载</li><li>使用注解实现一对多复杂关系映射及延迟加载</li></ol><h3 id="_3-讲解-4" tabindex="-1"><a class="header-anchor" href="#_3-讲解-4" aria-hidden="true">#</a> 3.讲解</h3><p>​ 实现复杂关系映射之前我们可以在映射文件中通过配置<code>&lt;resultMap&gt;</code>来实现，但通过后我们发现并没有@ResultMap 这个注解。下面我们一起来学习@Results 注解， @Result 注解， @One 注解， @Many注解。</p><h4 id="_3-1复杂关系映射的注解说明" tabindex="-1"><a class="header-anchor" href="#_3-1复杂关系映射的注解说明" aria-hidden="true">#</a> 3.1复杂关系映射的注解说明</h4><ul><li>@Results 注解 , 代替的是标签<code>&lt;resultMap&gt;</code></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//该注解中可以使用单个@Result 注解，也可以使用@Result 集合</span>
<span class="token annotation punctuation">@Results</span>（<span class="token punctuation">{</span><span class="token annotation punctuation">@Result</span>（）， <span class="token annotation punctuation">@Result</span>（） <span class="token punctuation">}</span>）或<span class="token annotation punctuation">@Results</span>（<span class="token annotation punctuation">@Result</span>（））
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>@Resutl 注解 ,代替了 <code>&lt;id&gt;</code>标签和<code>&lt;result&gt;</code>标签 ,</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column<span class="token operator">=</span><span class="token string">&quot;列名&quot;</span><span class="token punctuation">,</span>property<span class="token operator">=</span><span class="token string">&quot;属性名&quot;</span><span class="token punctuation">,</span>one<span class="token operator">=</span><span class="token annotation punctuation">@One</span><span class="token punctuation">(</span>select<span class="token operator">=</span><span class="token string">&quot;指定用来多表查询的 sqlmapper&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>many<span class="token operator">=</span><span class="token annotation punctuation">@Many</span><span class="token punctuation">(</span>select<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token annotation punctuation">@Resutl</span> 注解属性说明	
    column 数据库的列名
    <span class="token class-name">Property</span> 需要装配的属性名
    one 需要使用的<span class="token annotation punctuation">@One</span> 注解（<span class="token annotation punctuation">@Result</span>（one<span class="token operator">=</span><span class="token annotation punctuation">@One</span>）（）））
    many 需要使用的<span class="token annotation punctuation">@Many</span> 注解（<span class="token annotation punctuation">@Result</span>（many<span class="token operator">=</span><span class="token annotation punctuation">@many</span>）（）））
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>@One 注解（一对一）,代替了<code>&lt;assocation&gt;</code>标签，是多表查询的关键，在注解中用来指定子查询返回单一对象。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column<span class="token operator">=</span><span class="token string">&quot;列名&quot;</span><span class="token punctuation">,</span>property<span class="token operator">=</span><span class="token string">&quot;属性名&quot;</span><span class="token punctuation">,</span>one<span class="token operator">=</span><span class="token annotation punctuation">@One</span><span class="token punctuation">(</span>select<span class="token operator">=</span><span class="token string">&quot;指定用来多表查询的 sqlmapper&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>@Many 注解（一对多） ,代替了<code>&lt;Collection&gt;</code>标签,是是多表查询的关键，在注解中用来指定子查询返回对象集合</p><p>​ 注意：聚集元素用来处理“一对多”的关系。需要指定映射的 Java 实体类的属性，属性的 javaType（一般<br> 为 ArrayList） 但是注解中可以不定义；</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>many<span class="token operator">=</span><span class="token annotation punctuation">@Many</span><span class="token punctuation">(</span>select<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-2使用注解实现一对一复杂关系映射及延迟加载" tabindex="-1"><a class="header-anchor" href="#_3-2使用注解实现一对一复杂关系映射及延迟加载" aria-hidden="true">#</a> 3.2使用注解实现一对一复杂关系映射及延迟加载</h4><h5 id="_3-2-1需求-1" tabindex="-1"><a class="header-anchor" href="#_3-2-1需求-1" aria-hidden="true">#</a> 3.2.1需求</h5><p>​ 查询账户(Account)信息并且关联查询用户(User)信息。</p><p>​ 先查询账户(Account)信息，当我们需要用到用户(User)信息时再查询用户(User)信息。</p><h5 id="_3-2-2实现-1" tabindex="-1"><a class="header-anchor" href="#_3-2-2实现-1" aria-hidden="true">#</a> 3.2.2实现</h5><ul><li>User.java</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> uid<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span><span class="token comment">// 用户姓名</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span><span class="token comment">// 性别</span>
    <span class="token keyword">private</span> <span class="token class-name">Date</span> birthday<span class="token punctuation">;</span><span class="token comment">// 生日</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span><span class="token comment">// 地址</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Account.java</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> aid<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> uid<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Double</span> money<span class="token punctuation">;</span>

    <span class="token comment">//表达关系:1个用户对应1个账户</span>
    <span class="token keyword">private</span> <span class="token class-name">User</span> user<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>AccountDao.java</li></ul><figure><img src="`+k+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountDao</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 查询账户信息(包含用户信息)
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM t_account&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">&quot;aid&quot;</span><span class="token punctuation">,</span>property <span class="token operator">=</span> <span class="token string">&quot;aid&quot;</span><span class="token punctuation">,</span>id <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">&quot;uid&quot;</span><span class="token punctuation">,</span>property <span class="token operator">=</span> <span class="token string">&quot;uid&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">&quot;money&quot;</span><span class="token punctuation">,</span>property <span class="token operator">=</span> <span class="token string">&quot;money&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">&quot;uid&quot;</span><span class="token punctuation">,</span>property <span class="token operator">=</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span>one<span class="token operator">=</span><span class="token annotation punctuation">@One</span><span class="token punctuation">(</span>select<span class="token operator">=</span><span class="token string">&quot;com.itheima.dao.UserDao.findByUid&quot;</span><span class="token punctuation">,</span>fetchType <span class="token operator">=</span> <span class="token class-name">FetchType</span><span class="token punctuation">.</span><span class="token constant">LAZY</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAccountList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>UserDao.java</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 根据id查询user
     * <span class="token keyword">@param</span> <span class="token parameter">uid</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM t_user WHERE  uid = #{uid}&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">User</span> <span class="token function">findByUid</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> uid<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>测试</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DbTest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">SqlSessionFactoryUtil</span><span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">AccountDao</span> accountDao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">AccountDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> accountDao<span class="token punctuation">.</span><span class="token function">findAccountList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Account</span> account <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">User</span> user <span class="token operator">=</span> account<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-2-3小结-1" tabindex="-1"><a class="header-anchor" href="#_3-2-3小结-1" aria-hidden="true">#</a> 3.2.3小结</h5><ol><li>@Results() 代替resultMap, @Result() 代替id,result,association【配置one属性】)标签</li><li>图</li></ol><figure><img src="`+v+`" alt="1561283745286" tabindex="0" loading="lazy"><figcaption>1561283745286</figcaption></figure><h4 id="_3-3使用注解实现一对多复杂关系映射及延迟加载" tabindex="-1"><a class="header-anchor" href="#_3-3使用注解实现一对多复杂关系映射及延迟加载" aria-hidden="true">#</a> 3.3使用注解实现一对多复杂关系映射及延迟加载</h4><h5 id="_3-3-1需求-1" tabindex="-1"><a class="header-anchor" href="#_3-3-1需求-1" aria-hidden="true">#</a> 3.3.1需求</h5><p>​ 完成加载用户对象时，查询该用户所拥有的账户信息。</p><p>​ 等账户信息使用的时候再查询.</p><h5 id="_3-3-2实现-1" tabindex="-1"><a class="header-anchor" href="#_3-3-2实现-1" aria-hidden="true">#</a> 3.3.2实现</h5><ul><li>User.java</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> uid<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span><span class="token comment">// 用户姓名</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span><span class="token comment">// 性别</span>
    <span class="token keyword">private</span> <span class="token class-name">Date</span> birthday<span class="token punctuation">;</span><span class="token comment">// 生日</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span><span class="token comment">// 地址</span>

    <span class="token comment">//用于保存用户的多个账户信息</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">&gt;</span></span> accounts<span class="token punctuation">;</span>
    
	<span class="token comment">//...    </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>UserDao.java</li></ul><figure><img src="`+m+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 查询所有的用户对应的账户信息
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM t_user&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">&quot;uid&quot;</span><span class="token punctuation">,</span>property <span class="token operator">=</span> <span class="token string">&quot;uid&quot;</span><span class="token punctuation">,</span>id <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span>property <span class="token operator">=</span> <span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">&quot;sex&quot;</span><span class="token punctuation">,</span>property <span class="token operator">=</span> <span class="token string">&quot;sex&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">&quot;birthday&quot;</span><span class="token punctuation">,</span>property <span class="token operator">=</span> <span class="token string">&quot;birthday&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">&quot;address&quot;</span><span class="token punctuation">,</span>property <span class="token operator">=</span> <span class="token string">&quot;address&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">&quot;uid&quot;</span><span class="token punctuation">,</span>property <span class="token operator">=</span><span class="token string">&quot;accounts&quot;</span><span class="token punctuation">,</span>many <span class="token operator">=</span> <span class="token annotation punctuation">@Many</span><span class="token punctuation">(</span>
                    select <span class="token operator">=</span> <span class="token string">&quot;com.itheima.dao.AccountDao.findByUid&quot;</span><span class="token punctuation">,</span>fetchType <span class="token operator">=</span> <span class="token class-name">FetchType</span><span class="token punctuation">.</span><span class="token constant">LAZY</span>
            <span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findUserAccountList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>AccountDao.java</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountDao</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 根据uid查询当前用户的账户
     *
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM t_account WHERE  uid = #{uid}&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByUid</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> uid<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>测试</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DbTest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">SqlSessionFactoryUtil</span><span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">UserDao</span> userDao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">findUserAccountList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">User</span> user <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getAccounts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-3-3小结-1" tabindex="-1"><a class="header-anchor" href="#_3-3-3小结-1" aria-hidden="true">#</a> 3.3.3小结</h5><ol><li><p>Results 代替resultMap, @Result 代替id【配置id属性=true】,result,collection【配置many属性, many属性是@Many(select=&quot;&quot; ,fetchType=&quot;&quot;)】</p></li><li><p>图</p></li></ol><figure><img src="`+b+'" alt="1561284725407" tabindex="0" loading="lazy"><figcaption>1561284725407</figcaption></figure>',191),y=[g];function q(f,_){return s(),a("div",null,y)}const w=n(h,[["render",q],["__file","day03-MyBatis2.0.html.vue"]]);export{w as default};
