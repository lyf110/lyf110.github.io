import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as l,c as i,a as n,b as s,d as u,e as p}from"./app-5f6064b2.js";const k="/assets/image-20210925092845529-ec66e28e.png",r="/assets/image-20210925103029924-a0f0ecb8.png",d="/assets/image-20210925104726158-65a85903.png",m="/assets/image-20210925113122759-e9309949.png",v="/assets/image-20210925141507603-558cd066.png",a="/assets/image-20210925115601560-7c4988bb.png",t="/assets/image-20210925115740281-2b4bc003.png",b="/assets/image-20210925141553785-e48342bf.png",g="/assets/image-20210925115824345-5bcb578a.png",y="/assets/image-20210925115946064-3133a072.png",f="/assets/image-20210925120119030-0985f332.png",w="/assets/image-20210925120221883-57aa6aef.png",h="/assets/image-20210925142313050-bb7764a0.png",x="/assets/image-20210925142438552-a69aa28c.png",S="/assets/image-20210925144355865-9de1144f.png",C="/assets/image-20210925144010507-1db3463f.png",N="/assets/image-20210925144233302-f34f20e4.png",_="/assets/image-20210925101327080-748e06ea.png",E="/assets/image-20210925152626648-98c4edec.png",T="/assets/image-20210925153228036-9408c377.png",j="/assets/image-20210925153719891-69072367.png",O="/assets/image-20210925163744108-726cda82.png",R="/assets/sentinel-d9144eba.jpg",W="/assets/image-20210925172542274-7e0747cd.png",A="/assets/image-20210925175221211-e34ef4e2.png",P="/assets/image-20210925180522926-9a87e04a.png",M="/assets/image-20210925180619492-4dc83008.png",q="/assets/image-20210925180810181-b97dcd3e.png",D="/assets/image-20210925180954856-f24f8a82.png",z="/assets/image-20210925181359203-83dcdbe7.png",L="/assets/image-20210925181714605-9e0033f3.png",I="/assets/image-20210925182127206-2ecb11ca.png",B="/assets/image-20210925210716675-78db1b34.png",F="/assets/image-20210925211020881-524c1869.png",U="/assets/image-20210925213440686-b8f1ecb3.png",H="/assets/image-20210925213939035-5431cac7.png",Q={},Y=p('<h1 id="sentinel源码分析" tabindex="-1"><a class="header-anchor" href="#sentinel源码分析" aria-hidden="true">#</a> Sentinel源码分析</h1><h1 id="_1-sentinel的基本概念" tabindex="-1"><a class="header-anchor" href="#_1-sentinel的基本概念" aria-hidden="true">#</a> 1.Sentinel的基本概念</h1><p>Sentinel实现限流、隔离、降级、熔断等功能，本质要做的就是两件事情：</p><ul><li>统计数据：统计某个资源的访问数据（QPS、RT等信息）</li><li>规则判断：判断限流规则、隔离规则、降级规则、熔断规则是否满足</li></ul><p>这里的<strong>资源</strong>就是希望被Sentinel保护的业务，例如项目中定义的controller方法就是默认被Sentinel保护的资源。</p><h2 id="_1-1-processorslotchain" tabindex="-1"><a class="header-anchor" href="#_1-1-processorslotchain" aria-hidden="true">#</a> 1.1.ProcessorSlotChain</h2><p>实现上述功能的核心骨架是一个叫做ProcessorSlotChain的类。这个类基于责任链模式来设计，将不同的功能（限流、降级、系统保护）封装为一个个的Slot，请求进入后逐个执行即可。</p><p>其工作流如图：</p><figure><img src="'+k+'" alt="image-20210925092845529" tabindex="0" loading="lazy"><figcaption>image-20210925092845529</figcaption></figure><p>责任链中的Slot也分为两大类：</p><ul><li>统计数据构建部分（statistic） <ul><li>NodeSelectorSlot：负责构建簇点链路中的节点（DefaultNode），将这些节点形成链路树</li><li>ClusterBuilderSlot：负责构建某个资源的ClusterNode，ClusterNode可以保存资源的运行信息（响应时间、QPS、block 数目、线程数、异常数等）以及来源信息（origin名称）</li><li>StatisticSlot：负责统计实时调用数据，包括运行信息、来源信息等</li></ul></li><li>规则判断部分（rule checking） <ul><li>AuthoritySlot：负责授权规则（来源控制）</li><li>SystemSlot：负责系统保护规则</li><li>ParamFlowSlot：负责热点参数限流规则</li><li>FlowSlot：负责限流规则</li><li>DegradeSlot：负责降级规则</li></ul></li></ul><h2 id="_1-2-node" tabindex="-1"><a class="header-anchor" href="#_1-2-node" aria-hidden="true">#</a> 1.2.Node</h2><p>Sentinel中的簇点链路是由一个个的Node组成的，Node是一个接口，包括下面的实现：</p><figure><img src="'+r+'" alt="image-20210925103029924" tabindex="0" loading="lazy"><figcaption>image-20210925103029924</figcaption></figure><p>所有的节点都可以记录对资源的访问统计数据，所以都是StatisticNode的子类。</p><p>按照作用分为两类Node：</p><ul><li>DefaultNode：代表链路树中的每一个资源，一个资源出现在不同链路中时，会创建不同的DefaultNode节点。而树的入口节点叫EntranceNode，是一种特殊的DefaultNode</li><li>ClusterNode：代表资源，一个资源不管出现在多少链路中，只会有一个ClusterNode。记录的是当前资源被访问的所有统计数据之和。</li></ul><p>DefaultNode记录的是资源在当前链路中的访问数据，用来实现基于链路模式的限流规则。ClusterNode记录的是资源在所有链路中的访问数据，实现默认模式、关联模式的限流规则。</p><p>例如：我们在一个SpringMVC项目中，有两个业务：</p><ul><li>业务1：controller中的资源<code>/order/query</code>访问了service中的资源<code>/goods</code></li><li>业务2：controller中的资源<code>/order/save</code>访问了service中的资源<code>/goods</code></li></ul><p>创建的链路图如下：</p><figure><img src="'+d+`" alt="image-20210925104726158" tabindex="0" loading="lazy"><figcaption>image-20210925104726158</figcaption></figure><h2 id="_1-3-entry" tabindex="-1"><a class="header-anchor" href="#_1-3-entry" aria-hidden="true">#</a> 1.3.Entry</h2><p>默认情况下，Sentinel会将controller中的方法作为被保护资源，那么问题来了，我们该如何将自己的一段代码标记为一个Sentinel的资源呢？</p><p>Sentinel中的资源用Entry来表示。声明Entry的API示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 资源名可使用任意有业务语义的字符串，比如方法名、接口名或其它可唯一标识的字符串。</span>
<span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Entry</span> entry <span class="token operator">=</span> <span class="token class-name">SphU</span><span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token string">&quot;resourceName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 被保护的业务逻辑</span>
  <span class="token comment">// do something here...</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BlockException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 资源访问阻止，被限流或被降级</span>
  <span class="token comment">// 在此处进行相应的处理操作</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-1-自定义资源" tabindex="-1"><a class="header-anchor" href="#_1-3-1-自定义资源" aria-hidden="true">#</a> 1.3.1.自定义资源</h3><p>例如，我们在order-service服务中，将<code>OrderService</code>的<code>queryOrderById()</code>方法标记为一个资源。</p><p>1）首先在order-service中引入sentinel依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--sentinel--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）然后配置Sentinel地址</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>
      <span class="token key atrule">transport</span><span class="token punctuation">:</span>
        <span class="token key atrule">dashboard</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8089</span> <span class="token comment"># 这里我的sentinel用了8089的端口</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3）修改OrderService类的queryOrderById方法</p><p>代码这样来实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Order</span> <span class="token function">queryOrderById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> orderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建Entry，标记资源，资源名为resource1</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Entry</span> entry <span class="token operator">=</span> <span class="token class-name">SphU</span><span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token string">&quot;resource1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1.查询订单，这里是假数据</span>
        <span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token class-name">Order</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token number">101L</span><span class="token punctuation">,</span> <span class="token number">4999L</span><span class="token punctuation">,</span> <span class="token string">&quot;小米 MIX4&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2.查询用户，基于Feign的远程调用</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> userClient<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 3.设置</span>
        order<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 4.返回</span>
        <span class="token keyword">return</span> order<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BlockException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;被限流或降级&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4）访问</p>`,36),G={href:"http://localhost:8080/order/101",target:"_blank",rel:"noopener noreferrer"},V=p('<p>然后打开sentinel控制台，查看簇点链路：</p><figure><img src="'+m+'" alt="image-20210925113122759" tabindex="0" loading="lazy"><figcaption>image-20210925113122759</figcaption></figure><h3 id="_1-3-2-基于注解标记资源" tabindex="-1"><a class="header-anchor" href="#_1-3-2-基于注解标记资源" aria-hidden="true">#</a> 1.3.2.基于注解标记资源</h3><p>在之前学习Sentinel的时候，我们知道可以通过给方法添加@SentinelResource注解的形式来标记资源。</p><figure><img src="'+v+'" alt="image-20210925141507603" tabindex="0" loading="lazy"><figcaption>image-20210925141507603</figcaption></figure><p>这个是怎么实现的呢？</p><p>来看下我们引入的Sentinel依赖包：</p><figure><img src="'+a+'" alt="image-20210925115601560" tabindex="0" loading="lazy"><figcaption>image-20210925115601560</figcaption></figure><p>其中的spring.factories声明需要就是自动装配的配置类，内容如下：</p><figure><img src="'+t+'" alt="image-20210925115740281" tabindex="0" loading="lazy"><figcaption>image-20210925115740281</figcaption></figure><p>我们来看下<code>SentinelAutoConfiguration</code>这个类：</p><figure><img src="'+b+`" alt="image-20210925141553785" tabindex="0" loading="lazy"><figcaption>image-20210925141553785</figcaption></figure><p>可以看到，在这里声明了一个Bean，<code>SentinelResourceAspect</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token doc-comment comment">/**
 * Aspect for methods with <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">SentinelResource</span></span><span class="token punctuation">}</span> annotation.
 *
 * <span class="token keyword">@author</span> Eric Zhao
 */</span>
<span class="token annotation punctuation">@Aspect</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SentinelResourceAspect</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractSentinelAspectSupport</span> <span class="token punctuation">{</span>
	<span class="token comment">// 切点是添加了 @SentinelResource注解的类</span>
    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">&quot;@annotation(com.alibaba.csp.sentinel.annotation.SentinelResource)&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sentinelResourceAnnotationPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
	
    <span class="token comment">// 环绕增强</span>
    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">&quot;sentinelResourceAnnotationPointcut()&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invokeResourceWithSentinel</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> pjp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取受保护的方法</span>
        <span class="token class-name">Method</span> originMethod <span class="token operator">=</span> <span class="token function">resolveMethod</span><span class="token punctuation">(</span>pjp<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 获取 @SentinelResource注解</span>
        <span class="token class-name">SentinelResource</span> annotation <span class="token operator">=</span> originMethod<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">SentinelResource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>annotation <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Should not go through here.</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;Wrong state for SentinelResource annotation&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 获取注解上的资源名称</span>
        <span class="token class-name">String</span> resourceName <span class="token operator">=</span> <span class="token function">getResourceName</span><span class="token punctuation">(</span>annotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> originMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">EntryType</span> entryType <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">entryType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> resourceType <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">resourceType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Entry</span> entry <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 创建资源 Entry</span>
            entry <span class="token operator">=</span> <span class="token class-name">SphU</span><span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span>resourceName<span class="token punctuation">,</span> resourceType<span class="token punctuation">,</span> entryType<span class="token punctuation">,</span> pjp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 执行受保护的方法</span>
            <span class="token class-name">Object</span> result <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> result<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BlockException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">handleBlockException</span><span class="token punctuation">(</span>pjp<span class="token punctuation">,</span> annotation<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Throwable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> exceptionsToIgnore <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">exceptionsToIgnore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// The ignore list will be checked first.</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>exceptionsToIgnore<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">exceptionBelongsTo</span><span class="token punctuation">(</span>ex<span class="token punctuation">,</span> exceptionsToIgnore<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">exceptionBelongsTo</span><span class="token punctuation">(</span>ex<span class="token punctuation">,</span> annotation<span class="token punctuation">.</span><span class="token function">exceptionsToTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">traceException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token function">handleFallback</span><span class="token punctuation">(</span>pjp<span class="token punctuation">,</span> annotation<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// No fallback function can handle the exception, so throw it out.</span>
            <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>entry <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                entry<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> pjp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单来说，@SentinelResource注解就是一个标记，而Sentinel基于AOP思想，对被标记的方法做环绕增强，完成资源（<code>Entry</code>）的创建。</p><h2 id="_1-4-context" tabindex="-1"><a class="header-anchor" href="#_1-4-context" aria-hidden="true">#</a> 1.4.Context</h2><p>上一节，我们发现簇点链路中除了controller方法、service方法两个资源外，还多了一个默认的入口节点：</p><p>sentinel_spring_web_context，是一个EntranceNode类型的节点</p><p>这个节点是在初始化Context的时候由Sentinel帮我们创建的。</p><h3 id="_1-4-1-什么是context" tabindex="-1"><a class="header-anchor" href="#_1-4-1-什么是context" aria-hidden="true">#</a> 1.4.1.什么是Context</h3><p>那么，什么是Context呢？</p><ul><li>Context 代表调用链路上下文，贯穿一次调用链路中的所有资源（ <code>Entry</code>），基于ThreadLocal。</li><li>Context 维持着入口节点（<code>entranceNode</code>）、本次调用链路的 curNode（当前资源节点）、调用来源（<code>origin</code>）等信息。</li><li>后续的Slot都可以通过Context拿到DefaultNode或者ClusterNode，从而获取统计数据，完成规则判断</li><li>Context初始化的过程中，会创建EntranceNode，contextName就是EntranceNode的名称</li></ul><p>对应的API如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 创建context，包含两个参数：context名称、 来源名称</span>
<span class="token class-name">ContextUtil</span><span class="token punctuation">.</span><span class="token function">enter</span><span class="token punctuation">(</span><span class="token string">&quot;contextName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;originName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-2-context的初始化" tabindex="-1"><a class="header-anchor" href="#_1-4-2-context的初始化" aria-hidden="true">#</a> 1.4.2.Context的初始化</h3><p>那么这个Context又是在何时完成初始化的呢？</p><h4 id="_1-4-2-1-自动装配" tabindex="-1"><a class="header-anchor" href="#_1-4-2-1-自动装配" aria-hidden="true">#</a> 1.4.2.1.自动装配</h4><p>来看下我们引入的Sentinel依赖包：</p><figure><img src="`+a+'" alt="image-20210925115601560" tabindex="0" loading="lazy"><figcaption>image-20210925115601560</figcaption></figure><p>其中的spring.factories声明需要就是自动装配的配置类，内容如下：</p><figure><img src="'+t+'" alt="image-20210925115740281" tabindex="0" loading="lazy"><figcaption>image-20210925115740281</figcaption></figure><p>我们先看SentinelWebAutoConfiguration这个类：</p><figure><img src="'+g+'" alt="image-20210925115824345" tabindex="0" loading="lazy"><figcaption>image-20210925115824345</figcaption></figure><p>这个类实现了WebMvcConfigurer，我们知道这个是SpringMVC自定义配置用到的类，可以配置HandlerInterceptor：</p><figure><img src="'+y+'" alt="image-20210925115946064" tabindex="0" loading="lazy"><figcaption>image-20210925115946064</figcaption></figure><p>可以看到这里配置了一个<code>SentinelWebInterceptor</code>的拦截器。</p><p><code>SentinelWebInterceptor</code>的声明如下：</p><figure><img src="'+f+'" alt="image-20210925120119030" tabindex="0" loading="lazy"><figcaption>image-20210925120119030</figcaption></figure><p>发现它继承了<code>AbstractSentinelInterceptor</code>这个类。</p><figure><img src="'+w+`" alt="image-20210925120221883" tabindex="0" loading="lazy"><figcaption>image-20210925120221883</figcaption></figure><p><code>HandlerInterceptor</code>拦截器会拦截一切进入controller的方法，执行<code>preHandle</code>前置拦截方法，而Context的初始化就是在这里完成的。</p><h4 id="_1-4-2-2-abstractsentinelinterceptor" tabindex="-1"><a class="header-anchor" href="#_1-4-2-2-abstractsentinelinterceptor" aria-hidden="true">#</a> 1.4.2.2.AbstractSentinelInterceptor</h4><p><code>HandlerInterceptor</code>拦截器会拦截一切进入controller的方法，执行<code>preHandle</code>前置拦截方法，而Context的初始化就是在这里完成的。</p><p>我们来看看这个类的<code>preHandle</code>实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span>
    <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取资源名称，一般是controller方法的@RequestMapping路径，例如/order/{orderId}</span>
        <span class="token class-name">String</span> resourceName <span class="token operator">=</span> <span class="token function">getResourceName</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtil</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>resourceName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 从request中获取请求来源，将来做 授权规则 判断时会用</span>
        <span class="token class-name">String</span> origin <span class="token operator">=</span> <span class="token function">parseOrigin</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 获取 contextName，默认是sentinel_spring_web_context</span>
        <span class="token class-name">String</span> contextName <span class="token operator">=</span> <span class="token function">getContextName</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 创建 Context</span>
        <span class="token class-name">ContextUtil</span><span class="token punctuation">.</span><span class="token function">enter</span><span class="token punctuation">(</span>contextName<span class="token punctuation">,</span> origin<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 创建资源，名称就是当前请求的controller方法的映射路径</span>
        <span class="token class-name">Entry</span> entry <span class="token operator">=</span> <span class="token class-name">SphU</span><span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span>resourceName<span class="token punctuation">,</span> <span class="token class-name">ResourceTypeConstants</span><span class="token punctuation">.</span><span class="token constant">COMMON_WEB</span><span class="token punctuation">,</span> <span class="token class-name">EntryType</span><span class="token punctuation">.</span><span class="token constant">IN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>baseWebMvcConfig<span class="token punctuation">.</span><span class="token function">getRequestAttributeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BlockException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">handleBlockException</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token class-name">ContextUtil</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-4-2-3-contextutil" tabindex="-1"><a class="header-anchor" href="#_1-4-2-3-contextutil" aria-hidden="true">#</a> 1.4.2.3.ContextUtil</h4><p>创建Context的方法就是<code> ContextUtil.enter(contextName, origin);</code></p><p>我们进入该方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Context</span> <span class="token function">enter</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> origin<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">CONTEXT_DEFAULT_NAME</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ContextNameDefineException</span><span class="token punctuation">(</span>
            <span class="token string">&quot;The &quot;</span> <span class="token operator">+</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">CONTEXT_DEFAULT_NAME</span> <span class="token operator">+</span> <span class="token string">&quot; can&#39;t be permit to defined!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">trueEnter</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> origin<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进入<code>trueEnter</code>方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token class-name">Context</span> <span class="token function">trueEnter</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> origin<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 尝试获取context</span>
    <span class="token class-name">Context</span> context <span class="token operator">=</span> contextHolder<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 判空</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果为空，开始初始化</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">DefaultNode</span><span class="token punctuation">&gt;</span></span> localCacheNameMap <span class="token operator">=</span> contextNameNodeMap<span class="token punctuation">;</span>
        <span class="token comment">// 尝试获取入口节点</span>
        <span class="token class-name">DefaultNode</span> node <span class="token operator">=</span> localCacheNameMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token constant">LOCK</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                node <span class="token operator">=</span> contextNameNodeMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 入口节点为空，初始化入口节点 EntranceNode</span>
                    node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EntranceNode</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringResourceWrapper</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token class-name">EntryType</span><span class="token punctuation">.</span><span class="token constant">IN</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 添加入口节点到 ROOT</span>
                    <span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">ROOT</span><span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 将入口节点放入缓存</span>
                    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">DefaultNode</span><span class="token punctuation">&gt;</span></span> newMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>contextNameNodeMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    newMap<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>contextNameNodeMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    newMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    contextNameNodeMap <span class="token operator">=</span> newMap<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                <span class="token constant">LOCK</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 创建Context，参数为：入口节点 和 contextName</span>
        context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置请求来源 origin</span>
        context<span class="token punctuation">.</span><span class="token function">setOrigin</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 放入ThreadLocal</span>
        contextHolder<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 返回</span>
    <span class="token keyword">return</span> context<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_2-processorslotchain执行流程" tabindex="-1"><a class="header-anchor" href="#_2-processorslotchain执行流程" aria-hidden="true">#</a> 2.ProcessorSlotChain执行流程</h1><p>接下来我们跟踪源码，验证下ProcessorSlotChain的执行流程。</p><h2 id="_2-1-入口" tabindex="-1"><a class="header-anchor" href="#_2-1-入口" aria-hidden="true">#</a> 2.1.入口</h2><p>首先，回到一切的入口，<code>AbstractSentinelInterceptor</code>类的<code>preHandle</code>方法：</p><figure><img src="`+h+'" alt="image-20210925142313050" tabindex="0" loading="lazy"><figcaption>image-20210925142313050</figcaption></figure><p>还有，<code>SentinelResourceAspect</code>的环绕增强方法：</p><figure><img src="'+x+`" alt="image-20210925142438552" tabindex="0" loading="lazy"><figcaption>image-20210925142438552</figcaption></figure><p>可以看到，任何一个资源必定要执行<code>SphU.entry()</code>这个方法:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Entry</span> <span class="token function">entry</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> resourceType<span class="token punctuation">,</span> <span class="token class-name">EntryType</span> trafficType<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
    <span class="token keyword">throws</span> <span class="token class-name">BlockException</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Env</span><span class="token punctuation">.</span>sph<span class="token punctuation">.</span><span class="token function">entryWithType</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> resourceType<span class="token punctuation">,</span> trafficType<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>继续进入<code>Env.sph.entryWithType(name, resourceType, trafficType, 1, args);</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">Entry</span> <span class="token function">entryWithType</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> resourceType<span class="token punctuation">,</span> <span class="token class-name">EntryType</span> entryType<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">boolean</span> prioritized<span class="token punctuation">,</span>
                           <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BlockException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 将 资源名称等基本信息 封装为一个 StringResourceWrapper对象</span>
    <span class="token class-name">StringResourceWrapper</span> resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringResourceWrapper</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> entryType<span class="token punctuation">,</span> resourceType<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 继续</span>
    <span class="token keyword">return</span> <span class="token function">entryWithPriority</span><span class="token punctuation">(</span>resource<span class="token punctuation">,</span> count<span class="token punctuation">,</span> prioritized<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进入<code>entryWithPriority</code>方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Entry</span> <span class="token function">entryWithPriority</span><span class="token punctuation">(</span><span class="token class-name">ResourceWrapper</span> resourceWrapper<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">boolean</span> prioritized<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span>
    <span class="token keyword">throws</span> <span class="token class-name">BlockException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取 Context</span>
    <span class="token class-name">Context</span> context <span class="token operator">=</span> <span class="token class-name">ContextUtil</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Using default context.</span>
        context <span class="token operator">=</span> <span class="token class-name">InternalContextUtil</span><span class="token punctuation">.</span><span class="token function">internalEnter</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">CONTEXT_DEFAULT_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
、	<span class="token comment">// 获取 Slot执行链，同一个资源，会创建一个执行链，放入缓存</span>
    <span class="token class-name">ProcessorSlot</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> chain <span class="token operator">=</span> <span class="token function">lookProcessChain</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 创建 Entry，并将 resource、chain、context 记录在 Entry中</span>
    <span class="token class-name">Entry</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CtEntry</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 执行 slotChain</span>
        chain<span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resourceWrapper<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> count<span class="token punctuation">,</span> prioritized<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BlockException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">throw</span> e1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// This should not happen, unless there are errors existing in Sentinel internal.</span>
        <span class="token class-name">RecordLog</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Sentinel unexpected exception&quot;</span><span class="token punctuation">,</span> e1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> e<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这段代码中，会获取<code>ProcessorSlotChain</code>对象，然后基于chain.entry()开始执行slotChain中的每一个Slot. 而这里创建的是其实现类：DefaultProcessorSlotChain.</p><p>获取ProcessorSlotChain以后会保存到一个Map中，key是ResourceWrapper，值是ProcessorSlotChain.</p><p>所以，<strong>一个资源只会有一个ProcessorSlotChain</strong>.</p><h2 id="_2-2-defaultprocessorslotchain" tabindex="-1"><a class="header-anchor" href="#_2-2-defaultprocessorslotchain" aria-hidden="true">#</a> 2.2.DefaultProcessorSlotChain</h2><p>我们进入DefaultProcessorSlotChain的entry方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">entry</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">ResourceWrapper</span> resourceWrapper<span class="token punctuation">,</span> <span class="token class-name">Object</span> t<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">boolean</span> prioritized<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span>
    <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token comment">// first，就是责任链中的第一个 slot</span>
    first<span class="token punctuation">.</span><span class="token function">transformEntry</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resourceWrapper<span class="token punctuation">,</span> t<span class="token punctuation">,</span> count<span class="token punctuation">,</span> prioritized<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的first，类型是AbstractLinkedProcessorSlot：</p><figure><img src="`+S+'" alt="image-20210925144355865" tabindex="0" loading="lazy"><figcaption>image-20210925144355865</figcaption></figure><p>看下继承关系：</p><figure><img src="'+C+'" alt="image-20210925144010507" tabindex="0" loading="lazy"><figcaption>image-20210925144010507</figcaption></figure><p>因此，first一定是这些实现类中的一个，按照最早讲的责任链顺序，first应该就是 <code>NodeSelectorSlot</code>。</p><p>不过，既然是基于责任链模式，所以这里只要记住下一个slot就可以了，也就是next：</p><figure><img src="'+N+'" alt="image-20210925144233302" tabindex="0" loading="lazy"><figcaption>image-20210925144233302</figcaption></figure><p>next确实是NodeSelectSlot类型。</p><p>而NodeSelectSlot的next一定是ClusterBuilderSlot，依次类推：</p><figure><img src="'+_+`" alt="image-20210925101327080" tabindex="0" loading="lazy"><figcaption>image-20210925101327080</figcaption></figure><p>责任链就建立起来了。</p><h2 id="_2-3-nodeselectorslot" tabindex="-1"><a class="header-anchor" href="#_2-3-nodeselectorslot" aria-hidden="true">#</a> 2.3.NodeSelectorSlot</h2><p>NodeSelectorSlot负责构建簇点链路中的节点（DefaultNode），将这些节点形成链路树。</p><p>核心代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">entry</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">ResourceWrapper</span> resourceWrapper<span class="token punctuation">,</span> <span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">boolean</span> prioritized<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span>
    <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
  	<span class="token comment">// 尝试获取 当前资源的 DefaultNode</span>
    <span class="token class-name">DefaultNode</span> node <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            node <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 如果为空，为当前资源创建一个新的 DefaultNode</span>
                node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultNode</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">DefaultNode</span><span class="token punctuation">&gt;</span></span> cacheMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">DefaultNode</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                cacheMap<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 放入缓存中，注意这里的 key是contextName，</span>
                <span class="token comment">// 这样不同链路进入相同资源，就会创建多个 DefaultNode</span>
                cacheMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>
                map <span class="token operator">=</span> cacheMap<span class="token punctuation">;</span>
                <span class="token comment">// 当前节点加入上一节点的 child中，这样就构成了调用链路树</span>
                <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">DefaultNode</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getLastNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
	<span class="token comment">// context中的curNode（当前节点）设置为新的 node</span>
    context<span class="token punctuation">.</span><span class="token function">setCurNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 执行下一个 slot</span>
    <span class="token function">fireEntry</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resourceWrapper<span class="token punctuation">,</span> node<span class="token punctuation">,</span> count<span class="token punctuation">,</span> prioritized<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个Slot完成了这么几件事情：</p><ul><li>为当前资源创建 DefaultNode</li><li>将DefaultNode放入缓存中，key是contextName，这样不同链路入口的请求，将会创建多个DefaultNode，相同链路则只有一个DefaultNode</li><li>将当前资源的DefaultNode设置为上一个资源的childNode</li><li>将当前资源的DefaultNode设置为Context中的curNode（当前节点）</li></ul><p>下一个slot，就是ClusterBuilderSlot</p><h2 id="_2-4-clusterbuilderslot" tabindex="-1"><a class="header-anchor" href="#_2-4-clusterbuilderslot" aria-hidden="true">#</a> 2.4.ClusterBuilderSlot</h2><p>ClusterBuilderSlot负责构建某个资源的ClusterNode，核心代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">entry</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">ResourceWrapper</span> resourceWrapper<span class="token punctuation">,</span> <span class="token class-name">DefaultNode</span> node<span class="token punctuation">,</span>
                  <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">boolean</span> prioritized<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span>
    <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token comment">// 判空，注意ClusterNode是共享的成员变量，也就是说一个资源只有一个ClusterNode，与链路无关</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>clusterNode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>clusterNode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 创建 cluster node.</span>
                clusterNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClusterNode</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> resourceWrapper<span class="token punctuation">.</span><span class="token function">getResourceType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResourceWrapper</span><span class="token punctuation">,</span> <span class="token class-name">ClusterNode</span><span class="token punctuation">&gt;</span></span> newMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>clusterNodeMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                newMap<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>clusterNodeMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 放入缓存，可以是nodeId，也就是resource名称</span>
                newMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clusterNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
                clusterNodeMap <span class="token operator">=</span> newMap<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 将资源的 DefaultNode与 ClusterNode关联</span>
    node<span class="token punctuation">.</span><span class="token function">setClusterNode</span><span class="token punctuation">(</span>clusterNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 记录请求来源 origin 将 origin放入 entry</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">&quot;&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getOrigin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Node</span> originNode <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">getClusterNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrCreateOriginNode</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getOrigin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">getCurEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setOriginNode</span><span class="token punctuation">(</span>originNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	<span class="token comment">// 继续下一个slot</span>
    <span class="token function">fireEntry</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resourceWrapper<span class="token punctuation">,</span> node<span class="token punctuation">,</span> count<span class="token punctuation">,</span> prioritized<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-5-statisticslot" tabindex="-1"><a class="header-anchor" href="#_2-5-statisticslot" aria-hidden="true">#</a> 2.5.StatisticSlot</h2><p>StatisticSlot负责统计实时调用数据，包括运行信息（访问次数、线程数）、来源信息等。</p><p>StatisticSlot是实现限流的关键，其中基于<strong>滑动时间窗口算法</strong>维护了计数器，统计进入某个资源的请求次数。</p><p>核心代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">entry</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">ResourceWrapper</span> resourceWrapper<span class="token punctuation">,</span> <span class="token class-name">DefaultNode</span> node<span class="token punctuation">,</span> 
                  <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">boolean</span> prioritized<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 放行到下一个 slot，做限流、降级等判断</span>
        <span class="token function">fireEntry</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resourceWrapper<span class="token punctuation">,</span> node<span class="token punctuation">,</span> count<span class="token punctuation">,</span> prioritized<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 请求通过了, 线程计数器 +1 ，用作线程隔离</span>
        node<span class="token punctuation">.</span><span class="token function">increaseThreadNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 请求计数器 +1 用作限流</span>
        node<span class="token punctuation">.</span><span class="token function">addPassRequest</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getCurEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOriginNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果有 origin，来源计数器也都要 +1</span>
            context<span class="token punctuation">.</span><span class="token function">getCurEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOriginNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increaseThreadNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            context<span class="token punctuation">.</span><span class="token function">getCurEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOriginNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPassRequest</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">.</span><span class="token function">getEntryType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">EntryType</span><span class="token punctuation">.</span><span class="token constant">IN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果是入口资源，还要给全局计数器 +1.</span>
            <span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">ENTRY_NODE</span><span class="token punctuation">.</span><span class="token function">increaseThreadNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">ENTRY_NODE</span><span class="token punctuation">.</span><span class="token function">addPassRequest</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 请求通过后的回调.</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ProcessorSlotEntryCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DefaultNode</span><span class="token punctuation">&gt;</span></span> handler <span class="token operator">:</span> <span class="token class-name">StatisticSlotCallbackRegistry</span><span class="token punctuation">.</span><span class="token function">getEntryCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            handler<span class="token punctuation">.</span><span class="token function">onPass</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resourceWrapper<span class="token punctuation">,</span> node<span class="token punctuation">,</span> count<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 各种异常处理就省略了。。。</span>
        context<span class="token punctuation">.</span><span class="token function">getCurEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，需要注意的是，所有的计数+1动作都包括两部分，以<code> node.addPassRequest(count);</code>为例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addPassRequest</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// DefaultNode的计数器，代表当前链路的 计数器</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">addPassRequest</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ClusterNode计数器，代表当前资源的 总计数器</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>clusterNode<span class="token punctuation">.</span><span class="token function">addPassRequest</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体计数方式，我们后续再看。</p><p>接下来，进入规则校验的相关slot了，依次是：</p><ul><li>AuthoritySlot：负责授权规则（来源控制）</li><li>SystemSlot：负责系统保护规则</li><li>ParamFlowSlot：负责热点参数限流规则</li><li>FlowSlot：负责限流规则</li><li>DegradeSlot：负责降级规则</li></ul><h2 id="_2-6-authorityslot" tabindex="-1"><a class="header-anchor" href="#_2-6-authorityslot" aria-hidden="true">#</a> 2.6.AuthoritySlot</h2><p>负责请求来源origin的授权规则判断，如图：</p><figure><img src="`+E+`" alt="image-20210925152626648" tabindex="0" loading="lazy"><figcaption>image-20210925152626648</figcaption></figure><p>核心API：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">entry</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">ResourceWrapper</span> resourceWrapper<span class="token punctuation">,</span> <span class="token class-name">DefaultNode</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">boolean</span> prioritized<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span>
    <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token comment">// 校验黑白名单</span>
    <span class="token function">checkBlackWhiteAuthority</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 进入下一个 slot</span>
    <span class="token function">fireEntry</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resourceWrapper<span class="token punctuation">,</span> node<span class="token punctuation">,</span> count<span class="token punctuation">,</span> prioritized<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>黑白名单校验的逻辑：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">checkBlackWhiteAuthority</span><span class="token punctuation">(</span><span class="token class-name">ResourceWrapper</span> resource<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthorityException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取授权规则</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token punctuation">&lt;</span><span class="token class-name">AuthorityRule</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> authorityRules <span class="token operator">=</span> <span class="token class-name">AuthorityRuleManager</span><span class="token punctuation">.</span><span class="token function">getAuthorityRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>authorityRules <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AuthorityRule</span><span class="token punctuation">&gt;</span></span> rules <span class="token operator">=</span> authorityRules<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rules <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	<span class="token comment">// 遍历规则并判断</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">AuthorityRule</span> rule <span class="token operator">:</span> rules<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">AuthorityRuleChecker</span><span class="token punctuation">.</span><span class="token function">passCheck</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 规则不通过，直接抛出异常</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AuthorityException</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getOrigin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rule<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再看下<code>AuthorityRuleChecker.passCheck(rule, context)</code>方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">passCheck</span><span class="token punctuation">(</span><span class="token class-name">AuthorityRule</span> rule<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 得到请求来源 origin</span>
    <span class="token class-name">String</span> requester <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getOrigin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 来源为空，或者规则为空，都直接放行</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtil</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>requester<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">StringUtil</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span><span class="token function">getLimitApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// rule.getLimitApp()得到的就是 白名单 或 黑名单 的字符串，这里先用 indexOf方法判断</span>
    <span class="token keyword">int</span> pos <span class="token operator">=</span> rule<span class="token punctuation">.</span><span class="token function">getLimitApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>requester<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> contain <span class="token operator">=</span> pos <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>contain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果包含 origin，还要进一步做精确判断，把名单列表以&quot;,&quot;分割，逐个判断</span>
        <span class="token keyword">boolean</span> exactlyMatch <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> appArray <span class="token operator">=</span> rule<span class="token punctuation">.</span><span class="token function">getLimitApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> app <span class="token operator">:</span> appArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>requester<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                exactlyMatch <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        contain <span class="token operator">=</span> exactlyMatch<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	<span class="token comment">// 如果是黑名单，并且包含origin，则返回false</span>
    <span class="token keyword">int</span> strategy <span class="token operator">=</span> rule<span class="token punctuation">.</span><span class="token function">getStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>strategy <span class="token operator">==</span> <span class="token class-name">RuleConstant</span><span class="token punctuation">.</span><span class="token constant">AUTHORITY_BLACK</span> <span class="token operator">&amp;&amp;</span> contain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	<span class="token comment">// 如果是白名单，并且不包含origin，则返回false</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>strategy <span class="token operator">==</span> <span class="token class-name">RuleConstant</span><span class="token punctuation">.</span><span class="token constant">AUTHORITY_WHITE</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>contain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	<span class="token comment">// 其它情况返回true</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-7-systemslot" tabindex="-1"><a class="header-anchor" href="#_2-7-systemslot" aria-hidden="true">#</a> 2.7.SystemSlot</h2><p>SystemSlot是对系统保护的规则校验：</p><figure><img src="`+T+`" alt="image-20210925153228036" tabindex="0" loading="lazy"><figcaption>image-20210925153228036</figcaption></figure><p>核心API：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">entry</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">ResourceWrapper</span> resourceWrapper<span class="token punctuation">,</span> <span class="token class-name">DefaultNode</span> node<span class="token punctuation">,</span> 
                  <span class="token keyword">int</span> count<span class="token punctuation">,</span><span class="token keyword">boolean</span> prioritized<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token comment">// 系统规则校验</span>
    <span class="token class-name">SystemRuleManager</span><span class="token punctuation">.</span><span class="token function">checkSystem</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 进入下一个 slot</span>
    <span class="token function">fireEntry</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resourceWrapper<span class="token punctuation">,</span> node<span class="token punctuation">,</span> count<span class="token punctuation">,</span> prioritized<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>来看下<code>SystemRuleManager.checkSystem(resourceWrapper);</code>的代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">checkSystem</span><span class="token punctuation">(</span><span class="token class-name">ResourceWrapper</span> resourceWrapper<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BlockException</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>resourceWrapper <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// Ensure the checking switch is on.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>checkSystemStatus<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 只针对入口资源做校验，其它直接返回</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">.</span><span class="token function">getEntryType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">EntryType</span><span class="token punctuation">.</span><span class="token constant">IN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 全局 QPS校验</span>
    <span class="token keyword">double</span> currentQps <span class="token operator">=</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">ENTRY_NODE</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0.0</span> <span class="token operator">:</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">ENTRY_NODE</span><span class="token punctuation">.</span><span class="token function">successQps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentQps <span class="token operator">&gt;</span> qps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SystemBlockException</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;qps&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 全局 线程数 校验</span>
    <span class="token keyword">int</span> currentThread <span class="token operator">=</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">ENTRY_NODE</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">ENTRY_NODE</span><span class="token punctuation">.</span><span class="token function">curThreadNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentThread <span class="token operator">&gt;</span> maxThread<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SystemBlockException</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;thread&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	<span class="token comment">// 全局平均 RT校验</span>
    <span class="token keyword">double</span> rt <span class="token operator">=</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">ENTRY_NODE</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">ENTRY_NODE</span><span class="token punctuation">.</span><span class="token function">avgRt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rt <span class="token operator">&gt;</span> maxRt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SystemBlockException</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;rt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 全局 系统负载 校验</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>highestSystemLoadIsSet <span class="token operator">&amp;&amp;</span> <span class="token function">getCurrentSystemAvgLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> highestSystemLoad<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">checkBbr</span><span class="token punctuation">(</span>currentThread<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SystemBlockException</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;load&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 全局 CPU使用率 校验</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>highestCpuUsageIsSet <span class="token operator">&amp;&amp;</span> <span class="token function">getCurrentCpuUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> highestCpuUsage<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SystemBlockException</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;cpu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-8-paramflowslot" tabindex="-1"><a class="header-anchor" href="#_2-8-paramflowslot" aria-hidden="true">#</a> 2.8.ParamFlowSlot</h2><p>ParamFlowSlot就是热点参数限流，如图：</p><figure><img src="`+j+`" alt="image-20210925153719891" tabindex="0" loading="lazy"><figcaption>image-20210925153719891</figcaption></figure><p>是针对进入资源的请求，针对不同的请求参数值分别统计QPS的限流方式。</p><ul><li><p>这里的单机阈值，就是最大令牌数量：maxCount</p></li><li><p>这里的统计窗口时长，就是统计时长：duration</p></li></ul><p>含义是每隔duration时间长度内，最多生产maxCount个令牌，上图配置的含义是每1秒钟生产2个令牌。</p><p>核心API：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">entry</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">ResourceWrapper</span> resourceWrapper<span class="token punctuation">,</span> <span class="token class-name">DefaultNode</span> node<span class="token punctuation">,</span>
                  <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">boolean</span> prioritized<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果没有设置热点规则，直接放行</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">ParamFlowRuleManager</span><span class="token punctuation">.</span><span class="token function">hasRules</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fireEntry</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resourceWrapper<span class="token punctuation">,</span> node<span class="token punctuation">,</span> count<span class="token punctuation">,</span> prioritized<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	<span class="token comment">// 热点规则判断</span>
    <span class="token function">checkFlow</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">,</span> count<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 进入下一个 slot</span>
    <span class="token function">fireEntry</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resourceWrapper<span class="token punctuation">,</span> node<span class="token punctuation">,</span> count<span class="token punctuation">,</span> prioritized<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-8-1-令牌桶" tabindex="-1"><a class="header-anchor" href="#_2-8-1-令牌桶" aria-hidden="true">#</a> 2.8.1.令牌桶</h3><p>热点规则判断采用了令牌桶算法来实现参数限流，为每一个不同参数值设置令牌桶，Sentinel的令牌桶有两部分组成：</p><figure><img src="`+O+'" alt="image-20210925163744108" tabindex="0" loading="lazy"><figcaption>image-20210925163744108</figcaption></figure><p>这两个Map的key都是请求的参数值，value却不同，其中：</p><ul><li>tokenCounters：用来记录剩余令牌数量</li><li>timeCounters：用来记录上一个请求的时间</li></ul><p>当一个携带参数的请求到来后，基本判断流程是这样的：</p><figure><img src="'+R+'" alt="sentinel" tabindex="0" loading="lazy"><figcaption>sentinel</figcaption></figure><h2 id="_2-9-flowslot" tabindex="-1"><a class="header-anchor" href="#_2-9-flowslot" aria-hidden="true">#</a> 2.9.FlowSlot</h2><p>FlowSlot是负责限流规则的判断，如图：</p><figure><img src="'+W+`" alt="image-20210925172542274" tabindex="0" loading="lazy"><figcaption>image-20210925172542274</figcaption></figure><p>包括：</p><ul><li>三种流控模式：直接模式、关联模式、链路模式</li><li>三种流控效果：快速失败、warm up、排队等待</li></ul><p>三种流控模式，从底层<strong>数据统计</strong>角度，分为两类：</p><ul><li>对进入资源的所有请求（ClusterNode）做限流统计：直接模式、关联模式</li><li>对进入资源的部分链路（DefaultNode）做限流统计：链路模式</li></ul><p>三种流控效果，从<strong>限流算法</strong>来看，分为两类：</p><ul><li>滑动时间窗口算法：快速失败、warm up</li><li>漏桶算法：排队等待效果</li></ul><h3 id="_2-9-1-核心流程" tabindex="-1"><a class="header-anchor" href="#_2-9-1-核心流程" aria-hidden="true">#</a> 2.9.1.核心流程</h3><p>核心API如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">entry</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">ResourceWrapper</span> resourceWrapper<span class="token punctuation">,</span> <span class="token class-name">DefaultNode</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span>
                  <span class="token keyword">boolean</span> prioritized<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token comment">// 限流规则检测</span>
    <span class="token function">checkFlow</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">,</span> context<span class="token punctuation">,</span> node<span class="token punctuation">,</span> count<span class="token punctuation">,</span> prioritized<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 放行</span>
    <span class="token function">fireEntry</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resourceWrapper<span class="token punctuation">,</span> node<span class="token punctuation">,</span> count<span class="token punctuation">,</span> prioritized<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>checkFlow方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">checkFlow</span><span class="token punctuation">(</span><span class="token class-name">ResourceWrapper</span> resource<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">DefaultNode</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">boolean</span> prioritized<span class="token punctuation">)</span>
    <span class="token keyword">throws</span> <span class="token class-name">BlockException</span> <span class="token punctuation">{</span>
    <span class="token comment">// checker是 FlowRuleChecker 类的一个对象</span>
    checker<span class="token punctuation">.</span><span class="token function">checkFlow</span><span class="token punctuation">(</span>ruleProvider<span class="token punctuation">,</span> resource<span class="token punctuation">,</span> context<span class="token punctuation">,</span> node<span class="token punctuation">,</span> count<span class="token punctuation">,</span> prioritized<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>跟入FlowRuleChecker：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkFlow</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token punctuation">&lt;</span><span class="token class-name">FlowRule</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> ruleProvider<span class="token punctuation">,</span> 
                      <span class="token class-name">ResourceWrapper</span> resource<span class="token punctuation">,</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">DefaultNode</span> node<span class="token punctuation">,</span>
                      <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">boolean</span> prioritized<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BlockException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ruleProvider <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> resource <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 获取当前资源的所有限流规则</span>
        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FlowRule</span><span class="token punctuation">&gt;</span></span> rules <span class="token operator">=</span> ruleProvider<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>rules <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">FlowRule</span> rule <span class="token operator">:</span> rules<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 遍历，逐个规则做校验</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">canPassCheck</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> context<span class="token punctuation">,</span> node<span class="token punctuation">,</span> count<span class="token punctuation">,</span> prioritized<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FlowException</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span><span class="token function">getLimitApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rule<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的FlowRule就是限流规则接口，其中的几个成员变量，刚好对应表单参数：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlowRule</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractRule</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 阈值类型 (0: 线程, 1: QPS).
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> grade <span class="token operator">=</span> <span class="token class-name">RuleConstant</span><span class="token punctuation">.</span><span class="token constant">FLOW_GRADE_QPS</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 阈值.
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> count<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 三种限流模式.
     *
     * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">RuleConstant</span><span class="token punctuation">#</span><span class="token field">STRATEGY_DIRECT</span></span><span class="token punctuation">}</span> 直连模式;
     * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">RuleConstant</span><span class="token punctuation">#</span><span class="token field">STRATEGY_RELATE</span></span><span class="token punctuation">}</span> 关联模式;
     * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">RuleConstant</span><span class="token punctuation">#</span><span class="token field">STRATEGY_CHAIN</span></span><span class="token punctuation">}</span> 链路模式.
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> strategy <span class="token operator">=</span> <span class="token class-name">RuleConstant</span><span class="token punctuation">.</span><span class="token constant">STRATEGY_DIRECT</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 关联模式关联的资源名称.
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> refResource<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 3种流控效果.
     * 0. 快速失败, 1. warm up, 2. 排队等待, 3. warm up + 排队等待
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> controlBehavior <span class="token operator">=</span> <span class="token class-name">RuleConstant</span><span class="token punctuation">.</span><span class="token constant">CONTROL_BEHAVIOR_DEFAULT</span><span class="token punctuation">;</span>
	<span class="token comment">// 预热时长</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> warmUpPeriodSec <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 队列最大等待时间.
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> maxQueueingTimeMs <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>
    <span class="token comment">// 。。。 略</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>校验的逻辑定义在<code>FlowRuleChecker</code>的<code>canPassCheck</code>方法中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canPassCheck</span><span class="token punctuation">(</span><span class="token comment">/*@NonNull*/</span> <span class="token class-name">FlowRule</span> rule<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">DefaultNode</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> acquireCount<span class="token punctuation">,</span>
                            <span class="token keyword">boolean</span> prioritized<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取限流资源名称</span>
    <span class="token class-name">String</span> limitApp <span class="token operator">=</span> rule<span class="token punctuation">.</span><span class="token function">getLimitApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>limitApp <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	<span class="token comment">// 校验规则</span>
    <span class="token keyword">return</span> <span class="token function">passLocalCheck</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> context<span class="token punctuation">,</span> node<span class="token punctuation">,</span> acquireCount<span class="token punctuation">,</span> prioritized<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进入<code>passLocalCheck()</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">passLocalCheck</span><span class="token punctuation">(</span><span class="token class-name">FlowRule</span> rule<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">DefaultNode</span> node<span class="token punctuation">,</span>
                                      <span class="token keyword">int</span> acquireCount<span class="token punctuation">,</span>  <span class="token keyword">boolean</span> prioritized<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 基于限流模式判断要统计的节点， </span>
    <span class="token comment">// 如果是直连模式，关联模式，对ClusterNode统计，如果是链路模式，则对DefaultNode统计</span>
    <span class="token class-name">Node</span> selectedNode <span class="token operator">=</span> <span class="token function">selectNodeByRequesterAndStrategy</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> context<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>selectedNode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	<span class="token comment">// 判断规则</span>
    <span class="token keyword">return</span> rule<span class="token punctuation">.</span><span class="token function">getRater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">canPass</span><span class="token punctuation">(</span>selectedNode<span class="token punctuation">,</span> acquireCount<span class="token punctuation">,</span> prioritized<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里对规则的判断先要通过<code>FlowRule#getRater()</code>获取流量控制器<code>TrafficShapingController</code>，然后再做限流。</p><p>而<code>TrafficShapingController</code>有3种实现：</p><figure><img src="`+A+'" alt="image-20210925175221211" tabindex="0" loading="lazy"><figcaption>image-20210925175221211</figcaption></figure><ul><li>DefaultController：快速失败，默认的方式，基于滑动时间窗口算法</li><li>WarmUpController：预热模式，基于滑动时间窗口算法，只不过阈值是动态的</li><li>RateLimiterController：排队等待模式，基于漏桶算法</li></ul><p>最终的限流判断都在TrafficShapingController的canPass方法中。</p><h3 id="_2-9-2-滑动时间窗口" tabindex="-1"><a class="header-anchor" href="#_2-9-2-滑动时间窗口" aria-hidden="true">#</a> 2.9.2.滑动时间窗口</h3><p>滑动时间窗口的功能分两部分来看：</p><ul><li>一是时间区间窗口的QPS计数功能，这个是在StatisticSlot中调用的</li><li>二是对滑动窗口内的时间区间窗口QPS累加，这个是在FlowRule中调用的</li></ul><p>先来看时间区间窗口的QPS计数功能。</p><h4 id="_2-9-2-1-时间窗口请求量统计" tabindex="-1"><a class="header-anchor" href="#_2-9-2-1-时间窗口请求量统计" aria-hidden="true">#</a> 2.9.2.1.时间窗口请求量统计</h4><p>回顾2.5章节中的StatisticSlot部分，有这样一段代码：</p><figure><img src="'+P+'" alt="image-20210925180522926" tabindex="0" loading="lazy"><figcaption>image-20210925180522926</figcaption></figure><p>就是在统计通过该节点的QPS，我们跟入看看，这里进入了DefaultNode内部：</p><figure><img src="'+M+'" alt="image-20210925180619492" tabindex="0" loading="lazy"><figcaption>image-20210925180619492</figcaption></figure><p>发现同时对<code>DefaultNode</code>和<code>ClusterNode</code>在做QPS统计，我们知道<code>DefaultNode</code>和<code>ClusterNode</code>都是<code>StatisticNode</code>的子类，这里调用<code>addPassRequest()</code>方法，最终都会进入<code>StatisticNode</code>中。</p><p>随便跟入一个：</p><figure><img src="'+q+'" alt="image-20210925180810181" tabindex="0" loading="lazy"><figcaption>image-20210925180810181</figcaption></figure><p>这里有秒、分两种纬度的统计，对应两个计数器。找到对应的成员变量，可以看到：</p><figure><img src="'+D+`" alt="image-20210925180954856" tabindex="0" loading="lazy"><figcaption>image-20210925180954856</figcaption></figure><p>两个计数器都是ArrayMetric类型，并且传入了两个参数：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// intervalInMs：是滑动窗口的时间间隔，默认为 1 秒</span>
<span class="token comment">// sampleCount: 时间窗口的分隔数量，默认为 2，就是把 1秒分为 2个小时间窗</span>
<span class="token keyword">public</span> <span class="token class-name">ArrayMetric</span><span class="token punctuation">(</span><span class="token keyword">int</span> sampleCount<span class="token punctuation">,</span> <span class="token keyword">int</span> intervalInMs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OccupiableBucketLeapArray</span><span class="token punctuation">(</span>sampleCount<span class="token punctuation">,</span> intervalInMs<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如图：</p><figure><img src="`+z+`" alt="image-20210925181359203" tabindex="0" loading="lazy"><figcaption>image-20210925181359203</figcaption></figure><p>接下来，我们进入<code>ArrayMetric</code>类的<code>addPass</code>方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addPass</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取当前时间所在的时间窗</span>
    <span class="token class-name">WindowWrap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MetricBucket</span><span class="token punctuation">&gt;</span></span> wrap <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">currentWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 计数器 +1</span>
    wrap<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPass</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么，计数器如何知道当前所在的窗口是哪个呢？</p><p>这里的data是一个LeapArray：</p><figure><img src="`+L+`" alt="image-20210925181714605" tabindex="0" loading="lazy"><figcaption>image-20210925181714605</figcaption></figure><p>LeapArray的四个属性：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">LeapArray</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">// 小窗口的时间长度，默认是500ms ，值 = intervalInMs / sampleCount</span>
    <span class="token keyword">protected</span> <span class="token keyword">int</span> windowLengthInMs<span class="token punctuation">;</span>
    <span class="token comment">// 滑动窗口内的 小窗口 数量，默认为 2</span>
    <span class="token keyword">protected</span> <span class="token keyword">int</span> sampleCount<span class="token punctuation">;</span>
    <span class="token comment">// 滑动窗口的时间间隔，默认为 1000ms</span>
    <span class="token keyword">protected</span> <span class="token keyword">int</span> intervalInMs<span class="token punctuation">;</span>
    <span class="token comment">// 滑动窗口的时间间隔，单位为秒，默认为 1</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> intervalInSecond<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>LeapArray是一个环形数组，因为时间是无限的，数组长度不可能无限，因此数组中每一个格子放入一个时间窗（window），当数组放满后，角标归0，覆盖最初的window。</p><figure><img src="`+I+`" alt="image-20210925182127206" tabindex="0" loading="lazy"><figcaption>image-20210925182127206</figcaption></figure><p>因为滑动窗口最多分成sampleCount数量的小窗口，因此数组长度只要大于sampleCount，那么最近的一个滑动窗口内的2个小窗口就永远不会被覆盖，就不用担心旧数据被覆盖的问题了。</p><p>我们跟入<code> data.currentWindow();</code>方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">WindowWrap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">currentWindow</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeMillis<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeMillis <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	<span class="token comment">// 计算当前时间对应的数组角标</span>
    <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token function">calculateTimeIdx</span><span class="token punctuation">(</span>timeMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 计算当前时间所在窗口的开始时间.</span>
    <span class="token keyword">long</span> windowStart <span class="token operator">=</span> <span class="token function">calculateWindowStart</span><span class="token punctuation">(</span>timeMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/*
         * 先根据角标获取数组中保存的 oldWindow 对象，可能是旧数据，需要判断.
         *
         * (1) oldWindow 不存在, 说明是第一次，创建新 window并存入，然后返回即可
         * (2) oldWindow的 starTime = 本次请求的 windowStar, 说明正是要找的窗口，直接返回.
         * (3) oldWindow的 starTime &lt; 本次请求的 windowStar, 说明是旧数据，需要被覆盖，创建 
         *     新窗口，覆盖旧窗口
         */</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">WindowWrap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> old <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>old <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 创建新 window</span>
            <span class="token class-name">WindowWrap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> window <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WindowWrap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>windowLengthInMs<span class="token punctuation">,</span> windowStart<span class="token punctuation">,</span> <span class="token function">newEmptyBucket</span><span class="token punctuation">(</span>timeMillis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 基于CAS写入数组，避免线程安全问题</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> window<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 写入成功，返回新的 window</span>
                <span class="token keyword">return</span> window<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// 写入失败，说明有并发更新，等待其它人更新完成即可</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>windowStart <span class="token operator">==</span> old<span class="token punctuation">.</span><span class="token function">windowStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> old<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>windowStart <span class="token operator">&gt;</span> old<span class="token punctuation">.</span><span class="token function">windowStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>updateLock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 获取并发锁，覆盖旧窗口并返回</span>
                    <span class="token keyword">return</span> <span class="token function">resetWindowTo</span><span class="token punctuation">(</span>old<span class="token punctuation">,</span> windowStart<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                    updateLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// 获取锁失败，等待其它线程处理就可以了</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>windowStart <span class="token operator">&lt;</span> old<span class="token punctuation">.</span><span class="token function">windowStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 这种情况不应该存在，写这里只是以防万一。</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WindowWrap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>windowLengthInMs<span class="token punctuation">,</span> windowStart<span class="token punctuation">,</span> <span class="token function">newEmptyBucket</span><span class="token punctuation">(</span>timeMillis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>找到当前时间所在窗口（WindowWrap）后，只要调用WindowWrap对象中的add方法，计数器+1即可。</p><p>这里只负责统计每个窗口的请求量，不负责拦截。限流拦截要看FlowSlot中的逻辑。</p><h4 id="_2-9-2-2-滑动窗口qps计算" tabindex="-1"><a class="header-anchor" href="#_2-9-2-2-滑动窗口qps计算" aria-hidden="true">#</a> 2.9.2.2.滑动窗口QPS计算</h4><p>在2.9.1小节我们讲过，FlowSlot的限流判断最终都由<code>TrafficShapingController</code>接口中的<code>canPass</code>方法来实现。该接口有三个实现类：</p><ul><li>DefaultController：快速失败，默认的方式，基于滑动时间窗口算法</li><li>WarmUpController：预热模式，基于滑动时间窗口算法，只不过阈值是动态的</li><li>RateLimiterController：排队等待模式，基于漏桶算法</li></ul><p>因此，我们跟入默认的DefaultController中的canPass方法来分析：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canPass</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> acquireCount<span class="token punctuation">,</span> <span class="token keyword">boolean</span> prioritized<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 计算目前为止滑动窗口内已经存在的请求量</span>
    <span class="token keyword">int</span> curCount <span class="token operator">=</span> <span class="token function">avgUsedTokens</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 判断：已使用请求量 + 需要的请求量（1） 是否大于 窗口的请求阈值</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>curCount <span class="token operator">+</span> acquireCount <span class="token operator">&gt;</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 大于，说明超出阈值，返回false</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>prioritized <span class="token operator">&amp;&amp;</span> grade <span class="token operator">==</span> <span class="token class-name">RuleConstant</span><span class="token punctuation">.</span><span class="token constant">FLOW_GRADE_QPS</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">long</span> currentTime<span class="token punctuation">;</span>
            <span class="token keyword">long</span> waitInMs<span class="token punctuation">;</span>
            currentTime <span class="token operator">=</span> <span class="token class-name">TimeUtil</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            waitInMs <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">tryOccupyNext</span><span class="token punctuation">(</span>currentTime<span class="token punctuation">,</span> acquireCount<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>waitInMs <span class="token operator">&lt;</span> <span class="token class-name">OccupyTimeoutProperty</span><span class="token punctuation">.</span><span class="token function">getOccupyTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                node<span class="token punctuation">.</span><span class="token function">addWaitingRequest</span><span class="token punctuation">(</span>currentTime <span class="token operator">+</span> waitInMs<span class="token punctuation">,</span> acquireCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
                node<span class="token punctuation">.</span><span class="token function">addOccupiedPass</span><span class="token punctuation">(</span>acquireCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">sleep</span><span class="token punctuation">(</span>waitInMs<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// PriorityWaitException indicates that the request will pass after waiting for {@link @waitInMs}.</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PriorityWaitException</span><span class="token punctuation">(</span>waitInMs<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 小于等于，说明在阈值范围内，返回true</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，判断的关键就是<code>int curCount = avgUsedTokens(node);</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">avgUsedTokens</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">DEFAULT_AVG_USED_TOKENS</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> grade <span class="token operator">==</span> <span class="token class-name">RuleConstant</span><span class="token punctuation">.</span><span class="token constant">FLOW_GRADE_THREAD</span> <span class="token operator">?</span> node<span class="token punctuation">.</span><span class="token function">curThreadNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">passQps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为我们采用的是限流，走<code>node.passQps()</code>逻辑：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 这里又进入了 StatisticNode类</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">passQps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 请求量 ÷ 滑动窗口时间间隔 ，得到的就是QPS</span>
    <span class="token keyword">return</span> rollingCounterInSecond<span class="token punctuation">.</span><span class="token function">pass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> rollingCounterInSecond<span class="token punctuation">.</span><span class="token function">getWindowIntervalInSec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么<code>rollingCounterInSecond.pass()</code>是如何得到请求量的呢？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// rollingCounterInSecond 本质是ArrayMetric，之前说过</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">pass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取当前窗口</span>
    data<span class="token punctuation">.</span><span class="token function">currentWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> pass <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取 当前时间的 滑动窗口范围内 的所有小窗口</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MetricBucket</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 遍历</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MetricBucket</span> window <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 累加求和</span>
        pass <span class="token operator">+=</span> window<span class="token punctuation">.</span><span class="token function">pass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 返回</span>
    <span class="token keyword">return</span> pass<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>来看看<code>data.values()</code>如何获取 滑动窗口范围内 的所有小窗口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 此处进入LeapArray类中：</span>

<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeMillis<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeMillis <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 创建空集合，大小等于 LeapArray长度</span>
    <span class="token keyword">int</span> size <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 遍历 LeapArray</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取每一个小窗口</span>
        <span class="token class-name">WindowWrap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> windowWrap <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 判断这个小窗口是否在 滑动窗口时间范围内（1秒内）</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>windowWrap <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">isWindowDeprecated</span><span class="token punctuation">(</span>timeMillis<span class="token punctuation">,</span> windowWrap<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 不在范围内，则跳过</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 在范围内，则添加到集合中</span>
        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>windowWrap<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 返回集合</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么，<code>isWindowDeprecated(timeMillis, windowWrap)</code>又是如何判断窗口是否符合要求呢？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isWindowDeprecated</span><span class="token punctuation">(</span><span class="token keyword">long</span> time<span class="token punctuation">,</span> <span class="token class-name">WindowWrap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> windowWrap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 当前时间 - 窗口开始时间  是否大于 滑动窗口的最大间隔（1秒）</span>
    <span class="token comment">// 也就是说，我们要统计的时 距离当前时间1秒内的 小窗口的 count之和</span>
    <span class="token keyword">return</span> time <span class="token operator">-</span> windowWrap<span class="token punctuation">.</span><span class="token function">windowStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> intervalInMs<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-9-3-漏桶" tabindex="-1"><a class="header-anchor" href="#_2-9-3-漏桶" aria-hidden="true">#</a> 2.9.3.漏桶</h3><p>上一节我们讲过，FlowSlot的限流判断最终都由<code>TrafficShapingController</code>接口中的<code>canPass</code>方法来实现。该接口有三个实现类：</p><ul><li>DefaultController：快速失败，默认的方式，基于滑动时间窗口算法</li><li>WarmUpController：预热模式，基于滑动时间窗口算法，只不过阈值是动态的</li><li>RateLimiterController：排队等待模式，基于漏桶算法</li></ul><p>因此，我们跟入默认的RateLimiterController中的canPass方法来分析：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canPass</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> acquireCount<span class="token punctuation">,</span> <span class="token keyword">boolean</span> prioritized<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Pass when acquire count is less or equal than 0.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>acquireCount <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 阈值小于等于 0 ，阻止请求</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	<span class="token comment">// 获取当前时间</span>
    <span class="token keyword">long</span> currentTime <span class="token operator">=</span> <span class="token class-name">TimeUtil</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 计算两次请求之间允许的最小时间间隔</span>
    <span class="token keyword">long</span> costTime <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span>acquireCount<span class="token punctuation">)</span> <span class="token operator">/</span> count <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 计算本次请求 允许执行的时间点 = 最近一次请求的可执行时间 + 两次请求的最小间隔</span>
    <span class="token keyword">long</span> expectedTime <span class="token operator">=</span> costTime <span class="token operator">+</span> latestPassedTime<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 如果允许执行的时间点小于当前时间，说明可以立即执行</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>expectedTime <span class="token operator">&lt;=</span> currentTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 更新上一次的请求的执行时间</span>
        latestPassedTime<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>currentTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 不能立即执行，需要计算 预期等待时长</span>
        <span class="token comment">// 预期等待时长 = 两次请求的最小间隔 +最近一次请求的可执行时间 - 当前时间</span>
        <span class="token keyword">long</span> waitTime <span class="token operator">=</span> costTime <span class="token operator">+</span> latestPassedTime<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token class-name">TimeUtil</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果预期等待时间超出阈值，则拒绝请求</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>waitTime <span class="token operator">&gt;</span> maxQueueingTimeMs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 预期等待时间小于阈值，更新最近一次请求的可执行时间，加上costTime</span>
            <span class="token keyword">long</span> oldTime <span class="token operator">=</span> latestPassedTime<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span>costTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 保险起见，再判断一次预期等待时间，是否超过阈值</span>
                waitTime <span class="token operator">=</span> oldTime <span class="token operator">-</span> <span class="token class-name">TimeUtil</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>waitTime <span class="token operator">&gt;</span> maxQueueingTimeMs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 如果超过，则把刚才 加 的时间再 减回来</span>
                    latestPassedTime<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token operator">-</span>costTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 拒绝</span>
                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// in race condition waitTime may &lt;= 0</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>waitTime <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 预期等待时间在阈值范围内，休眠要等待的时间，醒来后继续执行</span>
                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>waitTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与我们之前分析的漏桶算法基本一致：</p><figure><img src="`+B+'" alt="image-20210925210716675" tabindex="0" loading="lazy"><figcaption>image-20210925210716675</figcaption></figure><h2 id="_2-10-degradeslot" tabindex="-1"><a class="header-anchor" href="#_2-10-degradeslot" aria-hidden="true">#</a> 2.10.DegradeSlot</h2><p>最后一关，就是降级规则判断了。</p><p>Sentinel的降级是基于状态机来实现的：</p><figure><img src="'+F+`" alt="image-20210925211020881" tabindex="0" loading="lazy"><figcaption>image-20210925211020881</figcaption></figure><p>对应的实现在DegradeSlot类中，核心API：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">entry</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">ResourceWrapper</span> resourceWrapper<span class="token punctuation">,</span> <span class="token class-name">DefaultNode</span> node<span class="token punctuation">,</span> 
                  <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">boolean</span> prioritized<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token comment">// 熔断降级规则判断</span>
    <span class="token function">performChecking</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resourceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 继续下一个slot</span>
    <span class="token function">fireEntry</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resourceWrapper<span class="token punctuation">,</span> node<span class="token punctuation">,</span> count<span class="token punctuation">,</span> prioritized<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>继续进入<code>performChecking</code>方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">performChecking</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">ResourceWrapper</span> r<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BlockException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取当前资源上的所有的断路器 CircuitBreaker</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CircuitBreaker</span><span class="token punctuation">&gt;</span></span> circuitBreakers <span class="token operator">=</span> <span class="token class-name">DegradeRuleManager</span><span class="token punctuation">.</span><span class="token function">getCircuitBreakers</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>circuitBreakers <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> circuitBreakers<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">CircuitBreaker</span> cb <span class="token operator">:</span> circuitBreakers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 遍历断路器，逐个判断</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cb<span class="token punctuation">.</span><span class="token function">tryPass</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">DegradeException</span><span class="token punctuation">(</span>cb<span class="token punctuation">.</span><span class="token function">getRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLimitApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cb<span class="token punctuation">.</span><span class="token function">getRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-10-1-circuitbreaker" tabindex="-1"><a class="header-anchor" href="#_2-10-1-circuitbreaker" aria-hidden="true">#</a> 2.10.1.CircuitBreaker</h3><p>我们进入CircuitBreaker的tryPass方法中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryPass</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 判断状态机状态</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentState<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">State</span><span class="token punctuation">.</span><span class="token constant">CLOSED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果是closed状态，直接放行</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentState<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">State</span><span class="token punctuation">.</span><span class="token constant">OPEN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果是OPEN状态，断路器打开</span>
        <span class="token comment">// 继续判断OPEN时间窗是否结束，如果是则把状态从OPEN切换到 HALF_OPEN，返回true</span>
        <span class="token keyword">return</span> <span class="token function">retryTimeoutArrived</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">fromOpenToHalfOpen</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// OPEN状态，并且时间窗未到，返回false</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有关时间窗的判断在<code>retryTimeoutArrived()</code>方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">retryTimeoutArrived</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 当前时间 大于 下一次 HalfOpen的重试时间</span>
    <span class="token keyword">return</span> <span class="token class-name">TimeUtil</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> nextRetryTimestamp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>OPEN到HALF_OPEN切换在<code>fromOpenToHalfOpen(context)</code>方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">fromOpenToHalfOpen</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 基于CAS修改状态，从 OPEN到 HALF_OPEN</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentState<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token class-name">State</span><span class="token punctuation">.</span><span class="token constant">OPEN</span><span class="token punctuation">,</span> <span class="token class-name">State</span><span class="token punctuation">.</span><span class="token constant">HALF_OPEN</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 状态变更的事件通知</span>
        <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token class-name">State</span><span class="token punctuation">.</span><span class="token constant">OPEN</span><span class="token punctuation">,</span> <span class="token class-name">State</span><span class="token punctuation">.</span><span class="token constant">HALF_OPEN</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 得到当前资源</span>
        <span class="token class-name">Entry</span> entry <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getCurEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 给资源设置监听器，在资源Entry销毁时（资源业务执行完毕时）触发</span>
        entry<span class="token punctuation">.</span><span class="token function">whenTerminate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BiConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Context</span><span class="token punctuation">,</span> <span class="token class-name">Entry</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">Entry</span> entry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 判断 资源业务是否异常</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getBlockError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 如果异常，则再次进入OPEN状态</span>
                    currentState<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token class-name">State</span><span class="token punctuation">.</span><span class="token constant">HALF_OPEN</span><span class="token punctuation">,</span> <span class="token class-name">State</span><span class="token punctuation">.</span><span class="token constant">OPEN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token class-name">State</span><span class="token punctuation">.</span><span class="token constant">HALF_OPEN</span><span class="token punctuation">,</span> <span class="token class-name">State</span><span class="token punctuation">.</span><span class="token constant">OPEN</span><span class="token punctuation">,</span> <span class="token number">1.0d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里出现了从OPEN到HALF_OPEN、从HALF_OPEN到OPEN的变化，但是还有几个没有：</p><ul><li>从CLOSED到OPEN</li><li>从HALF_OPEN到CLOSED</li></ul><h3 id="_2-10-2-触发断路器" tabindex="-1"><a class="header-anchor" href="#_2-10-2-触发断路器" aria-hidden="true">#</a> 2.10.2.触发断路器</h3><p>请求经过所有插槽 后，一定会执行exit方法，而在DegradeSlot的exit方法中：</p><figure><img src="`+U+'" alt="image-20210925213440686" tabindex="0" loading="lazy"><figcaption>image-20210925213440686</figcaption></figure><p>会调用CircuitBreaker的onRequestComplete方法。而CircuitBreaker有两个实现：</p><figure><img src="'+H+`" alt="image-20210925213939035" tabindex="0" loading="lazy"><figcaption>image-20210925213939035</figcaption></figure><p>我们这里以异常比例熔断为例来看，进入<code>ExceptionCircuitBreaker</code>的<code>onRequestComplete</code>方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onRequestComplete</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取资源 Entry</span>
    <span class="token class-name">Entry</span> entry <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getCurEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>entry <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 尝试获取 资源中的 异常</span>
    <span class="token class-name">Throwable</span> error <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取计数器，同样采用了滑动窗口来计数</span>
    <span class="token class-name">SimpleErrorCounter</span> counter <span class="token operator">=</span> stat<span class="token punctuation">.</span><span class="token function">currentWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果出现异常，则 error计数器 +1</span>
        counter<span class="token punctuation">.</span><span class="token function">getErrorCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 不管是否出现异常，total计数器 +1</span>
    counter<span class="token punctuation">.</span><span class="token function">getTotalCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 判断异常比例是否超出阈值</span>
    <span class="token function">handleStateChangeWhenThresholdExceeded</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>来看阈值判断的方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleStateChangeWhenThresholdExceeded</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果当前已经是OPEN状态，不做处理</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentState<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">State</span><span class="token punctuation">.</span><span class="token constant">OPEN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	<span class="token comment">// 如果已经是 HALF_OPEN 状态，判断是否需求切换状态</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentState<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">State</span><span class="token punctuation">.</span><span class="token constant">HALF_OPEN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 没有异常，则从 HALF_OPEN 到 CLOSED</span>
            <span class="token function">fromHalfOpenToClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 有一次，再次进入OPEN</span>
            <span class="token function">fromHalfOpenToOpen</span><span class="token punctuation">(</span><span class="token number">1.0d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	<span class="token comment">// 说明当前是CLOSE状态，需要判断是否触发阈值</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SimpleErrorCounter</span><span class="token punctuation">&gt;</span></span> counters <span class="token operator">=</span> stat<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> errCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> totalCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 累加计算 异常请求数量、总请求数量</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SimpleErrorCounter</span> counter <span class="token operator">:</span> counters<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        errCount <span class="token operator">+=</span> counter<span class="token punctuation">.</span>errorCount<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        totalCount <span class="token operator">+=</span> counter<span class="token punctuation">.</span>totalCount<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 如果总请求数量未达到阈值，什么都不做</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>totalCount <span class="token operator">&lt;</span> minRequestAmount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">double</span> curCount <span class="token operator">=</span> errCount<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>strategy <span class="token operator">==</span> <span class="token constant">DEGRADE_GRADE_EXCEPTION_RATIO</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 计算请求的异常比例</span>
        curCount <span class="token operator">=</span> errCount <span class="token operator">*</span> <span class="token number">1.0d</span> <span class="token operator">/</span> totalCount<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 如果比例超过阈值，切换到 OPEN</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>curCount <span class="token operator">&gt;</span> threshold<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">transformToOpen</span><span class="token punctuation">(</span>curCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,239);function X(K,J){const e=c("ExternalLinkIcon");return l(),i("div",null,[Y,n("p",null,[s("打开浏览器，访问order服务："),n("a",G,[s("http://localhost:8080/order/101"),u(e)])]),V])}const nn=o(Q,[["render",X],["__file","Sentinel源码分析.html.vue"]]);export{nn as default};
