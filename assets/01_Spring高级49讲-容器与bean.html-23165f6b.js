const e=JSON.parse('{"key":"v-326e890d","path":"/framework/spring/spring49/01_Spring%E9%AB%98%E7%BA%A749%E8%AE%B2-%E5%AE%B9%E5%99%A8%E4%B8%8Ebean.html","title":"一、Spring高级49讲-容器与Bean","lang":"zh-CN","frontmatter":{"title":"一、Spring高级49讲-容器与Bean","date":"2023-04-03T15:51:46.000Z","order":1,"category":["ssm","Spring","Spring高级","源码剖析"],"tag":["ssm","Spring","Spring高级","源码剖析"],"author":{"name":"liu yang fang","link":"https://github.com/lyf110"},"description":"一 容器与 bean 1 容器接口 BeanFactory 接口，典型功能有： getBean ApplicationContext 接口，是 BeanFactory 的子接口。它扩展了 BeanFactory 接口的功能，如： 国际化 通配符方式获取一组 Resource 资源 整合 Environment 环境（能通过它获取各种来源的配置信息） 事件发布与监听，实现组件之间的解耦","head":[["meta",{"property":"og:url","content":"https://github.com/lyf110/framework/spring/spring49/01_Spring%E9%AB%98%E7%BA%A749%E8%AE%B2-%E5%AE%B9%E5%99%A8%E4%B8%8Ebean.html"}],["meta",{"property":"og:site_name","content":"lyf blog"}],["meta",{"property":"og:title","content":"一、Spring高级49讲-容器与Bean"}],["meta",{"property":"og:description","content":"一 容器与 bean 1 容器接口 BeanFactory 接口，典型功能有： getBean ApplicationContext 接口，是 BeanFactory 的子接口。它扩展了 BeanFactory 接口的功能，如： 国际化 通配符方式获取一组 Resource 资源 整合 Environment 环境（能通过它获取各种来源的配置信息） 事件发布与监听，实现组件之间的解耦"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://github.com/lyf110/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"一、Spring高级49讲-容器与Bean"}],["meta",{"property":"article:author","content":"liu yang fang"}],["meta",{"property":"article:tag","content":"ssm"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"Spring高级"}],["meta",{"property":"article:tag","content":"源码剖析"}],["meta",{"property":"article:published_time","content":"2023-04-03T15:51:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"一、Spring高级49讲-容器与Bean\\",\\"image\\":[\\"https://github.com/lyf110/\\"],\\"datePublished\\":\\"2023-04-03T15:51:46.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"liu yang fang\\",\\"link\\":\\"https://github.com/lyf110\\"}]}"]]},"headers":[{"level":2,"title":"1 容器接口","slug":"_1-容器接口","link":"#_1-容器接口","children":[{"level":3,"title":"1.1 演示1 - BeanFactory 与 ApplicationContext 的区别","slug":"_1-1-演示1-beanfactory-与-applicationcontext-的区别","link":"#_1-1-演示1-beanfactory-与-applicationcontext-的区别","children":[]},{"level":3,"title":"1.2 演示2 - 国际化","slug":"_1-2-演示2-国际化","link":"#_1-2-演示2-国际化","children":[]}]},{"level":2,"title":"2 容器实现","slug":"_2-容器实现","link":"#_2-容器实现","children":[{"level":3,"title":"2.1 演示1 - DefaultListableBeanFactory","slug":"_2-1-演示1-defaultlistablebeanfactory","link":"#_2-1-演示1-defaultlistablebeanfactory","children":[]},{"level":3,"title":"2.2 演示2 - 常见 ApplicationContext 实现","slug":"_2-2-演示2-常见-applicationcontext-实现","link":"#_2-2-演示2-常见-applicationcontext-实现","children":[]}]},{"level":2,"title":"3 Bean 的生命周期","slug":"_3-bean-的生命周期","link":"#_3-bean-的生命周期","children":[{"level":3,"title":"3.1 演示1 - bean 生命周期","slug":"_3-1-演示1-bean-生命周期","link":"#_3-1-演示1-bean-生命周期","children":[]},{"level":3,"title":"3.2 演示2 - 模板方法设计模式","slug":"_3-2-演示2-模板方法设计模式","link":"#_3-2-演示2-模板方法设计模式","children":[]},{"level":3,"title":"3.3 演示3 - bean 后处理器排序","slug":"_3-3-演示3-bean-后处理器排序","link":"#_3-3-演示3-bean-后处理器排序","children":[]}]},{"level":2,"title":"4 Bean 后处理器","slug":"_4-bean-后处理器","link":"#_4-bean-后处理器","children":[{"level":3,"title":"4.1 演示1 - 后处理器作用","slug":"_4-1-演示1-后处理器作用","link":"#_4-1-演示1-后处理器作用","children":[]},{"level":3,"title":"4.2 演示2 - @Autowired bean 后处理器运行分析","slug":"_4-2-演示2-autowired-bean-后处理器运行分析","link":"#_4-2-演示2-autowired-bean-后处理器运行分析","children":[]}]},{"level":2,"title":"5 BeanFactory 后处理器","slug":"_5-beanfactory-后处理器","link":"#_5-beanfactory-后处理器","children":[{"level":3,"title":"5.1 演示1 - BeanFactory 后处理器的作用","slug":"_5-1-演示1-beanfactory-后处理器的作用","link":"#_5-1-演示1-beanfactory-后处理器的作用","children":[]},{"level":3,"title":"5.2 演示2 - 模拟解析 @ComponentScan","slug":"_5-2-演示2-模拟解析-componentscan","link":"#_5-2-演示2-模拟解析-componentscan","children":[]},{"level":3,"title":"5.3 演示3 - 模拟解析 @Bean","slug":"_5-3-演示3-模拟解析-bean","link":"#_5-3-演示3-模拟解析-bean","children":[]},{"level":3,"title":"5.4 演示4 - 模拟解析 Mapper 接口","slug":"_5-4-演示4-模拟解析-mapper-接口","link":"#_5-4-演示4-模拟解析-mapper-接口","children":[]}]},{"level":2,"title":"6 Aware 接口","slug":"_6-aware-接口","link":"#_6-aware-接口","children":[{"level":3,"title":"6.1 演示 - Aware 接口及 InitializingBean 接口","slug":"_6-1-演示-aware-接口及-initializingbean-接口","link":"#_6-1-演示-aware-接口及-initializingbean-接口","children":[]}]},{"level":2,"title":"7 初始化与销毁","slug":"_7-初始化与销毁","link":"#_7-初始化与销毁","children":[{"level":3,"title":"7.1 演示 - 初始化销毁顺序","slug":"_7-1-演示-初始化销毁顺序","link":"#_7-1-演示-初始化销毁顺序","children":[]}]},{"level":2,"title":"8 Scope","slug":"_8-scope","link":"#_8-scope","children":[{"level":3,"title":"8.1 演示1 - request, session, application 作用域","slug":"_8-1-演示1-request-session-application-作用域","link":"#_8-1-演示1-request-session-application-作用域","children":[]},{"level":3,"title":"8.2 演示2 - 4种解决方法","slug":"_8-2-演示2-4种解决方法","link":"#_8-2-演示2-4种解决方法","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":47.91,"words":14374},"filePathRelative":"framework/spring/spring49/01_Spring高级49讲-容器与bean.md","localizedDate":"2023年4月3日","excerpt":"<h1> 一 容器与 bean</h1>\\n<h2> 1 容器接口</h2>\\n<ul>\\n<li>\\n<p>BeanFactory 接口，典型功能有：</p>\\n<ul>\\n<li>getBean</li>\\n</ul>\\n</li>\\n<li>\\n<p>ApplicationContext 接口，是 BeanFactory 的子接口。它扩展了 BeanFactory 接口的功能，如：</p>\\n<ul>\\n<li>国际化</li>\\n<li>通配符方式获取一组 Resource 资源</li>\\n<li>整合 Environment 环境（能通过它获取各种来源的配置信息）</li>\\n<li>事件发布与监听，实现组件之间的解耦</li>\\n</ul>\\n</li>\\n</ul>","copyright":{"author":"liu yang fang","license":"Apache License 2.0"},"autoDesc":true}');export{e as data};
