import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as p,c as o,a as n,b as c,d as i,e as a}from"./app-5f6064b2.js";const l="/assets/image-20230627110940334-7ef22701.png",u="/assets/image-20230627111051188-dbff4f38.png",r="/assets/image-20230627111331420-dc0aefe5.png",d="/assets/image-20230627112228514-c4cf8fa6.png",k="/assets/image-20230627112350583-e45ba1a9.png",g="/assets/image-20230627114920892-6bba31fd.png",m="/assets/image-20230627114946133-aa672939.png",v="/assets/image-20230627115131287-b9d40de9.png",h={},f=a(`<h1 id="二、尚硅谷大厂面试第三季" tabindex="-1"><a class="header-anchor" href="#二、尚硅谷大厂面试第三季" aria-hidden="true">#</a> 二、尚硅谷大厂面试第三季</h1><h2 id="_1-58同城的java字符串常量池" tabindex="-1"><a class="header-anchor" href="#_1-58同城的java字符串常量池" aria-hidden="true">#</a> 1 58同城的java字符串常量池</h2><h3 id="_1-1-代码" tabindex="-1"><a class="header-anchor" href="#_1-1-代码" aria-hidden="true">#</a> 1.1 代码</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hhf<span class="token punctuation">.</span>study<span class="token punctuation">.</span>javase</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringPool58Demo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;58&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;tongcheng&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;ja&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;va&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> s4 <span class="token operator">=</span> s3<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-intern-方法" tabindex="-1"><a class="header-anchor" href="#_1-2-intern-方法" aria-hidden="true">#</a> 1.2 intern()方法</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * Returns a canonical representation for the string object.
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * A pool of strings, initially empty, is maintained privately by the
     * class <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">String</span></span></span><span class="token punctuation">}</span>.
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * When the intern method is invoked, if the pool already contains a
     * string equal to this <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">String</span></span></span><span class="token punctuation">}</span> object as determined by
     * the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> method, then the string from the pool is
     * returned. Otherwise, this <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">String</span></span></span><span class="token punctuation">}</span> object is added to the
     * pool and a reference to this <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">String</span></span></span><span class="token punctuation">}</span> object is returned.
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * It follows that for any two strings <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">s</span></span><span class="token punctuation">}</span> and <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">t</span></span><span class="token punctuation">}</span>,
     * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">s<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> t<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token punctuation">}</span> is <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span>
     * if and only if <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span></span></span><span class="token punctuation">}</span> is <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span>.
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * All literal strings and string-valued constant expressions are
     * interned. String literals are defined in section 3.10.5 of the
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cite</span><span class="token punctuation">&gt;</span></span>The Java<span class="token entity named-entity" title="™">&amp;trade;</span> Language Specification<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cite</span><span class="token punctuation">&gt;</span></span>.
     *
     * <span class="token keyword">@return</span>  a string that has the same contents as this string, but is
     *          guaranteed to be from a pool of unique strings.
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token class-name">String</span> <span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+l+'" alt="image-20230627110940334" tabindex="0" loading="lazy"><figcaption>image-20230627110940334</figcaption></figure><h3 id="_1-3-上述代码的执行结果与分析" tabindex="-1"><a class="header-anchor" href="#_1-3-上述代码的执行结果与分析" aria-hidden="true">#</a> 1.3 上述代码的执行结果与分析</h3><h4 id="_1-3-1-执行结果" tabindex="-1"><a class="header-anchor" href="#_1-3-1-执行结果" aria-hidden="true">#</a> 1.3.1 执行结果</h4><figure><img src="'+u+'" alt="image-20230627111051188" tabindex="0" loading="lazy"><figcaption>image-20230627111051188</figcaption></figure><h4 id="_1-3-2-分析" tabindex="-1"><a class="header-anchor" href="#_1-3-2-分析" aria-hidden="true">#</a> 1.3.2 分析</h4><p>按照代码结果，java字符串答案为false 必然是两个不同的java，那另外一个java字符串如何加载进来的?</p><p>有一个初始化的java字符串(JDK出娘胎自带的)， 在加载<code>sun.misc.Version</code>这个类的时候进入常量池</p><h3 id="_1-4-openjdk8底层源码说明" tabindex="-1"><a class="header-anchor" href="#_1-4-openjdk8底层源码说明" aria-hidden="true">#</a> 1.4 OpenJDK8底层源码说明</h3><figure><img src="'+r+'" alt="image-20230627111331420" tabindex="0" loading="lazy"><figcaption>image-20230627111331420</figcaption></figure><h4 id="_1-4-1-system代码解析" tabindex="-1"><a class="header-anchor" href="#_1-4-1-system代码解析" aria-hidden="true">#</a> 1.4.1 System代码解析</h4><figure><img src="'+d+'" alt="image-20230627112228514" tabindex="0" loading="lazy"><figcaption>image-20230627112228514</figcaption></figure><h4 id="_1-4-2-类加载器和rt-jar" tabindex="-1"><a class="header-anchor" href="#_1-4-2-类加载器和rt-jar" aria-hidden="true">#</a> 1.4.2 类加载器和<code>rt.jar</code></h4><p>根加载器提前部署加载<code>rt.jar</code></p><figure><img src="'+k+'" alt="image-20230627112350583" tabindex="0" loading="lazy"><figcaption>image-20230627112350583</figcaption></figure><h4 id="_1-4-3-openjdk源码" tabindex="-1"><a class="header-anchor" href="#_1-4-3-openjdk源码" aria-hidden="true">#</a> 1.4.3 OpenJDK源码</h4>',21),b={href:"https://openjdk.org/",target:"_blank",rel:"noopener noreferrer"},_=a('<p><code>openjdk8\\jdk\\src\\share\\classes\\sun\\misc</code></p><figure><img src="'+g+'" alt="image-20230627114920892" tabindex="0" loading="lazy"><figcaption>image-20230627114920892</figcaption></figure><h3 id="_1-5-总结" tabindex="-1"><a class="header-anchor" href="#_1-5-总结" aria-hidden="true">#</a> 1.5 总结</h3><figure><img src="'+m+'" alt="image-20230627114946133" tabindex="0" loading="lazy"><figcaption>image-20230627114946133</figcaption></figure><h3 id="_1-6-考察点" tabindex="-1"><a class="header-anchor" href="#_1-6-考察点" aria-hidden="true">#</a> 1.6 考察点</h3><ul><li>intern()方法</li><li>是否阅读过《深入理解java虚拟机》书</li></ul><figure><img src="'+v+'" alt="image-20230627115131287" tabindex="0" loading="lazy"><figcaption>image-20230627115131287</figcaption></figure>',7);function y(j,x){const s=e("ExternalLinkIcon");return p(),o("div",null,[f,n("p",null,[n("a",b,[c("OpenJDK官网"),i(s)])]),_])}const q=t(h,[["render",y],["__file","大厂面试第三季.html.vue"]]);export{q as default};
