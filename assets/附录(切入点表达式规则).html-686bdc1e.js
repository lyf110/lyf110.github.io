const e=JSON.parse('{"key":"v-14c16a38","path":"/framework/spring/spring66/%E9%99%84%E5%BD%95(%E5%88%87%E5%85%A5%E7%82%B9%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%84%E5%88%99).html","title":"五、附录","lang":"zh-CN","frontmatter":{"title":"五、附录","date":"2023-04-02T10:38:46.000Z","order":5,"category":["Spring","AspectJ"],"tag":["Spring","Aspect"],"author":{"name":"liu yang fang","link":"https://github.com/lyf110"},"description":"附录:切入点表达式规则 执行任何公有方法 execution(public * *(..)) 执行任何以set开头的方法 execution(* set*(..)) 执行com.xyz.service.AccountService类中的任何方法__(执行某个类的任何方法)__ execution(* com.xyz.service.AccountService.*(..)) 执行当前包下类的任意方法（不含子包） execution(* com.xyz.service.*.*(..)) 执行当前包及其子包下类的任意方法 execution(* com.xyz.service..*.*(..)) 执行当前包下类的任意方法（不含子包） within(com.xyz.service.*) 执行当前包及其子包下类的任意方 within(com.xyz.service..*) 实现当前接口的类的任何方法 this(com.xyz.service.AccountService) 实现当前接口的类的任何方法 target(com.xyz.service.AccountService) 只有一个参数且实现了Serializable的任何方法 args(java.io.Serializable) 有Transactional注解标签的方法（针对特定注解标签） @target(org.springframework.transaction.annotation.Transactional) 有Transactional注解标签的方法（针对特定注解标签） @within(org.springframework.transaction.annotation.Transactional) 有Transactional注解标签的方法（针对特定注解标签） @annotation(org.springframework.transaction.annotation.Transactional) 只有一个参数且参数有Classified注解的任何方法 @args(com.xyz.security.Classified) 指定名称的bean下任意方法 bean(tradeService) 满足通配符命名的bean下任意方法 bean(*Service)","head":[["meta",{"property":"og:url","content":"https://github.com/lyf110/framework/spring/spring66/%E9%99%84%E5%BD%95(%E5%88%87%E5%85%A5%E7%82%B9%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%84%E5%88%99).html"}],["meta",{"property":"og:site_name","content":"lyf blog"}],["meta",{"property":"og:title","content":"五、附录"}],["meta",{"property":"og:description","content":"附录:切入点表达式规则 执行任何公有方法 execution(public * *(..)) 执行任何以set开头的方法 execution(* set*(..)) 执行com.xyz.service.AccountService类中的任何方法__(执行某个类的任何方法)__ execution(* com.xyz.service.AccountService.*(..)) 执行当前包下类的任意方法（不含子包） execution(* com.xyz.service.*.*(..)) 执行当前包及其子包下类的任意方法 execution(* com.xyz.service..*.*(..)) 执行当前包下类的任意方法（不含子包） within(com.xyz.service.*) 执行当前包及其子包下类的任意方 within(com.xyz.service..*) 实现当前接口的类的任何方法 this(com.xyz.service.AccountService) 实现当前接口的类的任何方法 target(com.xyz.service.AccountService) 只有一个参数且实现了Serializable的任何方法 args(java.io.Serializable) 有Transactional注解标签的方法（针对特定注解标签） @target(org.springframework.transaction.annotation.Transactional) 有Transactional注解标签的方法（针对特定注解标签） @within(org.springframework.transaction.annotation.Transactional) 有Transactional注解标签的方法（针对特定注解标签） @annotation(org.springframework.transaction.annotation.Transactional) 只有一个参数且参数有Classified注解的任何方法 @args(com.xyz.security.Classified) 指定名称的bean下任意方法 bean(tradeService) 满足通配符命名的bean下任意方法 bean(*Service)"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"liu yang fang"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"Aspect"}],["meta",{"property":"article:published_time","content":"2023-04-02T10:38:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"五、附录\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-02T10:38:46.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"liu yang fang\\",\\"link\\":\\"https://github.com/lyf110\\"}]}"]]},"headers":[{"level":2,"title":"附录:切入点表达式规则","slug":"附录-切入点表达式规则","link":"#附录-切入点表达式规则","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.05,"words":316},"filePathRelative":"framework/spring/spring66/附录(切入点表达式规则).md","localizedDate":"2023年4月2日","excerpt":"<h2> 附录:切入点表达式规则</h2>\\n<ul>\\n<li>\\n<p>执行任何公有方法</p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>execution(public * *(..))\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>执行任何以<code>set</code>开头的方法</p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>execution(* set*(..))\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>执行com.xyz.service.AccountService类中的任何方法__(执行某个类的任何方法)__</p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>execution(* com.xyz.service.AccountService.*(..))\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>执行当前包下类的任意方法（不含子包）</p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>execution(* com.xyz.service.*.*(..))\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>执行当前包及其子包下类的任意方法</p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>execution(* com.xyz.service..*.*(..))\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>执行当前包下类的任意方法（不含子包）</p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>within(com.xyz.service.*)\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>执行当前包及其子包下类的任意方</p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>within(com.xyz.service..*)\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>实现当前接口的类的任何方法</p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>this(com.xyz.service.AccountService)\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>实现当前接口的类的任何方法</p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>target(com.xyz.service.AccountService)\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>只有一个参数且实现了Serializable的任何方法</p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>args(java.io.Serializable)\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>有Transactional注解标签的方法（针对特定注解标签）</p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>@target(org.springframework.transaction.annotation.Transactional)\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>有Transactional注解标签的方法（针对特定注解标签）</p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code> @within(org.springframework.transaction.annotation.Transactional)\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>有Transactional注解标签的方法（针对特定注解标签）</p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>@annotation(org.springframework.transaction.annotation.Transactional)\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>只有一个参数且参数有Classified注解的任何方法</p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code> @args(com.xyz.security.Classified)\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>指定名称的bean下任意方法</p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>bean(tradeService)\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>满足通配符命名的bean下任意方法</p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>bean(*Service)\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n</ul>","copyright":{"author":"liu yang fang","license":"Apache License 2.0"},"autoDesc":true}');export{e as data};
