import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o,c,a as n,b as s,d as t,e}from"./app-5f6064b2.js";const l="/assets/1689420087806-73-3960316d.png",u="/assets/image-20230715192352591-74cac913.png",r="/assets/1689420087746-1-9a822456.png",d="/assets/1689420087746-2-16827e73.png",g="/assets/1689420087747-3-d0fc8389.png",k="/assets/1689420087747-4-3b1e8810.jpeg",m="/assets/1689420087748-5-8d5b7323.png",b="/assets/image-20230715192518691-4a50ef8f.png",f="/assets/1689420087748-6-370c8b9d.jpeg",h="/assets/1689420087748-7-017b206d.png",v="/assets/1689420087749-8-54a4a4fe.png",_="/assets/1689420087749-9-41cd3c36.png",y="/assets/1689420087749-10-9a4c925a.png",x="/assets/1689420087749-11-2e6ae751.png",j="/assets/1689420087750-12-6ed9b9b4.png",z="/assets/1689420087750-13-06556bd6.png",w="/assets/1689420087750-14-dd5b7544.png",q="/assets/1689420087750-15-3f778fb7.png",E="/assets/1689420087750-16-43696dc4.png",B="/assets/1689420087750-17-ff0186e7.png",R="/assets/1689420087750-18-7b9adf7c.png",D="/assets/1689420087751-19-a4bd385d.png",G="/assets/1689420087751-20-8600408b.png",U="/assets/1689420087751-21-91e7a0ac.png",C="/assets/1689420087751-22-974c5b1f.png",S="/assets/1689420087751-23-03d14566.png",M="/assets/image-20230715192901334-f7c6925a.png",$="/assets/1689420087751-24-a936f80d.png",A="/assets/1689420087751-25-32b25b59.png",I="/assets/1689420087752-26-f6e9127d.png",N="/assets/1689420087752-27-aa27d0fa.png",O="/assets/1689420087752-28-b4d79874.png",H="/assets/1689420087752-29-ed651a12.png",P="/assets/1689420087752-30-4362dc18.png",V="/assets/1689420087752-31-b58f8e1f.png",F="/assets/1689420087752-32-b574ec94.png",T="/assets/1689420087752-33-c5b3fcc3.png",L="/assets/1689420087752-34-14d7b472.png",J="/assets/1689420087752-35-be91181b.png",K="/assets/1689420087753-36-31798330.png",Q="/assets/1689420087753-37-08654433.png",X="/assets/1689420087753-38-7ad3b0e9.png",W="/assets/1689420087753-39-55c41cca.png",Y="/assets/1689420087753-40-5b3d1561.png",Z="/assets/image-20230715193134750-8b8fe642.png",nn="/assets/1689420087753-41-b329663e.png",sn="/assets/1689420087753-42-e15ec516.png",an="/assets/1689420087753-43-5d775bb7.png",tn="/assets/1689420087753-44-643181b2.png",en="/assets/1689420087753-45-65c37a20.png",pn="/assets/1689420087754-46-620e14ab.png",on="/assets/1689420087754-47-4c3ea73d.png",cn="/assets/1689420087754-48-c015a103.png",ln="/assets/1689420087754-49-01573e4f.png",un="/assets/1689420087754-50-88a2ad4a.png",rn="/assets/1689420087754-51-a7e1d6b4.png",dn="/assets/1689420087754-52-6bb92d36.png",gn="/assets/1689420087754-53-188b223d.png",kn="/assets/1689420087754-54-42241959.png",mn="/assets/1689420087754-55-5af410cd.png",bn="/assets/1689420087755-56-16e2e15a.png",fn="/assets/1689420087755-57-bb2f08d5.png",hn="/assets/1689420087755-58-793347ed.png",vn="/assets/1689420087755-59-d1710d4f.png",_n="/assets/1689420087755-60-cb75b097.png",yn="/assets/1689420087755-61-c86eefd6.png",xn="/assets/1689420087755-62-61c1bb50.png",jn="/assets/1689420087755-63-ffb5f15a.png",zn="/assets/1689420087755-64-0096af73.png",wn="/assets/1689420087755-65-6033fac8.png",qn="/assets/1689420087756-66-9b65cd2a.png",En="/assets/1689420087756-67-c2f9a600.png",Bn="/assets/1689420087756-68-94be3201.png",Rn="/assets/1689420087756-69-3f645042.png",Dn="/assets/1689420087756-70-979f9be4.png",Gn="/assets/1689420087756-71-012d7da9.png",Un="/assets/1689420087756-72-2dcf67ca.png",Cn={},Sn=e('<h1 id="day01-初始项目" tabindex="-1"><a class="header-anchor" href="#day01-初始项目" aria-hidden="true">#</a> day01-初始项目</h1><h2 id="_1-学习背景" tabindex="-1"><a class="header-anchor" href="#_1-学习背景" aria-hidden="true">#</a> 1.学习背景</h2><p>各位同学大家好，经过前面的学习我们已经掌握了《微服务架构》的核心技术栈。相信大家也体会到了微服务架构相对于项目一的单体架构要复杂很多，你的脑袋里也会有很多的问号：</p><ul><li>微服务架构该如何拆分？</li><li>到了公司中我需要自己搭建微服务项目吗？</li><li>如果公司已经有了一个复杂的微服务项目，我该如何快速上手？</li><li>我该从哪里拉取代码？</li><li>开发的规范有哪些？</li><li>微服务开发的环境与传统项目有什么差异？</li><li>...</li></ul><p>别担心，通过项目二的学习，上述问题你都能找到答案。</p><p>在大多数情况下，我们进入公司接手的都是一个成熟的，或者说开发中的微服务项目。所以如何快速熟悉项目、熟悉业务流程、融入开发团队就成了我们的必修课。</p><p>因此，项目二模拟的正是这样的开发场景：你刚刚进入了一家公司，进入了一个微服务项目组，参与一个微服务项目开发。我们会带着大家拉取代码、搭建开发环境、熟悉项目代码、熟悉业务流程、修改项目BUG、开发新功能、完成项目优化。通过整个项目的学习，真正掌握微服务架构技术栈，有能力解决微服务架构的各种问题。</p><h2 id="_2-天机学堂介绍" tabindex="-1"><a class="header-anchor" href="#_2-天机学堂介绍" aria-hidden="true">#</a> 2.天机学堂介绍</h2><p>天机学堂是一个基于微服务架构的<strong>生产级</strong>在线教育项目，核心用户不是K12群体，而是面向成年人的<strong>非学历职业技能培训</strong>平台。相比之前的项目课程，其业务完整度、真实度、复杂度都非常的高，与企业真实项目非常接近。</p><p>通过天机学堂项目，你能学习到在线教育中核心的学习辅助系统、考试系统，电商类项目的促销优惠系统等等。更能学习到微服务开发中的各种热点问题，以及不同场景对应的解决方案。学完以后你会收获很多的“哇塞”。</p><h3 id="_2-1-行业背景" tabindex="-1"><a class="header-anchor" href="#_2-1-行业背景" aria-hidden="true">#</a> 2.1.行业背景</h3><p>2021年7月，国务院颁布《关于进一步减轻义务教育阶段学生作业负担和校外培训负担的意见》，简称“双减”政策。在该政策影响下，多年来占据我国教育培训行业半壁江山的课外辅导培训遭到毁灭性打击。相对的，职业教育培训的市场规模持续增长：</p><figure><img src="'+l+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>职业教育的市场规模持续增长，增长率保持在12%以上，总规模即将突破万亿，可见职业教育前景大好。职业教育培训分为有学历和非学历两大类：</p><figure><img src="'+u+'" alt="image-20230715192352591" tabindex="0" loading="lazy"><figcaption>image-20230715192352591</figcaption></figure><p>天机学堂的核心业务就是非学历的<strong>职业技能培训</strong>。</p><p>另外，职业教育有线上和线下之分，随着互联网发展，传统行业也逐渐网络化发展。再加上疫情的影响，很多职业技能培训企业都开始发展在线教育。相比于传统线下培训，在线教育有成本更低，学习时间碎片化，教育资源能充分利用。因此，在线教育市场规模不断增长，前景巨大。</p><figure><img src="'+r+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_2-2-行业图谱" tabindex="-1"><a class="header-anchor" href="#_2-2-行业图谱" aria-hidden="true">#</a> 2.2.行业图谱</h3><p>职业教育产业图谱：</p><figure><img src="'+d+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>职业教育产业链分为三大部分：</p><p>上游：由配套服务商、平台服务商、师资服务商和内容服务商构成。</p><p>中游：由学历和非学历的职业教育服务商 构成， 主要提供教育和培训服务。</p><p>下游：是职业教育需求方， 其中现阶段学历职业教育主要面向 15-22 岁的 C 端学生， 非学历职业培训的受众则更为广泛，基本覆盖了中考毕业以后所有年龄阶层的学生，此外职业技能培训和企业培训公司还向 B 端企业提供服务</p><figure><img src="'+g+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>天机学堂正是属于中游的非学历职业技能培训的一家企业。</p><h3 id="_2-3-系统架构" tabindex="-1"><a class="header-anchor" href="#_2-3-系统架构" aria-hidden="true">#</a> 2.3.系统架构</h3><p>天机学堂目前是一个B2C类型的教育网站，因此分为两个端：</p><ul><li>后台管理端</li><li>用户端（PC网站）</li></ul><p>整体架构如下：</p><figure><img src="'+k+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_2-4-技术架构" tabindex="-1"><a class="header-anchor" href="#_2-4-技术架构" aria-hidden="true">#</a> 2.4.技术架构</h3><figure><img src="'+m+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_2-5-功能演示" tabindex="-1"><a class="header-anchor" href="#_2-5-功能演示" aria-hidden="true">#</a> 2.5.功能演示</h3><p>天机学堂分为两部分：</p><ul><li>学生端：其核心业务主体就是学员，所有业务围绕着学员的展开</li><li>管理端：其核心业务主体包括老师、管理员、其他员工，核心业务围绕着老师展开</li></ul><p>具体可参考课前资料提供的功能演示视频。</p><h4 id="_2-5-1-老师核心业务" tabindex="-1"><a class="header-anchor" href="#_2-5-1-老师核心业务" aria-hidden="true">#</a> 2.5.1.老师核心业务</h4><p>例如，老师的核心业务流程有：</p><figure><img src="'+b+'" alt="image-20230715192518691" tabindex="0" loading="lazy"><figcaption>image-20230715192518691</figcaption></figure><p>虽然流程并不复杂，但其中包含的业务繁多，例如：</p><ul><li>课程分类管理：课程分类的增删改查</li><li>媒资管理：媒资的增删改查、媒资审核</li><li>题目管理：试题的增删改查、试题批阅、审核</li><li>课程管理：课程增删改查、课程上下架、课程审核、发布等等</li></ul><h4 id="_2-5-2-学员核心业务" tabindex="-1"><a class="header-anchor" href="#_2-5-2-学员核心业务" aria-hidden="true">#</a> 2.5.2.学员核心业务</h4><p>学员的核心业务就是买课、学习，基本流程如下：</p><figure><img src="'+f+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_3-项目环境搭建" tabindex="-1"><a class="header-anchor" href="#_3-项目环境搭建" aria-hidden="true">#</a> 3.项目环境搭建</h2><p>为了模拟真实的开发场景，我们设定的场景是这样的：天机学堂项目已经完成1.0.0版本60%的功能开发，能够实现项目的课程管理、课程购买等业务流程。现在需要加入课程学习、优惠促销、评价等功能。</p><p>相关微服务及1.0.0版本的完成状态如下：</p><table><thead><tr><th style="text-align:center;">微服务名称</th><th style="text-align:center;">功能描述</th><th style="text-align:center;">完成状态</th></tr></thead><tbody><tr><td style="text-align:center;">tj-parent</td><td style="text-align:center;">父工程</td><td style="text-align:center;"><strong>√</strong></td></tr><tr><td style="text-align:center;">tj-common</td><td style="text-align:center;">通用工程</td><td style="text-align:center;"><strong>√</strong></td></tr><tr><td style="text-align:center;">tj-message</td><td style="text-align:center;">消息中心</td><td style="text-align:center;"><strong>√</strong></td></tr><tr><td style="text-align:center;">tj-gateway</td><td style="text-align:center;">网关</td><td style="text-align:center;"><strong>√</strong></td></tr><tr><td style="text-align:center;">tj-auth</td><td style="text-align:center;">权限服务</td><td style="text-align:center;"><strong>√</strong></td></tr><tr><td style="text-align:center;">tj-user</td><td style="text-align:center;">用户服务</td><td style="text-align:center;"><strong>√</strong></td></tr><tr><td style="text-align:center;">tj-pay</td><td style="text-align:center;">支付服务</td><td style="text-align:center;"><strong>√</strong></td></tr><tr><td style="text-align:center;">tj-course</td><td style="text-align:center;">课程服务</td><td style="text-align:center;"><strong>√</strong></td></tr><tr><td style="text-align:center;">tj-exam</td><td style="text-align:center;">考试服务</td><td style="text-align:center;"><strong>O</strong></td></tr><tr><td style="text-align:center;">tj-search</td><td style="text-align:center;">搜索服务</td><td style="text-align:center;"><strong>√</strong></td></tr><tr><td style="text-align:center;">tj-trade</td><td style="text-align:center;">交易服务</td><td style="text-align:center;"><strong>O</strong></td></tr><tr><td style="text-align:center;">tj-learning</td><td style="text-align:center;">学习服务</td><td style="text-align:center;"><strong>X</strong></td></tr><tr><td style="text-align:center;">tj-promotion</td><td style="text-align:center;">促销服务</td><td style="text-align:center;"><strong>X</strong></td></tr><tr><td style="text-align:center;">tj-media</td><td style="text-align:center;">媒资服务</td><td style="text-align:center;"><strong>√</strong></td></tr><tr><td style="text-align:center;">tj-data</td><td style="text-align:center;">数据服务</td><td style="text-align:center;"><strong>O</strong></td></tr><tr><td style="text-align:center;">tj-remark</td><td style="text-align:center;">评价服务</td><td style="text-align:center;"><strong>X</strong></td></tr></tbody></table><h3 id="_3-1-导入虚拟机" tabindex="-1"><a class="header-anchor" href="#_3-1-导入虚拟机" aria-hidden="true">#</a> 3.1.导入虚拟机</h3><p>为了模拟企业中的开发环境，我们利用虚拟机搭建了一套开发环境，其中部署了开发常用的组件：</p><ul><li>Git私服（gogs）：代码全部提交带了自己的Git私服，模拟企业开发的代码管理，大家也需要自行到私服拉取代码</li><li>jenkins：持续集成，目前已经添加了所有部署脚本和Git钩子，代码推送会自动编译，可以根据需求手动部署</li><li>nacos：服务注册中心、统一配置管理，大多数共享的配置都已经交给nacos处理</li><li>seata：分布式事务管理</li><li>xxl-job：分布式任务系统</li><li>es：索引库</li><li>redis：缓存库</li><li>mysql：数据库</li><li>kibana：es控制台</li></ul><p>如图：</p><figure><img src="'+h+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>导入方式有两种：</p><ul><li>方式一：下载完整虚拟机并导入，参考文档《虚拟机导入说明》</li><li>方式二：下载基础DockerCompose文件，及基础数据，利用脚本一键部署。参考文档《自定义部署》</li></ul><p>注意：导入虚拟机后所有软件即可使用，无需重复安装，VMware一定要按照文档中设置IP，不要私自修改。一定要关闭windows防火墙。</p><h3 id="_3-2-配置本机hosts" tabindex="-1"><a class="header-anchor" href="#_3-2-配置本机hosts" aria-hidden="true">#</a> 3.2.配置本机hosts</h3><p>为了模拟使用域名访问，我们需要在本地配置hosts：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">192.168</span><span class="token number">.150</span><span class="token number">.101</span> git<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>com
<span class="token number">192.168</span><span class="token number">.150</span><span class="token number">.101</span> jenkins<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>com
<span class="token number">192.168</span><span class="token number">.150</span><span class="token number">.101</span> mq<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>com
<span class="token number">192.168</span><span class="token number">.150</span><span class="token number">.101</span> nacos<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>com
<span class="token number">192.168</span><span class="token number">.150</span><span class="token number">.101</span> xxljob<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>com
<span class="token number">192.168</span><span class="token number">.150</span><span class="token number">.101</span> es<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>com
<span class="token number">192.168</span><span class="token number">.150</span><span class="token number">.101</span> api<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>com
<span class="token number">192.168</span><span class="token number">.150</span><span class="token number">.101</span> www<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>com
<span class="token number">192.168</span><span class="token number">.150</span><span class="token number">.101</span> manage<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们访问上述域名时，请求实际是发送到了虚拟机，而虚拟机中的Nginx会对这些域名做反向代理，这样我们就能请求到对应的组件了：</p><figure><img src="`+v+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>',63),Mn={href:"http://git.tianji.com",target:"_blank",rel:"noopener noreferrer"},$n=n("figure",null,[n("img",{src:_,alt:"img",tabindex:"0",loading:"lazy"}),n("figcaption",null,"img")],-1),An=n("p",null,"每个域名对应的服务列表如下：",-1),In=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"名称"),n("th",{style:{"text-align":"center"}},"域名"),n("th",{style:{"text-align":"center"}},"账号"),n("th",{style:{"text-align":"center"}},"端口")])],-1),Nn=n("td",{style:{"text-align":"center"}},"Git私服",-1),On={style:{"text-align":"center"}},Hn={href:"http://git.tianji.com",target:"_blank",rel:"noopener noreferrer"},Pn=n("td",{style:{"text-align":"center"}},"tjxt/123321",-1),Vn=n("td",{style:{"text-align":"center"}},"10880",-1),Fn=n("td",{style:{"text-align":"center"}},"Jenkins持续集成",-1),Tn={style:{"text-align":"center"}},Ln={href:"http://jenkins.tianji.com",target:"_blank",rel:"noopener noreferrer"},Jn=n("td",{style:{"text-align":"center"}},"root/123",-1),Kn=n("td",{style:{"text-align":"center"}},"18080",-1),Qn=n("td",{style:{"text-align":"center"}},"RabbitMQ",-1),Xn={style:{"text-align":"center"}},Wn={href:"http://mq.tianji.com",target:"_blank",rel:"noopener noreferrer"},Yn=n("td",{style:{"text-align":"center"}},"tjxt/123321",-1),Zn=n("td",{style:{"text-align":"center"}},"15672",-1),ns=n("td",{style:{"text-align":"center"}},"Nacos控制台",-1),ss={style:{"text-align":"center"}},as={href:"http://nacos.tianji.com",target:"_blank",rel:"noopener noreferrer"},ts=n("td",{style:{"text-align":"center"}},"nacos/nacos",-1),es=n("td",{style:{"text-align":"center"}},"8848",-1),ps=n("td",{style:{"text-align":"center"}},"xxl-job控制台",-1),is={style:{"text-align":"center"}},os={href:"http://xxljob.tianji.com",target:"_blank",rel:"noopener noreferrer"},cs=n("td",{style:{"text-align":"center"}},"admin/123456",-1),ls=n("td",{style:{"text-align":"center"}},"8880",-1),us=n("td",{style:{"text-align":"center"}},"ES的Kibana控制台",-1),rs={style:{"text-align":"center"}},ds={href:"http://es.tianji.com",target:"_blank",rel:"noopener noreferrer"},gs=n("td",{style:{"text-align":"center"}},"-",-1),ks=n("td",{style:{"text-align":"center"}},"5601",-1),ms=n("td",{style:{"text-align":"center"}},"微服务网关",-1),bs={style:{"text-align":"center"}},fs={href:"http://api.tianji.com",target:"_blank",rel:"noopener noreferrer"},hs=n("td",{style:{"text-align":"center"}},"-",-1),vs=n("td",{style:{"text-align":"center"}},"10010",-1),_s=n("td",{style:{"text-align":"center"}},"用户端入口",-1),ys={style:{"text-align":"center"}},xs={href:"http://www.tianji.com",target:"_blank",rel:"noopener noreferrer"},js=n("td",{style:{"text-align":"center"}},"-",-1),zs=n("td",{style:{"text-align":"center"}},"18081",-1),ws=n("td",{style:{"text-align":"center"}},"管理端入口",-1),qs={style:{"text-align":"center"}},Es={href:"http://manage.tianji.com",target:"_blank",rel:"noopener noreferrer"},Bs=n("td",{style:{"text-align":"center"}},"-",-1),Rs=n("td",{style:{"text-align":"center"}},"18082",-1),Ds=e('<p>同样，我们访问用户端或者管理端页面时，也会被Nginx反向代理：</p><figure><img src="'+y+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>当我们访问www.tianji.com时，请求会被代理到虚拟机中的<code> /usr/local/src/tj-portal</code>目录中的静态资源</p><p>当页面访问api.tianji.com时，请求会被代理到虚拟机中的网关服务。</p><h3 id="_3-3-部署" tabindex="-1"><a class="header-anchor" href="#_3-3-部署" aria-hidden="true">#</a> 3.3.部署</h3><p>在企业开发中，微服务项目非常庞大，往往有十几个，甚至数十个，数百个微服务。而这些微服务也会交给不同的开发组去完成开发。你可能只参与其中的某几个微服务开发，那么问题来了：</p><p>如果我的微服务需要访问其它微服务怎么办？</p><p>难道说我需要把所有的微服务都部署到自己的电脑吗？</p><p>很明显，这样做是不现实的。第一，不是所有的代码你都有访问的权限；第二，你的电脑可能无法运行这数十、数百的微服务。</p><p>因此，公司往往会给我们部署一套开发环境，在上面运行那些经过测试的可部署的微服务。而多数情况下我们是面向接口编程，功能自测完成后再与公司开发环境的其它微服务联调。</p><p>为了模拟真实环境，我们在虚拟机中已经提供了一套持续集成的开发环境，代码一旦自测完成，push到Git私服后即可自动编译部署。</p><p>而开发我们负责的微服务时，则需要在本地启动运行部分微服务。</p><h4 id="_3-3-1-虚拟机部署" tabindex="-1"><a class="header-anchor" href="#_3-3-1-虚拟机部署" aria-hidden="true">#</a> 3.3.1.虚拟机部署</h4><p>项目已经基于Jenkins实现了持续集成，每当我们push代码时，就会触发项目完成自动编译和打包。而需要运行某个微服务时，我们只需要经过两步：</p>',14),Gs={href:"http://jenkins.tianji.com",target:"_blank",rel:"noopener noreferrer"},Us=n("li",null,"第二步，点击对应微服务后面的运行按钮",-1),Cs=e('<figure><img src="'+x+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>构建过程中，可以在页面左侧看到构建进度，如果没有说明构建已经结束了（你的机器速度太快了！）：</p><figure><img src="'+j+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>完成后，点击对应的微服务名称【例如tj-gateway】，即可进入构建任务的详情页面，在页面左侧可以看到构建历史：</p><figure><img src="'+z+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>其中#1代表第一次构建，点击前面的√即可查看构建日志：</p><figure><img src="'+w+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>看到上面的日志，说明构建已经成功，容器也成功运行了。</p><p>我们需要分别启动几个开发完成的微服务：</p><ul><li>tj-user</li><li>tj-auth</li><li>tj-gateway</li><li>tj-course</li><li>tj-media</li><li>tj-search</li><li>tj-exam</li><li>tj-data</li></ul><p>此时访问Nacos控制台，可以看到微服务都成功注册了：</p><figure><img src="'+q+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>',12),Ss={href:"http://www.tianji.com",target:"_blank",rel:"noopener noreferrer"},Ms=n("figure",null,[n("img",{src:E,alt:"img",tabindex:"0",loading:"lazy"}),n("figcaption",null,"img")],-1),$s={href:"http://manage.tianji.com",target:"_blank",rel:"noopener noreferrer"},As=n("figure",null,[n("img",{src:B,alt:"img",tabindex:"0",loading:"lazy"}),n("figcaption",null,"img")],-1),Is=n("p",null,"如果想要知道微服务具备哪些API接口，可以访问网关中的swagger页面，路径如下：",-1),Ns={href:"http://api.tianji.com/doc.html",target:"_blank",rel:"noopener noreferrer"},Os=n("figure",null,[n("img",{src:R,alt:"img",tabindex:"0",loading:"lazy"}),n("figcaption",null,"img")],-1),Hs=n("p",null,"其中可以查看所有微服务的接口信息",-1),Ps=n("h4",{id:"_3-3-2-本地部署",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-3-2-本地部署","aria-hidden":"true"},"#"),s(" 3.3.2.本地部署")],-1),Vs=n("p",null,"对于需要开发功能的微服务，则需要在本地部署，不过首先我们要把代码拉取下来。",-1),Fs={href:"http://git.tianji.com/tjxt/tianji",target:"_blank",rel:"noopener noreferrer"},Ts=e('<figure><img src="'+D+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>利用命令将代码克隆到你的IDEA工作空间中：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone http://192.168.150.101:10880/tjxt/tianji.git <span class="token parameter variable">-b</span> lesson-init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+G+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>注意，开发时需要使用dev分支，因此我们需要创建新的分支：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 进入项目目录</span>
<span class="token builtin class-name">cd</span> tianji
<span class="token comment"># 创建新的分支</span>
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了方便我们教学，目前所有微服务代码都聚合在了一个Project中，如图：</p><figure><img src="`+U+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>在默认情况下，微服务启用的是dev配置，如果要在本地运行，需要设置profile为local：</p><figure><img src="'+C+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>可以在本地启动<code>ExamApplication</code>，然后我们去Nacos控制台查看exam-service，可以看到有两个实例，分别是虚拟机IP和宿主机IP：</p><figure><img src="'+S+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_4-修复bug" tabindex="-1"><a class="header-anchor" href="#_4-修复bug" aria-hidden="true">#</a> 4.修复BUG</h2><p>在刚刚进入项目组后，一般不会布置开发任务，而是先熟悉项目代码。为了帮助大家熟悉整个项目，我们预留了一个BUG，让大家在修复BUG的过程中熟悉项目代码。</p><p>一般修复BUG的过程是这样的：</p><ul><li>熟悉项目</li><li>阅读源码</li><li>分析解决</li><li>测试部署</li></ul><p>因此，解决BUG的过程，就是熟悉项目的过程。</p><h3 id="_4-1-熟悉项目" tabindex="-1"><a class="header-anchor" href="#_4-1-熟悉项目" aria-hidden="true">#</a> 4.1.熟悉项目</h3><p>熟悉项目的第一步是熟悉项目的结构、用到的技术、编码的一些规范等。</p><h4 id="_4-1-1-项目结构" tabindex="-1"><a class="header-anchor" href="#_4-1-1-项目结构" aria-hidden="true">#</a> 4.1.1.项目结构</h4><p>我们先来看看项目结构，目前企业微服务开发项目结构有两种模式：</p><ul><li>1）项目下的每一个微服务，都创建为一个独立的Project，有独立的Git仓库，尽可能降低耦合</li><li>2）项目创建一个Project，项目下的每一个微服务都是一个Module，方便管理</li></ul><p>方案一更适合于大型项目，架构更为复杂，管理和维护成本都比较高；</p><p>方案二更适合中小型项目，架构更为简单，管理和维护成本都比较低；</p><p>天机学堂采用的正是第二种模式，结构如图：</p><figure><img src="'+M+'" alt="image-20230715192901334" tabindex="0" loading="lazy"><figcaption>image-20230715192901334</figcaption></figure><p>对应到我们项目中每个模块及功能如下：</p><figure><img src="'+$+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>当我们要创建新的微服务时，也必须以<code>tjxt</code>为父工程，创建一个子<code>module</code>. 例如交易微服务：</p><figure><img src="'+A+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>微服务<code>module</code>中如果有对外暴露的Feign接口，需要定义到<code>tj-api</code>模块中：</p><figure><img src="'+I+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="_4-1-2-实体类规范" tabindex="-1"><a class="header-anchor" href="#_4-1-2-实体类规范" aria-hidden="true">#</a> 4.1.2.实体类规范</h4><p>在天机学堂项目中，所有实体类按照所处领域不同，划分为4种不同类型：</p><ul><li>DTO：数据传输对象，在客户端与服务端间传递数据，例如微服务之间的请求参数和返回值、前端提交的表单</li><li>PO：持久层对象，与数据库表一一对应，作为查询数据库时的返回值</li><li>VO：视图对象，返回给前端用于封装页面展示的数据</li><li>QUERY：查询对象，一般是用于封装复杂查询条件</li></ul><p>例如交易服务：</p><figure><img src="'+N+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="_4-1-3-依赖注入" tabindex="-1"><a class="header-anchor" href="#_4-1-3-依赖注入" aria-hidden="true">#</a> 4.1.3.依赖注入</h4><p>Spring提供了依赖注入的功能，方便我们管理和使用各种Bean，常见的方式有：</p><ul><li>字段注入（<code>@Autowired</code> 或 <code>@Resource</code>）</li><li>构造函数注入</li><li>set方法注入</li></ul><p>在以往代码中，我们经常利用Spring提供的<code>@Autowired</code>注解来实现依赖注入：</p><figure><img src="'+O+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>不过，这种模式是不被Spring推荐的，Spring推荐的是基于构造函数注入，像这样：</p><figure><img src="'+H+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>但是，如果需要注入的属性较多，构造函数就会非常臃肿，代码写起来也比较麻烦。</p><p>好在Lombok提供了一个注解<code>@RequiredArgsConstructor</code>，可以帮我们生成构造函数，简化代码：</p><figure><img src="'+P+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这样一来，不管需要注入的字段再多，我们也只需要一个注解搞定：</p><figure><img src="'+V+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="_4-1-4-异常处理" tabindex="-1"><a class="header-anchor" href="#_4-1-4-异常处理" aria-hidden="true">#</a> 4.1.4.异常处理</h4><p>在项目运行过程中，或者业务代码流程中，可能会出现各种类型异常，为了加以区分，我们定义了一些自定义异常对应不同场景：</p><figure><img src="'+F+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>在开发业务的过程中，如果出现对应类型的问题，应该优先使用这些自定义异常。</p><p>当微服务抛出这些异常时，需要一个统一的异常处理类，同样在<code>tj-common</code>模块中定义了：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestControllerAdvice</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonExceptionAdvice</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">DbException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">handleDbException</span><span class="token punctuation">(</span><span class="token class-name">DbException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;mysql数据库操作异常 -&gt; &quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">processResponse</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">CommonException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">handleBadRequestException</span><span class="token punctuation">(</span><span class="token class-name">CommonException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;自定义异常 -&gt; {} , 状态码：{}, 异常原因：{}  &quot;</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">processResponse</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">FeignException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">handleFeignException</span><span class="token punctuation">(</span><span class="token class-name">FeignException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;feign远程调用异常 -&gt; &quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">processResponse</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">contentUTF8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">handleMethodArgumentNotValidException</span><span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> msg <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAllErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">ObjectError</span><span class="token operator">::</span><span class="token function">getDefaultMessage</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">&quot;|&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;请求参数校验异常 -&gt; {}&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">processResponse</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">BindException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">handleBindException</span><span class="token punctuation">(</span><span class="token class-name">BindException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;请求参数绑定异常 -&gt;BindException， {}&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">processResponse</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token string">&quot;请求参数格式错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">NestedServletException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">handleNestedServletException</span><span class="token punctuation">(</span><span class="token class-name">NestedServletException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;参数异常 -&gt; NestedServletException，{}&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">processResponse</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token string">&quot;请求参数异常&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">ConstraintViolationException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">handViolationException</span><span class="token punctuation">(</span><span class="token class-name">ConstraintViolationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;请求参数异常 -&gt; ConstraintViolationException, {}&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token function">processResponse</span><span class="token punctuation">(</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">OK</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">BAD_REQUEST</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                e<span class="token punctuation">.</span><span class="token function">getConstraintViolations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">ConstraintViolation</span><span class="token operator">::</span><span class="token function">getMessage</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">&quot;|&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">handleRuntimeException</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;其他异常 uri : {} -&gt; &quot;</span><span class="token punctuation">,</span> <span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">processResponse</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">&quot;服务器内部异常&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">processResponse</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">,</span> <span class="token keyword">int</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 1.标记响应异常已处理（避免重复处理）</span>
        <span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">setResponseHeader</span><span class="token punctuation">(</span><span class="token class-name">Constant</span><span class="token punctuation">.</span><span class="token constant">BODY_PROCESSED_MARK_HEADER</span><span class="token punctuation">,</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2.如果是网关请求，http状态码修改为200返回，前端基于业务状态码code来判断状态</span>
        <span class="token comment">// 如果是微服务请求，http状态码基于异常原样返回，微服务自己做fallback处理</span>
        <span class="token keyword">return</span> <span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">isGatewayRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span>
                <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">requestId</span><span class="token punctuation">(</span><span class="token constant">MDC</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Constant</span><span class="token punctuation">.</span><span class="token constant">REQUEST_ID_HEADER</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token operator">:</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-1-5-配置文件" tabindex="-1"><a class="header-anchor" href="#_4-1-5-配置文件" aria-hidden="true">#</a> 4.1.5.配置文件</h4><p>SpringBoot的配置文件支持多环境配置，在天机学堂中也基于不同环境有不同配置文件：</p><figure><img src="`+T+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>说明：</p><table><thead><tr><th style="text-align:center;"><strong>文件</strong></th><th style="text-align:center;"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:center;">bootstrap.yml</td><td style="text-align:center;">通用配置属性，包含服务名、端口、日志等等各环境通用信息</td></tr><tr><td style="text-align:center;">bootstrap-dev.yml</td><td style="text-align:center;">线上开发环境配置属性，虚拟机中部署使用</td></tr><tr><td style="text-align:center;">bootstrap-local.yml</td><td style="text-align:center;">本地开发环境配置属性，本地开发、测试、部署使用</td></tr></tbody></table><p>项目中的很多共性的配置都放到了Nacos配置中心管理：</p><figure><img src="'+L+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>例如<code>mybatis</code>、<code>mq</code>、<code>redis</code>等，都有对应的<code>shared-xxx.yaml</code>共享配置文件。在微服务中如果用到了相关技术，无需重复配置，只要引用上述共享配置即可：</p><figure><img src="'+J+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h5 id="_4-1-5-1-bootstrap-yml" tabindex="-1"><a class="header-anchor" href="#_4-1-5-1-bootstrap-yml" aria-hidden="true">#</a> 4.1.5.1.bootstrap.yml</h5><p>我们来看看<code>bootstrap.yml</code>文件的基本内容：</p><figure><img src="'+K+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>接下来，我们就分别看看每一个共享的配置文件内容。</p><h5 id="_4-1-5-2-shared-spring-yml" tabindex="-1"><a class="header-anchor" href="#_4-1-5-2-shared-spring-yml" aria-hidden="true">#</a> 4.1.5.2.shared-spring.yml</h5><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">jackson</span><span class="token punctuation">:</span>
    <span class="token key atrule">default-property-inclusion</span><span class="token punctuation">:</span> non_null <span class="token comment"># 忽略json处理时的空值字段</span>
  <span class="token key atrule">main</span><span class="token punctuation">:</span>
    <span class="token key atrule">allow-bean-definition-overriding</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 允许同名Bean重复定义</span>
  <span class="token key atrule">mvc</span><span class="token punctuation">:</span>
    <span class="token key atrule">pathmatch</span><span class="token punctuation">:</span>
      <span class="token comment"># 解决异常：swagger Failed to start bean &#39;documentationPluginsBootstrapper&#39;; nested exception is java.lang.NullPointerException</span>
      <span class="token comment"># 因为Springfox使用的路径匹配是基于AntPathMatcher的，而Spring Boot 2.6.X使用的是PathPatternMatcher</span>
      <span class="token key atrule">matching-strategy</span><span class="token punctuation">:</span> ant_path_matcher
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-1-5-3-shared-mybatis-yaml" tabindex="-1"><a class="header-anchor" href="#_4-1-5-3-shared-mybatis-yaml" aria-hidden="true">#</a> 4.1.5.3.shared-mybatis.yaml</h5><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>
  <span class="token key atrule">configuration</span><span class="token punctuation">:</span> <span class="token comment"># 默认的枚举处理器</span>
    <span class="token key atrule">default-enum-type-handler</span><span class="token punctuation">:</span> com.baomidou.mybatisplus.core.handlers.MybatisEnumTypeHandler
  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>
    <span class="token key atrule">field-strategy</span><span class="token punctuation">:</span> <span class="token number">0</span> 
    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>
      <span class="token key atrule">logic-delete-field</span><span class="token punctuation">:</span> deleted <span class="token comment"># mybatis逻辑删除字段</span>
      <span class="token key atrule">id-type</span><span class="token punctuation">:</span> assign_id <span class="token comment"># 默认的id策略是雪花算法id</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver <span class="token comment"># 数据库驱动</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//$<span class="token punctuation">{</span>tj.jdbc.host<span class="token punctuation">:</span>192.168.150.101<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>tj.jdbc.port<span class="token punctuation">:</span><span class="token number">3306</span><span class="token punctuation">}</span>/$<span class="token punctuation">{</span>tj.jdbc.database<span class="token punctuation">}</span><span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>tj.jdbc.username<span class="token punctuation">:</span>root<span class="token punctuation">}</span>
    <span class="token key atrule">password</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>tj.jdbc.password<span class="token punctuation">:</span><span class="token number">123</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意到这里把mybatis的datasource都配置了，不过由于jdbc连接时的数据库ip、端口，数据库名、用户名、密码是不确定的，这里做了参数映射：</p><table><thead><tr><th style="text-align:center;"><strong>参数名</strong></th><th style="text-align:center;"><strong>描述</strong></th><th style="text-align:center;"><strong>默认值</strong></th></tr></thead><tbody><tr><td style="text-align:center;">tj.jdbc.host</td><td style="text-align:center;">主机名</td><td style="text-align:center;">192.168.150.101，也就是虚拟机ip</td></tr><tr><td style="text-align:center;">tj.jdbc.port</td><td style="text-align:center;">数据库端口</td><td style="text-align:center;">3306</td></tr><tr><td style="text-align:center;">tj.jdbc.database</td><td style="text-align:center;">数据库database名称</td><td style="text-align:center;">无</td></tr><tr><td style="text-align:center;">tj.jdbc.username</td><td style="text-align:center;">数据库用户名</td><td style="text-align:center;">root</td></tr><tr><td style="text-align:center;">tj.jdbc.password</td><td style="text-align:center;">数据库密码</td><td style="text-align:center;">123</td></tr></tbody></table><p>除了<code>tj.jdbc.database</code>外，其它参数都有默认值，在没有配置的情况下会按照默认值来配置，也可以按照参数名来自定义这些参数值。其中<code>tj.jdbc.database</code>是必须自定义的值，例如在交易服务中：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">tj</span><span class="token punctuation">:</span>
  <span class="token key atrule">jdbc</span><span class="token punctuation">:</span>
    <span class="token key atrule">database</span><span class="token punctuation">:</span> tj_trade
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-1-5-4-shared-mq-yaml" tabindex="-1"><a class="header-anchor" href="#_4-1-5-4-shared-mq-yaml" aria-hidden="true">#</a> 4.1.5.4.shared-mq.yaml</h5><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>tj.mq.host<span class="token punctuation">:</span>192.168.150.101<span class="token punctuation">}</span> <span class="token comment"># mq的IP</span>
    <span class="token key atrule">port</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>tj.mq.port<span class="token punctuation">:</span><span class="token number">5672</span><span class="token punctuation">}</span>
    <span class="token key atrule">virtual-host</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>tj.mq.vhost<span class="token punctuation">:</span>/tjxt<span class="token punctuation">}</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>tj.mq.username<span class="token punctuation">:</span>tjxt<span class="token punctuation">}</span>
    <span class="token key atrule">password</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>tj.mq.password<span class="token punctuation">:</span><span class="token number">123321</span><span class="token punctuation">}</span>
    <span class="token key atrule">listener</span><span class="token punctuation">:</span>
      <span class="token key atrule">simple</span><span class="token punctuation">:</span>
        <span class="token key atrule">retry</span><span class="token punctuation">:</span>
          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>tj.mq.listener.retry.enable<span class="token punctuation">:</span><span class="token boolean important">true</span><span class="token punctuation">}</span> <span class="token comment"># 开启消费者失败重试</span>
          <span class="token key atrule">initial-interval</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>tj.mq.listener.retry.interval<span class="token punctuation">:</span>1000ms<span class="token punctuation">}</span> <span class="token comment"># 初始的失败等待时长为1秒</span>
          <span class="token key atrule">multiplier</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>tj.mq.listener.retry.multiplier<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span> <span class="token comment"># 失败的等待时长倍数，下次等待时长 = multiplier * last-interval</span>
          <span class="token key atrule">max-attempts</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>tj.mq.listener.retry.max<span class="token punctuation">-</span>attempts<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">}</span> <span class="token comment"># 最大重试次数</span>
          <span class="token key atrule">stateless</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>tj.mq.listener.retry.stateless<span class="token punctuation">:</span><span class="token boolean important">true</span><span class="token punctuation">}</span> <span class="token comment"># true无状态；false有状态。如果业务中包含事务，这里改为false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里配置了mq的基本配置，例如地址、端口等，默认就是tjxt的地址，不需要修改。另外还配置类消费者的失败重试机制，如有需要可以按需修改。</p><h5 id="_4-1-5-5-shared-redis-yaml" tabindex="-1"><a class="header-anchor" href="#_4-1-5-5-shared-redis-yaml" aria-hidden="true">#</a> 4.1.5.5.shared-redis.yaml</h5><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>tj.redis.host<span class="token punctuation">:</span>192.168.150.101<span class="token punctuation">}</span>
    <span class="token key atrule">password</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>tj.redis.password<span class="token punctuation">:</span><span class="token number">123321</span><span class="token punctuation">}</span>
    <span class="token key atrule">lettuce</span><span class="token punctuation">:</span>
      <span class="token key atrule">pool</span><span class="token punctuation">:</span>
        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>tj.redis.pool.max<span class="token punctuation">-</span>active<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">}</span>
        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>tj.redis.pool.max<span class="token punctuation">-</span>idle<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">}</span>
        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>tj.redis.pool.min<span class="token punctuation">-</span>idle<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span>
        <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>tj.redis.pool.max<span class="token punctuation">-</span>wait<span class="token punctuation">:</span><span class="token number">300</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意配置了Redis的基本地址和连接池配置，省去了我们大部分的工作</p><h5 id="_4-1-5-6-shared-feign-yaml" tabindex="-1"><a class="header-anchor" href="#_4-1-5-6-shared-feign-yaml" aria-hidden="true">#</a> 4.1.5.6.shared-feign.yaml</h5><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">feign</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span>
      <span class="token key atrule">default</span><span class="token punctuation">:</span> <span class="token comment"># default全局的配置</span>
        <span class="token key atrule">loggerLevel</span><span class="token punctuation">:</span> BASIC <span class="token comment"># 日志级别，BASIC就是基本的请求和响应信息</span>
  <span class="token key atrule">httpclient</span><span class="token punctuation">:</span>
    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 开启feign对HttpClient的支持</span>
    <span class="token key atrule">max-connections</span><span class="token punctuation">:</span> <span class="token number">200</span> <span class="token comment"># 最大的连接数</span>
    <span class="token key atrule">max-connections-per-route</span><span class="token punctuation">:</span> <span class="token number">50</span> <span class="token comment"># 每个路径的最大连接数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里配置了默认的Feign日志级别以及连接池配置，一般不需要修改。</p><h5 id="_4-1-5-7-shared-xxljob-yaml" tabindex="-1"><a class="header-anchor" href="#_4-1-5-7-shared-xxljob-yaml" aria-hidden="true">#</a> 4.1.5.7.shared-xxljob.yaml</h5><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">tj</span><span class="token punctuation">:</span>
  <span class="token key atrule">xxl-job</span><span class="token punctuation">:</span>
    <span class="token key atrule">access-token</span><span class="token punctuation">:</span> tianji
    <span class="token key atrule">admin</span><span class="token punctuation">:</span>
      <span class="token key atrule">address</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//192.168.150.101<span class="token punctuation">:</span>8880/xxl<span class="token punctuation">-</span>job<span class="token punctuation">-</span>admin
    <span class="token key atrule">executor</span><span class="token punctuation">:</span>
      <span class="token key atrule">appname</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span>
      <span class="token key atrule">log-retention-days</span><span class="token punctuation">:</span> <span class="token number">10</span>
      <span class="token key atrule">logPath</span><span class="token punctuation">:</span> job/$<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里配置了xxl-job组件的地址等信息，一般不需要修改。</p><h3 id="_4-2-阅读源码" tabindex="-1"><a class="header-anchor" href="#_4-2-阅读源码" aria-hidden="true">#</a> 4.2.阅读源码</h3><p>阅读源码也不是闷头乱找，而是有一定的技巧。一般阅读源码的流程如下：</p><figure><img src="`+Q+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="_4-2-1-bug重现" tabindex="-1"><a class="header-anchor" href="#_4-2-1-bug重现" aria-hidden="true">#</a> 4.2.1.BUG重现</h4><p>首先，我们来看还原一下BUG现场。</p><p>我们用杰克用户登录（jack/123），删除一个订单，发现删除成功：</p><figure><img src="'+X+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>我们切换到萝丝用户登录（rose/123456），再次删除一个订单：</p><figure><img src="'+W+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>发现删除失败，这是什么情况？？</p><h4 id="_4-2-2-理清请求链路" tabindex="-1"><a class="header-anchor" href="#_4-2-2-理清请求链路" aria-hidden="true">#</a> 4.2.2.理清请求链路</h4><p>如果是我们自己写的代码，肯定很容易找到业务入口、整个业务线路。但现在我们是接手他人项目，所以只能通过其它途径来梳理业务：</p><ul><li>1）如果开发业务的同事还在，直接与开发该业务的同事交流</li><li>2）如果开发者已离职，可以查看相关接口文档</li><li>3）如果没有文档，也可以查看前端请求，顺藤摸瓜</li></ul><p>此处由于我们没有人可以交流，只能通过查看前端请求来分析了。经过查看，页面删除订单的请求如下：</p><figure><img src="'+Y+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>按照之前我们的环境部署方案，api.tianji.com这个域名会被解析到<code>192.168.150.101</code>这个地址，然后被Nginx反向代理到网关微服务。</p><p>而网关则会根据请求路径和路由规则，把请求再路由到具体微服务。这里请求路径以<code>/ts</code>开头，对应的微服务是<code>trade-service</code>，也就是交易微服务。</p><p>这样，整个请求链路就比较清楚了：</p><figure><img src="'+Z+'" alt="image-20230715193134750" tabindex="0" loading="lazy"><figcaption>image-20230715193134750</figcaption></figure><p>找到了具体的微服务，接下来，我们就进入微服务，查看对应源码，找出问题即可。</p><p>请求到达交易服务后的路径是<code> ``/orders/{id}</code>，对应的<code>controller</code>是：</p><figure><img src="'+nn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>跟入service代码：</p><figure><img src="'+sn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这样就找到了BUG发生的代码块了，现在只需要通过DEBUG调试来发现问题产生的原因就可以了。</p><h3 id="_4-3-远程调试" tabindex="-1"><a class="header-anchor" href="#_4-3-远程调试" aria-hidden="true">#</a> 4.3.远程调试</h3><p>由于交易服务属于开发环境已经部署的服务，我们无法在本地调试，这在今后的开发中会经常碰到。遇到这样的情况我们就需要利用IDEA提供的远程调试功能。</p><h4 id="_4-3-1-本地配置" tabindex="-1"><a class="header-anchor" href="#_4-3-1-本地配置" aria-hidden="true">#</a> 4.3.1.本地配置</h4><p>首先，我们需要对本地启动项做一些配置：</p><figure><img src="'+an+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>然后添加一个新的启动项：</p><figure><img src="'+tn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>在新建的<code>Configuration</code>中填写信息：</p><figure><img src="'+en+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>此时，就可以在启动项中看到我们配置的远程调试项目了：</p><figure><img src="'+pn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="_4-3-2-远程调试的部署脚本" tabindex="-1"><a class="header-anchor" href="#_4-3-2-远程调试的部署脚本" aria-hidden="true">#</a> 4.3.2.远程调试的部署脚本</h4><p>仅仅本地配置还不够，我们还需要在虚拟机中部署时，添加一段配置到部署脚本中，这段配置IDEA已经提供给我们了：</p><figure><img src="'+on+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>我们需要在启动时加上这段参数，像这样：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-jar</span> <span class="token parameter variable">-agentlib:jdwp</span><span class="token operator">=</span>transport<span class="token operator">=</span>dt_socket,server<span class="token operator">=</span>y,suspend<span class="token operator">=</span>n,address<span class="token operator">=</span>*:5005 xx.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不过我们的项目都是基于Jenkins来部署的，因此需要修改Jenkins部署脚本。部署脚本我也已经帮大家配置好了，我们直接运行即可：</p><figure><img src="`+cn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>部署完成后，可以看到<code>tj-trade</code>多暴露了一个5005端口，就是远程调试的端口了：</p><figure><img src="'+ln+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="_4-3-3-开始调试" tabindex="-1"><a class="header-anchor" href="#_4-3-3-开始调试" aria-hidden="true">#</a> 4.3.3.开始调试</h4><p>现在，我们就可以在需要的地方打上断点，然后DEBUG运行了：</p><figure><img src="'+un+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>访问页面请求，就可以进入DEBUG断点了。</p><p>经过断点，可以发现断点所属用户判断出现问题的原因了：</p><figure><img src="'+rn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>我们在判断用户id时使用了<code>!=</code>来判断，由于id是Long 类型，因此判断的是id对应的地址而不是值，所以萝丝用户的userId虽然都是129，但地址不同，判断自然不成立。</p><p>但问题来了，为什么杰克用户就可以删除成功呢？</p><p>再次以杰克发起请求，进入断点：</p><figure><img src="'+dn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>可以发现杰克的id是2，两个userId的地址是一样的！！</p><p>为什么userId为2的时候判断相等可以成立，而userId是129的时候判断相等不成立呢？</p><p>这是因为userId是Long类型包装类。包装类为了提高性能，减少内存占用，采用了享元模式，提前将-128~127之间的Long包装类提前创建出来，共享使用。</p><p>因此只要大小范围在者之间的数字，只要值相同，使用的都是享元模式中提供的同一个对象。杰克的id是2，恰好在范围内；而萝丝的id是129，刚好超过了这个范围。这就导致了杰克可以删除自己订单，而萝丝无法删除的现象。</p><p>这就说明，我们此处判断userId是否相等的方式是错误的，不能基于<code>!=</code>来判断，而是应该比较值，使用equals。</p><h3 id="_4-4-修复bug" tabindex="-1"><a class="header-anchor" href="#_4-4-修复bug" aria-hidden="true">#</a> 4.4.修复BUG</h3><p>既然找到了BUG产生的原因，接下来就可以来修复BUG了。</p><h4 id="_4-4-1-分支管理" tabindex="-1"><a class="header-anchor" href="#_4-4-1-分支管理" aria-hidden="true">#</a> 4.4.1.分支管理</h4><p>一般我们不建议大家直接在Dev分支直接修改代码。在企业中都有一套分支管理机制，称为GitFlow，大概如图所示：</p><figure><img src="'+gn+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>说明：</p><ul><li><strong>Master</strong>：主分支，用于正式发布的分支。不可直接基于该分支提交。只有经过严格审核测试后的Develop或Hotfix分支可以合并到master</li><li><strong>Develop</strong>：开发分支，从Master创建得来。功能开发的基础分支。</li><li><strong>Feature</strong>：功能分支，从Develop分支创建得来。开发测试完成后会合并到Develop分支。</li><li><strong>Release</strong>：预发布分支，当Develop上积累了一定的功能特性后，从Develop分支创建一个Release分支，做一些发布前的准备工作，不可开发功能。最终合并到Master分支和Develop分支。</li><li><strong>Hotfix</strong>：热修复分支，当Master出现紧急BUG时，基于Master临时创建的分支，修复完成后合并到Develop和Master分支。</li></ul><p>在咱们项目中，master分支用来给大家提供完整版本代码了，而lesson-init分支作为初始化分支。因此一般不使用master分支，而是把lesson-init当做master分支来用。开发用的dev分支就等于GitFlow中的Develop分支。</p><p>因此，这里建议大家在dev分支基础上创建一个Hotfix分支，用以修改BUG，可以通过命令来创建该分支：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> hotfix-delete-order-error
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+kn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="_4-4-2-修复bug" tabindex="-1"><a class="header-anchor" href="#_4-4-2-修复bug" aria-hidden="true">#</a> 4.4.2.修复BUG</h4><p>接下来，就可以修复BUG了，其实非常简单，不要使用<code>!=</code>判断，而是改用<code>equals</code>即可：</p><figure><img src="'+mn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>接下来，提交代码：</p><figure><img src="'+bn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>然后切换会Dev分支，并将hotfix-delete-order-error分支合并到dev分支，然后删除：</p><figure><img src="'+fn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_4-5-测试部署" tabindex="-1"><a class="header-anchor" href="#_4-5-测试部署" aria-hidden="true">#</a> 4.5.测试部署</h3><p>一般的测试步骤是这样的：</p><figure><img src="'+hn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>由于我们这里的修改比较简单，这里就不做单元测试了。</p><h4 id="_4-5-1-接口测试" tabindex="-1"><a class="header-anchor" href="#_4-5-1-接口测试" aria-hidden="true">#</a> 4.5.1.接口测试</h4><p>我们首先基于swagger做本地接口测试，在本地启动tj-trade项目，然后访问swagger页面：</p>',172),Ls={href:"http://localhost:8088/doc.html",target:"_blank",rel:"noopener noreferrer"},Js=e('<figure><img src="'+vn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>由于删除订单时需要对登录用户做校验，因此需要先设置用户id的全局参数：</p><p><img src="'+_n+'" alt="img" loading="lazy"><img src="'+yn+'" alt="img" loading="lazy"></p><p>微服务获取用户是基于请求头来传递的，因此我们设置全局参数时添加一个user-info的请求头参数即可。</p><p>然后<strong>刷新页面</strong>，来再次找到删除订单接口，进行调试，发现当用户id不对时，删除会失败：</p><figure><img src="'+xn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>当用户id正确时，删除成功：</p><figure><img src="'+jn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="_4-5-2-组件测试" tabindex="-1"><a class="header-anchor" href="#_4-5-2-组件测试" aria-hidden="true">#</a> 4.5.2.组件测试</h4><p>接下来让我们的服务与网关联调，再次测试。</p><p>不过问题来了，现在我们在本地启动了交易服务，而虚拟机中也启动了交易服务：</p><figure><img src="'+zn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>当我们请求网关时，如何保证请求一定进入本地启动的服务呢？</p><p>这里有两种办法：</p><ul><li>关停虚拟机中启动的交易服务</li><li>将虚拟机中启动的交易服务权重设置为0</li></ul><p>权重设置：</p><figure><img src="'+wn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>接下来，通过浏览器访问前端页面，然后点击删除订单测试即可。</p><h4 id="_4-5-3-部署联调" tabindex="-1"><a class="header-anchor" href="#_4-5-3-部署联调" aria-hidden="true">#</a> 4.5.3.部署联调</h4><p>最后，测试没有问题，我们就可以将代码部署到开发环境去了。</p><p>我们在Jenkins中配置了web钩子，代码推送后自动触发构建。不过需要注意的是，默认情况下我们推送的代码不管是哪个分支都会触发构建，而且构建默认是基于lesson-init分支，需要重新配置。</p><p>我们找到Jenkins控制台中的tjxt-dev-build任务：</p><figure><img src="'+qn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>修改其中的配置。</p><p>第一个是哪些分支变化以后触发构建：</p><figure><img src="'+En+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>第二个是构建时基于哪个分支构建：</p><figure><img src="'+Bn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>然后选择提交dev分支，并push到远端仓库：</p><figure><img src="'+Rn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="'+Dn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>然后到控制台，重新构建<code>tj-trade</code>服务：</p><figure><img src="'+Gn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>将本地服务停止，修改nacos中的虚拟机中的tj-trade实例权重为1：</p><figure><img src="'+Un+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>再次测试即可。</p>',36);function Ks(Qs,Xs){const a=i("ExternalLinkIcon");return o(),c("div",null,[Sn,n("p",null,[s("在浏览器中输入对应域名，即可查看到对应服务，例如Git私服地址："),n("a",Mn,[s("http://git.tianji.com"),t(a)])]),$n,An,n("table",null,[In,n("tbody",null,[n("tr",null,[Nn,n("td",On,[n("a",Hn,[s("git.tianji.com"),t(a)])]),Pn,Vn]),n("tr",null,[Fn,n("td",Tn,[n("a",Ln,[s("jenkins.tianji.com"),t(a)])]),Jn,Kn]),n("tr",null,[Qn,n("td",Xn,[n("a",Wn,[s("mq.tianji.com"),t(a)])]),Yn,Zn]),n("tr",null,[ns,n("td",ss,[n("a",as,[s("nacos.tianji.com"),t(a)])]),ts,es]),n("tr",null,[ps,n("td",is,[n("a",os,[s("xxljob.tianji.com"),t(a)])]),cs,ls]),n("tr",null,[us,n("td",rs,[n("a",ds,[s("es.tianji.com"),t(a)])]),gs,ks]),n("tr",null,[ms,n("td",bs,[n("a",fs,[s("api.tianji.com"),t(a)])]),hs,vs]),n("tr",null,[_s,n("td",ys,[n("a",xs,[s("www.tianji.com"),t(a)])]),js,zs]),n("tr",null,[ws,n("td",qs,[n("a",Es,[s("manage.tianji.com"),t(a)])]),Bs,Rs])])]),Ds,n("ul",null,[n("li",null,[s("第一步，访问jenkins控制台："),n("a",Gs,[s("http://jenkins.tianji.com"),t(a)]),s(" (账号：root/123)")]),Us]),Cs,n("p",null,[s("此时访问 "),n("a",Ss,[s("http://www.tianji.com"),t(a)]),s(" 即可看到用户端页面：")]),Ms,n("p",null,[s("此时访问 "),n("a",$s,[s("http://manage.tianji.com"),t(a)]),s(" 即可看到管理端页面：")]),As,Is,n("p",null,[n("a",Ns,[s("http://api.tianji.com/doc.html"),t(a)])]),Os,Hs,Ps,Vs,n("p",null,[s("查看Git私服的代码："),n("a",Fs,[s("http://git.tianji.com/tjxt/tianji"),t(a)]),s(" ：")]),Ts,n("p",null,[n("a",Ls,[s("http://localhost:8088/doc.html"),t(a)]),s(" ，找到删除订单接口：")]),Js])}const Zs=p(Cn,[["render",Ks],["__file","day01-初识项目.html.vue"]]);export{Zs as default};
