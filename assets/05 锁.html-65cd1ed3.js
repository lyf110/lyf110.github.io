import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as s,e}from"./app-5f6064b2.js";const t="/assets/202210141229185-45b88762.jpeg",i="/assets/202210141232430-af52a518.png",p="/assets/202210141253056-dbaa230e.png",o="/assets/202210141305722-d375df43.jpeg",c="/assets/202210141305796-e99f1f39.jpeg",l="/assets/202210141308383-a874f2cd.jpeg",d="/assets/202210141308744-8c729a2d.jpeg",r="/assets/202210141315866-2bc3a97e.jpeg",u="/assets/202210141318142-8bc3002b.jpeg",g="/assets/202210141329478-408ac860.jpeg",h="/assets/202210141332152-90285d92.jpeg",k="/assets/202210141332824-fbff4025.jpeg",f="/assets/202210141442493-bb1e4943.jpeg",_="/assets/202210141442094-26a1253e.jpeg",b="/assets/202210141443506-632687f1.jpeg",m="/assets/202210141443126-787bb51d.jpeg",y="/assets/202210141453002-0012b062.png",E="/assets/202210141453784-5e6155e8.jpeg",x="/assets/202210141454343-05a31a86.jpeg",v="/assets/202210141455198-616f11a1.png",D="/assets/202210141510389-7a74f055.jpeg",L="/assets/202210141510851-d71ad136.jpeg",S="/assets/202210141513063-e1649c63.jpeg",R="/assets/202210141516140-1f61ebb7.jpeg",A="/assets/202210141518534-64326d49.jpeg",w="/assets/202210141518587-f2ef066d.jpeg",I="/assets/202210141519403-e2ff3b2d.jpeg",T="/assets/202210141527100-6c0223d6.jpeg",j="/assets/202210141531565-4c3de012.png",z="/assets/202210141531987-04d59691.jpeg",q="/assets/202210141535110-508f0ead.jpeg",N="/assets/202210141546361-4c44acaa.png",B={},M=e('<h1 id="_5-锁" tabindex="-1"><a class="header-anchor" href="#_5-锁" aria-hidden="true">#</a> 5. 锁</h1><h2 id="_5-1-概述" tabindex="-1"><a class="header-anchor" href="#_5-1-概述" aria-hidden="true">#</a> 5.1 概述</h2><p>锁是计算机协调多个进程或线程并发访问某一资源的机制。在数据库中，除传统的计算资源（CPU、 RAM、I/O）的争用以外，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有 效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个 角度来说，锁对数据库而言显得尤其重要，也更加复杂。</p><p>MySQL中的锁，按照锁的粒度分，分为以下三类：</p><ul><li>全局锁：锁定数据库中的所有表。</li><li>表级锁：每次操作锁住整张表。</li><li>行级锁：每次操作锁住对应的行数据。</li></ul><h2 id="_5-2-全局锁" tabindex="-1"><a class="header-anchor" href="#_5-2-全局锁" aria-hidden="true">#</a> 5.2 全局锁</h2><h3 id="_5-2-1-介绍" tabindex="-1"><a class="header-anchor" href="#_5-2-1-介绍" aria-hidden="true">#</a> 5.2.1 介绍</h3><p>全局锁就是对整个数据库实例加锁，加锁后整个实例就处于只读状态，后续的DML的写语句，DDL语 句，已经更新操作的事务提交语句都将被阻塞。</p><p>其典型的使用场景是做全库的逻辑备份，对所有的表进行锁定，从而获取一致性视图，保证数据的完整 性。</p><p>为什么全库逻辑备份，就需要加全就锁呢？</p><p>A. 我们一起先来分析一下不加全局锁，可能存在的问题。</p><p>假设在数据库中存在这样三张表: tb_stock 库存表，tb_order 订单表，tb_orderlog 订单日 志表。</p><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><p>在进行数据备份时，先备份了tb_stock库存表。</p></li><li><p>然后接下来，在业务系统中，执行了下单操作，扣减库存，生成订单（更新tb_stock表，插入tb_order表）。</p></li><li><p>然后再执行备份 tb_order表的逻辑。</p></li><li><p>业务中执行插入订单日志操作。</p></li><li><p>最后，又备份了tb_orderlog表。</p></li></ul><p>此时备份出来的数据，是存在问题的。因为备份出来的数据，tb_stock表与tb_order表的数据不一 致(有最新操作的订单信息,但是库存数没减)。</p><p>那如何来规避这种问题呢? 此时就可以借助于MySQL的全局锁来解决。</p><p>B. 再来分析一下加了全局锁后的情况</p><figure><img src="'+i+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>对数据库进行进行逻辑备份之前，先对整个数据库加上全局锁，一旦加了全局锁之后，其他的DDL、 DML全部都处于阻塞状态，但是可以执行DQL语句，也就是处于只读状态，而数据备份就是查询操作。 那么数据在进行逻辑备份的过程中，数据库中的数据就是不会发生变化的，这样就保证了数据的一致性 和完整性。</p><h3 id="_5-2-2-语法" tabindex="-1"><a class="header-anchor" href="#_5-2-2-语法" aria-hidden="true">#</a> 5.2.2 语法</h3><h4 id="_1-加全局锁" tabindex="-1"><a class="header-anchor" href="#_1-加全局锁" aria-hidden="true">#</a> 1). 加全局锁</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>flush <span class="token keyword">tables</span> <span class="token keyword">with</span> <span class="token keyword">read</span> <span class="token keyword">lock</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-数据备份" tabindex="-1"><a class="header-anchor" href="#_2-数据备份" aria-hidden="true">#</a> 2). 数据备份</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysqldump <span class="token parameter variable">-uroot</span> –p1234 itcast <span class="token operator">&gt;</span> itcast.sql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>数据备份的相关指令, 在后面MySQL管理章节, 还会详细讲解.</p><h4 id="_3-释放锁" tabindex="-1"><a class="header-anchor" href="#_3-释放锁" aria-hidden="true">#</a> 3). 释放锁</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">unlock</span> <span class="token keyword">tables</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+p+`" alt="image-20221014125259733" tabindex="0" loading="lazy"><figcaption>image-20221014125259733</figcaption></figure><h3 id="_5-2-3-特点" tabindex="-1"><a class="header-anchor" href="#_5-2-3-特点" aria-hidden="true">#</a> 5.2.3 特点</h3><p>数据库中加全局锁，是一个比较重的操作，存在以下问题：</p><ul><li>如果在主库上备份，那么在备份期间都不能执行更新，业务基本上就得停摆。</li><li>如果在从库上备份，那么在备份期间从库不能执行主库同步过来的二进制日志（binlog），会导致主从延迟。</li></ul><p>在InnoDB引擎中，我们可以在备份时加上参数 <code>--single-transaction</code> 参数来完成不加锁的一致性数据备份。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysqldump <span class="token comment">--single-transaction -uroot –p123456 itcast &gt; itcast.sql</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_5-3-表级锁" tabindex="-1"><a class="header-anchor" href="#_5-3-表级锁" aria-hidden="true">#</a> 5.3 表级锁</h2><h3 id="_5-3-1-介绍" tabindex="-1"><a class="header-anchor" href="#_5-3-1-介绍" aria-hidden="true">#</a> 5.3.1 介绍</h3><p>表级锁，每次操作锁住整张表。锁定粒度大，发生锁冲突的概率最高，并发度最低。应用在MyISAM、InnoDB、BDB等存储引擎中。 对于表级锁，主要分为以下三类：</p><ul><li><p>表锁</p></li><li><p>元数据锁（meta data lock，MDL）</p></li><li><p>意向锁</p></li></ul><h3 id="_5-3-2-表锁" tabindex="-1"><a class="header-anchor" href="#_5-3-2-表锁" aria-hidden="true">#</a> 5.3.2 表锁</h3><h4 id="_5-3-2-1-对于表锁-分为两类" tabindex="-1"><a class="header-anchor" href="#_5-3-2-1-对于表锁-分为两类" aria-hidden="true">#</a> 5.3.2.1 对于表锁，分为两类：</h4><ul><li>表共享读锁（read lock）</li><li>表独占写锁（write lock）</li></ul><h4 id="_5-3-2-2-语法" tabindex="-1"><a class="header-anchor" href="#_5-3-2-2-语法" aria-hidden="true">#</a> 5.3.2.2 语法：</h4><ul><li>加锁：lock tables 表名... read/write。</li><li>释放锁：unlock tables / 客户端断开连接 。</li></ul><h4 id="_5-3-2-3-特点" tabindex="-1"><a class="header-anchor" href="#_5-3-2-3-特点" aria-hidden="true">#</a> 5.3.2.3 特点:</h4><h5 id="a-读锁" tabindex="-1"><a class="header-anchor" href="#a-读锁" aria-hidden="true">#</a> A. 读锁</h5><figure><img src="`+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>左侧为客户端一，对指定表加了读锁，不会影响右侧客户端二的读，但是会阻塞右侧客户端的写。</p><p>测试:</p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="b-写锁" tabindex="-1"><a class="header-anchor" href="#b-写锁" aria-hidden="true">#</a> B.写锁</h5><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>左侧为客户端一，对指定表加了写锁，会阻塞右侧客户端的读和写。</p><p>测试:</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>结论: 读锁不会阻塞其他客户端的读，但是会阻塞写。写锁既会阻塞其他客户端的读，又会阻塞其他客户端的写。</p></blockquote><h3 id="_5-3-3-元数据锁" tabindex="-1"><a class="header-anchor" href="#_5-3-3-元数据锁" aria-hidden="true">#</a> 5.3.3 元数据锁</h3><p>meta data lock , 元数据锁，简写MDL。</p><p>MDL加锁过程是系统自动控制，无需显式使用，在访问一张表的时候会自动加上。MDL锁主要作用是维护表元数据的数据一致性，在表上有活动事务的时候，不可以对元数据进行写入操作。<strong>为了避免DML与 DDL冲突，保证读写的正确性。</strong></p><p>这里的元数据，大家可以简单理解为就是一张表的表结构。 也就是说，某一张表涉及到未提交的事务时，是不能够修改这张表的表结构的。</p><p>在MySQL5.5中引入了MDL，当对一张表进行增删改查的时候，加MDL读锁(共享)；当对表结构进行变更操作的时候，加MDL写锁(排他)。</p><p>常见的SQL操作时，所添加的元数据锁：</p><table><thead><tr><th>对应SQL</th><th>锁类型</th><th>说明</th></tr></thead><tbody><tr><td>lock tables xxx read / write</td><td>SHARED_READ_ONLY / SHARED_NO_READ_WRITE</td><td></td></tr><tr><td>select 、select ... lock in share mode</td><td>SHARED_READ</td><td>与SHARED_READ、 SHARED_WRITE兼容，与 EXCLUSIVE互斥</td></tr><tr><td>insert 、update、 delete、select ... for update</td><td>SHARED_WRITE</td><td>与SHARED_READ、 SHARED_WRITE兼容，与 EXCLUSIVE互斥</td></tr><tr><td>alter table ...</td><td>EXCLUSIVE</td><td>与其他的MDL都互斥</td></tr></tbody></table><p>演示：</p><p>当执行SELECT、INSERT、UPDATE、DELETE等语句时，添加的是元数据共享锁（SHARED_READ / SHARED_WRITE），之间是兼容的。</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当执行SELECT语句时，添加的是元数据共享锁（SHARED_READ），会阻塞元数据排他锁（EXCLUSIVE），之间是互斥的。</p><figure><img src="'+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们可以通过下面的SQL，来查看数据库中的元数据锁的情况：</p><p>我们在操作过程中，可以通过上述的SQL语句，来查看元数据锁的加锁情况。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> object_type<span class="token punctuation">,</span>object_schema<span class="token punctuation">,</span>object_name<span class="token punctuation">,</span>lock_type<span class="token punctuation">,</span>lock_duration <span class="token keyword">from</span> performance_schema<span class="token punctuation">.</span>metadata_locks <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_5-3-4-意向锁" tabindex="-1"><a class="header-anchor" href="#_5-3-4-意向锁" aria-hidden="true">#</a> 5.3.4 意向锁</h3><h4 id="_1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-介绍" aria-hidden="true">#</a> 1). 介绍</h4><p>为了避免DML在执行时，加的行锁与表锁的冲突，在InnoDB中引入了意向锁，使得表锁不用检查每行 数据是否加锁，使用意向锁来减少表锁的检查。</p><p>假如没有意向锁，客户端一对表加了行锁后，客户端二如何给表加表锁呢，来通过示意图简单分析一 下：</p><p>首先客户端一，开启一个事务，然后执行DML操作，在执行DML语句时，会对涉及到的行加行锁。</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当客户端二，想对这张表加表锁时，会检查当前表是否有对应的行锁，如果没有，则添加表锁，此时就 会从第一行数据，检查到最后一行数据，效率较低。</p><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>有了意向锁之后 :</p><p>客户端一，在执行DML操作时，会对涉及的行加行锁，同时也会对该表加上意向锁。</p><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>而其他客户端，在对这张表加表锁的时候，会根据该表上所加的意向锁来判定是否可以成功加表锁，而 不用逐行判断行锁情况了。</p><figure><img src="'+_+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_2-分类" tabindex="-1"><a class="header-anchor" href="#_2-分类" aria-hidden="true">#</a> 2). 分类</h4><ul><li><p>意向共享锁(IS): 由语句select ... lock in share mode添加 。 与表锁共享锁(read)兼容，与表锁排他锁(write)互斥。</p></li><li><p>意向排他锁(IX): 由insert、update、delete、select...for update添加 。与表锁共享锁(read)及排他锁(write)都互斥，意向锁之间不会互斥。</p></li></ul><blockquote><p>一旦事务提交了，意向共享锁、意向排他锁，都会自动释放。</p></blockquote><p>可以通过以下SQL，查看意向锁及行锁的加锁情况：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> object_schema<span class="token punctuation">,</span>object_name<span class="token punctuation">,</span>index_name<span class="token punctuation">,</span>lock_type<span class="token punctuation">,</span>lock_mode<span class="token punctuation">,</span>lock_data <span class="token keyword">from</span> performance_schema<span class="token punctuation">.</span>data_locks<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>演示：</p><p>A. 意向共享锁与表读锁是兼容的</p><figure><img src="`+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>B. 意向排他锁与表读锁、写锁都是互斥的</p><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_5-4-行级锁" tabindex="-1"><a class="header-anchor" href="#_5-4-行级锁" aria-hidden="true">#</a> 5.4 行级锁</h2><h3 id="_5-4-1-介绍" tabindex="-1"><a class="header-anchor" href="#_5-4-1-介绍" aria-hidden="true">#</a> 5.4.1 介绍</h3><p>行级锁，每次操作锁住对应的行数据。锁定粒度最小，发生锁冲突的概率最低，并发度最高。应用在InnoDB存储引擎中。</p><p>InnoDB的数据是基于索引组织的，行锁是通过对索引上的索引项加锁来实现的，而不是对记录加的锁。对于行级锁，主要分为以下三类：</p><ul><li>行锁（Record Lock）：锁定单个行记录的锁，防止其他事务对此行进行update和delete。在 RC、RR隔离级别下都支持。</li></ul><figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>间隙锁（Gap Lock）：锁定索引记录间隙（不含该记录），确保索引记录间隙不变，防止其他事务在这个间隙进行insert，产生幻读。在RR隔离级别下都支持。</li></ul><figure><img src="'+E+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>临键锁（Next-Key Lock）：行锁和间隙锁组合，同时锁住数据，并锁住数据前面的间隙Gap。 在RR隔离级别下支持。</li></ul><figure><img src="'+x+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_5-4-2-行锁" tabindex="-1"><a class="header-anchor" href="#_5-4-2-行锁" aria-hidden="true">#</a> 5.4.2 行锁</h3><h4 id="_1-介绍-1" tabindex="-1"><a class="header-anchor" href="#_1-介绍-1" aria-hidden="true">#</a> 1). 介绍</h4><p>InnoDB实现了以下两种类型的行锁：</p><ul><li>共享锁（S）：允许一个事务去读一行，阻止其他事务获得相同数据集的排它锁。</li><li>排他锁（X）：允许获取排他锁的事务更新数据，阻止其他事务获得相同数据集的共享锁和排他锁。</li></ul><p>两种行锁的兼容情况如下:</p><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>常见的SQL语句，在执行时，所加的行锁如下：</p><table><thead><tr><th><strong>SQL</strong></th><th><strong>行锁类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>INSERT ...</td><td>排他锁</td><td>自动加锁</td></tr><tr><td>UPDATE ...</td><td>排他锁</td><td>自动加锁</td></tr><tr><td>DELETE ...</td><td>排他锁</td><td>自动加锁</td></tr><tr><td>SELECT（正常）</td><td>不加任何锁</td><td></td></tr><tr><td>SELECT ... LOCK IN SHARE MODE</td><td>共享锁</td><td>需要手动在SELECT之后加LOCK IN SHARE MODE</td></tr><tr><td>SELECT ... FOR UPDATE</td><td>排他锁</td><td>需要手动在SELECT之后加FOR UPDATE ****</td></tr></tbody></table><h4 id="_2-演示" tabindex="-1"><a class="header-anchor" href="#_2-演示" aria-hidden="true">#</a> 2). 演示</h4><p>默认情况下，InnoDB在 REPEATABLE READ事务隔离级别运行，InnoDB使用 next-key 锁进行搜索和索引扫描，以防止幻读。</p><ul><li>针对唯一索引进行检索时，对已存在的记录进行等值匹配时，将会自动优化为行锁。</li><li>InnoDB的行锁是针对于索引加的锁，不通过索引条件检索数据，那么InnoDB将对表中的所有记录加锁，此时就会升级为表锁。</li></ul><p>可以通过以下SQL，查看意向锁及行锁的加锁情况：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> object_schema<span class="token punctuation">,</span>object_name<span class="token punctuation">,</span>index_name<span class="token punctuation">,</span>lock_type<span class="token punctuation">,</span>lock_mode<span class="token punctuation">,</span>lock_data <span class="token keyword">from</span> performance_schema<span class="token punctuation">.</span>data_locks<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-示例演示" tabindex="-1"><a class="header-anchor" href="#_3-示例演示" aria-hidden="true">#</a> 3). 示例演示</h4><p>数据准备:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>stu<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n    <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8mb4<span class="token punctuation">;</span>\n\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>stu<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>stu<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;cat&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>stu<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">&#39;rose&#39;</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>stu<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token string">&#39;jetty&#39;</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>stu<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">&#39;lily&#39;</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>stu<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">&#39;luci&#39;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>演示行锁的时候，我们就通过上面这张表来演示一下。</p><h5 id="a-普通的select语句-执行时-不会加锁。" tabindex="-1"><a class="header-anchor" href="#a-普通的select语句-执行时-不会加锁。" aria-hidden="true">#</a> A. 普通的select语句，执行时，不会加锁。</h5><figure><img src="'+D+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="b-select-lock-in-share-mode-加共享锁-共享锁与共享锁之间兼容。" tabindex="-1"><a class="header-anchor" href="#b-select-lock-in-share-mode-加共享锁-共享锁与共享锁之间兼容。" aria-hidden="true">#</a> B. select...lock in share mode，加共享锁，共享锁与共享锁之间兼容。</h5><figure><img src="'+L+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>共享锁与排他锁之间互斥。</p><figure><img src="'+S+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>客户端一获取的是id为1这行的共享锁，客户端二是可以获取id为3这行的排它锁的，因为不是同一行数据。 而如果客户端二想获取id为1这行的排他锁，会处于阻塞状态，以为共享锁与排他锁之间互 斥。</p><h5 id="c-排它锁与排他锁之间互斥" tabindex="-1"><a class="header-anchor" href="#c-排它锁与排他锁之间互斥" aria-hidden="true">#</a> C. 排它锁与排他锁之间互斥</h5><figure><img src="'+R+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当客户端一，执行update语句，会为id为1的记录加排他锁； 客户端二，如果也执行update语句更新id为1的数据，也要为id为1的数据加排他锁，但是客户端二会处于阻塞状态，因为排他锁之间是互斥的。 直到客户端一，把事务提交了，才会把这一行的行锁释放，此时客户端二，解除阻塞。</p><h5 id="d-无索引行锁升级为表锁" tabindex="-1"><a class="header-anchor" href="#d-无索引行锁升级为表锁" aria-hidden="true">#</a> D. 无索引行锁升级为表锁</h5><p>stu表中数据如下:</p><figure><img src="'+A+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们在两个客户端中执行如下操作:</p><figure><img src="'+w+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在客户端一中，开启事务，并执行update语句，更新name为Lily的数据，也就是id为19的记录 。 然后在客户端二中更新id为3的记录，却不能直接执行，会处于阻塞状态，为什么呢？</p><p>原因就是因为此时，客户端一，根据name字段进行更新时，name字段是没有索引的，如果没有索引， 此时行锁会升级为表锁(因为行锁是对索引项加的锁，而name没有索引)。</p><p>接下来，我们再针对name字段建立索引，索引建立之后，再次做一个测试：</p><figure><img src="'+I+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>此时我们可以看到，客户端一，开启事务，然后依然是根据name进行更新。而客户端二，在更新id为3的数据时，更新成功，并未进入阻塞状态。 这样就说明，我们<strong>根据索引字段进行更新操作，就可以避免行锁升级为表锁的情况。</strong></p><h3 id="_5-4-3-间隙锁-临键锁" tabindex="-1"><a class="header-anchor" href="#_5-4-3-间隙锁-临键锁" aria-hidden="true">#</a> 5.4.3 间隙锁&amp;临键锁</h3><p>默认情况下，InnoDB在 REPEATABLE READ事务隔离级别运行，InnoDB使用 next-key 锁进行搜索和索引扫描，以防止幻读。</p><ul><li><p>索引上的等值查询(唯一索引)，给不存在的记录加锁时, 优化为间隙锁 。</p></li><li><p>索引上的等值查询(非唯一普通索引)，向右遍历时最后一个值不满足查询需求时，next-key lock 退化为间隙锁。</p></li><li><p>索引上的范围查询(唯一索引)--会访问到不满足条件的第一个值为止。</p></li></ul><blockquote><p>注意：间隙锁唯一目的是防止其他事务插入间隙。间隙锁可以共存，一个事务采用的间隙锁不会阻止另一个事务在同一间隙上采用间隙锁。</p></blockquote><h4 id="_5-4-3-1-示例演示" tabindex="-1"><a class="header-anchor" href="#_5-4-3-1-示例演示" aria-hidden="true">#</a> 5.4.3.1 示例演示</h4><h5 id="a-索引上的等值查询-唯一索引-给不存在的记录加锁时-优化为间隙锁-。" tabindex="-1"><a class="header-anchor" href="#a-索引上的等值查询-唯一索引-给不存在的记录加锁时-优化为间隙锁-。" aria-hidden="true">#</a> A. 索引上的等值查询(唯一索引)，给不存在的记录加锁时, 优化为间隙锁 。</h5><figure><img src="'+T+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="b-索引上的等值查询-非唯一普通索引-向右遍历时最后一个值不满足查询需求时-next-keylock-退化为间隙锁。" tabindex="-1"><a class="header-anchor" href="#b-索引上的等值查询-非唯一普通索引-向右遍历时最后一个值不满足查询需求时-next-keylock-退化为间隙锁。" aria-hidden="true">#</a> B. 索引上的等值查询(非唯一普通索引)，向右遍历时最后一个值不满足查询需求时，next-keylock 退化为间隙锁。</h5><p>介绍分析一下：</p><p>我们知道InnoDB的B+树索引，叶子节点是有序的双向链表。 假如，我们要根据这个二级索引查询值为18的数据，并加上共享锁，我们是只锁定18这一行就可以了吗？ 并不是，因为是非唯一索引，这个结构中可能有多个18的存在，所以，在加锁时会继续往后找，找到一个不满足条件的值（当前案例中也就是29）。此时会对18加临键锁，并对29之前的间隙加锁。</p><figure><img src="'+j+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+z+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="c-索引上的范围查询-唯一索引-会访问到不满足条件的第一个值为止。" tabindex="-1"><a class="header-anchor" href="#c-索引上的范围查询-唯一索引-会访问到不满足条件的第一个值为止。" aria-hidden="true">#</a> C. 索引上的范围查询(唯一索引)--会访问到不满足条件的第一个值为止。</h5><figure><img src="'+q+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+N+'" alt="image-20221014154622234" tabindex="0" loading="lazy"><figcaption>image-20221014154622234</figcaption></figure><p>查询的条件为<code>id&gt;=19</code>，并添加共享锁。 此时我们可以根据数据库表中现有的数据，将数据分为三个部分：</p><p><code>[19]</code></p><p><code>(19,25]</code></p><p><code>(25,+∞]</code></p><p>所以数据库数据在加锁是，就是将19加了行锁，25的临键锁（包含25及25之前的间隙），正无穷的临键锁(正无穷及之前的间隙)。</p>',160),C=[M];function U(O,H){return n(),s("div",null,C)}const P=a(B,[["render",U],["__file","05 锁.html.vue"]]);export{P as default};
