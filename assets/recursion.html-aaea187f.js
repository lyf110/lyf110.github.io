const e=JSON.parse('{"key":"v-8a6e9fea","path":"/interview/computer/Data_Structure_Algorithm/recursion.html","title":"一、递归","lang":"zh-CN","frontmatter":{"title":"一、递归","date":"2023-04-03T21:29:40.000Z","order":1,"author":{"name":"liu yang fang","link":"https://github.com/lyf110"},"category":["数据结构","递归"],"tag":["数据结构","递归"],"description":"一、递归 1 递归应用场景 看个实际应用场景，迷宫问题(回溯)，递归(Recursion) image 2 递归的概念 简单的说:递归就是方法自己调用自己,每次调用时传入不同的变量.递归有助于编程者解决复杂的问题,同时可以让代码变得简洁。 递归调用机制 我列举两个小案例,来帮助大家理解递归，部分学员已经学习过递归了，这里在给大家回顾一下递归调用机制","head":[["meta",{"property":"og:url","content":"https://github.com/lyf110/interview/computer/Data_Structure_Algorithm/recursion.html"}],["meta",{"property":"og:site_name","content":"lyf blog"}],["meta",{"property":"og:title","content":"一、递归"}],["meta",{"property":"og:description","content":"一、递归 1 递归应用场景 看个实际应用场景，迷宫问题(回溯)，递归(Recursion) image 2 递归的概念 简单的说:递归就是方法自己调用自己,每次调用时传入不同的变量.递归有助于编程者解决复杂的问题,同时可以让代码变得简洁。 递归调用机制 我列举两个小案例,来帮助大家理解递归，部分学员已经学习过递归了，这里在给大家回顾一下递归调用机制"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://github.com/lyf110/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-06T10:52:35.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"一、递归"}],["meta",{"property":"article:author","content":"liu yang fang"}],["meta",{"property":"article:tag","content":"数据结构"}],["meta",{"property":"article:tag","content":"递归"}],["meta",{"property":"article:published_time","content":"2023-04-03T21:29:40.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-06T10:52:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"一、递归\\",\\"image\\":[\\"https://github.com/lyf110/\\"],\\"datePublished\\":\\"2023-04-03T21:29:40.000Z\\",\\"dateModified\\":\\"2023-04-06T10:52:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"liu yang fang\\",\\"link\\":\\"https://github.com/lyf110\\"}]}"]]},"headers":[{"level":2,"title":"1 递归应用场景","slug":"_1-递归应用场景","link":"#_1-递归应用场景","children":[]},{"level":2,"title":"2 递归的概念","slug":"_2-递归的概念","link":"#_2-递归的概念","children":[]},{"level":2,"title":"递归调用机制","slug":"递归调用机制","link":"#递归调用机制","children":[]},{"level":2,"title":"3 递归能解决什么问题","slug":"_3-递归能解决什么问题","link":"#_3-递归能解决什么问题","children":[]},{"level":2,"title":"4 递归需要遵守的重要规则","slug":"_4-递归需要遵守的重要规则","link":"#_4-递归需要遵守的重要规则","children":[]},{"level":2,"title":"5 递归-迷宫问题","slug":"_5-递归-迷宫问题","link":"#_5-递归-迷宫问题","children":[{"level":3,"title":"5.1 迷宫问题","slug":"_5-1-迷宫问题","link":"#_5-1-迷宫问题","children":[]},{"level":3,"title":"5.2 代码实现","slug":"_5-2-代码实现","link":"#_5-2-代码实现","children":[]}]},{"level":2,"title":"6 递归-八皇后问题","slug":"_6-递归-八皇后问题","link":"#_6-递归-八皇后问题","children":[{"level":3,"title":"6.1 八皇后问题介绍","slug":"_6-1-八皇后问题介绍","link":"#_6-1-八皇后问题介绍","children":[]},{"level":3,"title":"6.2 八皇后问题算法思路分析","slug":"_6-2-八皇后问题算法思路分析","link":"#_6-2-八皇后问题算法思路分析","children":[]},{"level":3,"title":"6.3 代码实现","slug":"_6-3-代码实现","link":"#_6-3-代码实现","children":[]}]}],"git":{"createdTime":1680778355000,"updatedTime":1680778355000,"contributors":[{"name":"lyf110","email":"1102970594@qq.com","commits":1}]},"readingTime":{"minutes":9.52,"words":2857},"filePathRelative":"interview/computer/Data_Structure_Algorithm/recursion.md","localizedDate":"2023年4月4日","excerpt":"<h1> 一、递归</h1>\\n<h2> 1 递归应用场景</h2>\\n<p>看个实际应用场景，迷宫问题(回溯)，递归(Recursion)</p>\\n<figure><figcaption>image</figcaption></figure>\\n<h2> 2 递归的概念</h2>\\n<p>简单的说:<strong>递归就是方法自己调用自己</strong>,每次调用时<strong>传入不同的变量</strong>.递归有助于编程者解决复杂的问题,同时可以让代码变得简洁。</p>\\n<h2> 递归调用机制</h2>\\n<p>我列举两个小案例,来帮助大家理解递归，部分学员已经学习过递归了，这里在给大家回顾一下递归调用机制</p>","copyright":{"author":"liu yang fang","license":"Apache License 2.0"},"autoDesc":true}');export{e as data};
