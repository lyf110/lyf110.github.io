import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as r,c as o,a as e,b as a,d as n,e as t}from"./app-5f6064b2.js";const d="/assets/1689434793588-18-45269d56.png",c="/assets/1689434793583-1-9b6f8945.png",p="/assets/1689434793583-2-b0b52716.png",g="/assets/1689434793584-3-612f3198.png",m="/assets/1689434793584-4-f1baffe8.png",u="/assets/1689434793584-5-aa6b2d12.png",b="/assets/1689434793585-6-3f56fd7b.png",h="/assets/1689434793585-7-3d357b0e.png",f="/assets/1689434793585-8-98745410.png",v="/assets/1689434793585-9-c2768fea.png",_="/assets/1689434793586-10-f552ae5a.png",k="/assets/1689434793586-11-090a0ea0.png",x="/assets/1689434793586-12-aad0cae8.png",y="/assets/1689434793586-13-db873966.png",j="/assets/1689434793586-14-b58246ec.png",z="/assets/1689434793587-15-a1423357.png",w="/assets/1689434793587-16-bae1c64d.png",G="/assets/1689434793587-17-c4ef5d82.png",S={},q=t('<h1 id="_2、天机学堂自定义部署" tabindex="-1"><a class="header-anchor" href="#_2、天机学堂自定义部署" aria-hidden="true">#</a> 2、天机学堂自定义部署</h1><p>虚拟机体积较大，如果下载困难，也可以自己搭建虚拟机环境。注意，整套环境运行时内存要求在8~10G左右，购买云服务的同学请酌情处理。</p><h1 id="_1-准备工作" tabindex="-1"><a class="header-anchor" href="#_1-准备工作" aria-hidden="true">#</a> 1.准备工作</h1><p>正式部署前需要做一些准备工作，如果已经做过可以跳过。</p><h2 id="_1-1-防火墙" tabindex="-1"><a class="header-anchor" href="#_1-1-防火墙" aria-hidden="true">#</a> 1.1.防火墙</h2><p>注意，如果是<strong>本地****虚拟机</strong>部署，建议直接<strong>关闭</strong>防火墙。</p><p>如果是<strong>云服务</strong>部署，建议<strong>打开</strong>项目所需的各种<strong>端口</strong>，包括：</p><ul><li>3306</li><li>5672</li><li>6379</li><li>7099</li><li>8080至8093</li><li>8099</li><li>8880</li><li>9200</li><li>9300</li><li>10022</li><li>10880</li><li>15672</li><li>18080</li><li>50000</li></ul><h2 id="_1-2-清理旧软件" tabindex="-1"><a class="header-anchor" href="#_1-2-清理旧软件" aria-hidden="true">#</a> 1.2.清理旧软件</h2><p>确保虚拟机中的旧的软件、Docker容器都被清除或者关闭开机自启，例如：</p><ul><li>MySQL</li><li>Redis</li><li>Nginx</li><li>JDK（如果已经安装JDK11则无需卸载）</li></ul><h2 id="_1-3-网络" tabindex="-1"><a class="header-anchor" href="#_1-3-网络" aria-hidden="true">#</a> 1.3.网络</h2><p>确保网络畅通，可以访问外网，另外最好是把虚拟机的网络IP设置为192.168.150.101，具体可参考虚拟机导入说明中的《配置VMware网络》</p><h2 id="_1-4-docker镜像" tabindex="-1"><a class="header-anchor" href="#_1-4-docker镜像" aria-hidden="true">#</a> 1.4.Docker镜像</h2><p>环境中需要安装的软件较多，包括：</p><table><thead><tr><th style="text-align:center;">序号</th><th style="text-align:center;">软件名</th><th style="text-align:center;">镜像名</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">Elasticsearch</td><td style="text-align:center;">elasticsearch:7.12.1</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">MySQL</td><td style="text-align:center;">mysql</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">Redis</td><td style="text-align:center;">redis</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:center;">RabbitMQ</td><td style="text-align:center;">rabbitmq:3.8-management</td></tr><tr><td style="text-align:center;">5</td><td style="text-align:center;">XXL-JOB</td><td style="text-align:center;">xuxueli/xxl-job-admin:2.3.0</td></tr><tr><td style="text-align:center;">6</td><td style="text-align:center;">Nacos</td><td style="text-align:center;">nacos/nacos-server:v2.1.0-slim</td></tr><tr><td style="text-align:center;">7</td><td style="text-align:center;">Seata</td><td style="text-align:center;">seataio/seata-server</td></tr><tr><td style="text-align:center;">8</td><td style="text-align:center;">Gogs</td><td style="text-align:center;">gogs/gogs:0.12</td></tr><tr><td style="text-align:center;">9</td><td style="text-align:center;">Jenkins</td><td style="text-align:center;">jenkins/jenkins:2.361.1-lts-jdk11</td></tr><tr><td style="text-align:center;">10</td><td style="text-align:center;">Nginx</td><td style="text-align:center;">nginx</td></tr><tr><td style="text-align:center;">11</td><td style="text-align:center;">JDK</td><td style="text-align:center;">openjdk:11.0**-**jre-buster</td></tr></tbody></table><p>镜像体积非常大，建议<strong>提前拉取</strong>对应镜像。</p><p>当然也可以使用课前资料提供的镜像包：</p><figure><img src="'+d+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h1 id="_2-配置内存" tabindex="-1"><a class="header-anchor" href="#_2-配置内存" aria-hidden="true">#</a> 2.配置内存</h1><p>虚拟机占用内存较高，需要10G左右。有条件的同学的可以直接设置16G，其他同学至少配置8G内存。如果是购买云服务的同学，请根据自己的经济实力酌情购买。如果内存确实不足，则需要配置虚拟内存来应对，参考2.2节</p><h2 id="_2-1-配置基础内存" tabindex="-1"><a class="header-anchor" href="#_2-1-配置基础内存" aria-hidden="true">#</a> 2.1.配置基础内存</h2><p>在VMware中设置：</p><figure><img src="'+c+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>设置内存为8G（有条件的同学选择16G）：</p><figure><img src="'+p+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>还有CPU核数，有条件的话尽可能调高：</p><figure><img src="'+g+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_2-2-配置虚拟内存" tabindex="-1"><a class="header-anchor" href="#_2-2-配置虚拟内存" aria-hidden="true">#</a> 2.2.配置虚拟内存</h2><blockquote><p>如果你的虚拟机已经设置了16G内存，则可以<strong>跳过</strong>下面的步骤。</p></blockquote><p>首先通过命令查看自己的虚拟内存：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">free</span> <span class="token parameter variable">-h</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如图：</p><figure><img src="`+m+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>Swap后面的total就是虚拟内存大小。我这台机器已经有2G虚拟内存，有些同学这里可能为0，也有些可能是7.9。</p><blockquote><p>如果swap后面的total已经大于5G，则<strong>跳过</strong>后面的步骤。</p></blockquote><p>如果虚拟内存不足，则需要添加虚拟及内存。</p><p>首先，创建虚拟机内存文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/zero <span class="token assign-left variable">of</span><span class="token operator">=</span>/root/swapfile <span class="token assign-left variable">bs</span><span class="token operator">=</span>1M <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">8192</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此步骤可能会花费较长时间，需要耐心等待。</p><figure><img src="`+u+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>查看/root目录的虚拟机内存文件：</p><figure><img src="'+b+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>接着我们还需要构建虚拟内存：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 构建</span>
<span class="token function">mkswap</span> /root/swapfile
<span class="token comment">#激活</span>
<span class="token function">swapon</span> /root/swapfile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+h+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>提示说文件权限不安全，需要设置为600，避免非root用户操作文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">chmod</span> <span class="token number">600</span> /root/swapfile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+f+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>再次通过<code>free -h</code>命令查看虚拟内存大小：</p><figure><img src="'+v+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>已经达到8G了</p><h1 id="_3-搭建环境" tabindex="-1"><a class="header-anchor" href="#_3-搭建环境" aria-hidden="true">#</a> 3.搭建环境</h1><p>接下来，就可以部署环境了，不过要注意，确保你的虚拟机满足下列条件：</p><ul><li>安装完成Docker</li><li>安装完成DockerCompose</li><li>可以连接网络</li><li>内存超过达到16G，或者内存+虚拟内存达到16G</li></ul><p>接下来，我们就可以部署项目环境了。</p><h2 id="_3-1-上传脚本" tabindex="-1"><a class="header-anchor" href="#_3-1-上传脚本" aria-hidden="true">#</a> 3.1.上传脚本</h2><p>首先，我们需要上传课前资料准备的脚本：</p><figure><img src="'+_+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>介绍：</p>',60),I={href:"http://init.sh",target:"_blank",rel:"noopener noreferrer"},N=e("li",null,"tjxt.env.tar.gz：项目环境数据",-1),D=t('<p>我们将其上传到任意目录，比如 <code>/root</code>目录：</p><figure><img src="'+k+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_3-2-执行脚本" tabindex="-1"><a class="header-anchor" href="#_3-2-执行脚本" aria-hidden="true">#</a> 3.2.执行脚本</h2><p>接下来，执行<code>init.sh</code>脚本。注意，命令后面的 <code>-i 192.168.150.101</code> 需要修改成你自己的虚拟机IP地址</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 将 192.168.150.101修改成你自己的虚拟机IP地址</span>
<span class="token function">sh</span> init.sh <span class="token parameter variable">-i</span> <span class="token number">192.168</span>.150.101
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>运行效果：</p><figure><img src="`+x+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>注意，脚本运行完成后，请重启自己的虚拟机，让Docker挂载生效</p></blockquote><p>注意，如果发现seata容器启动失败，一般是因为nacos启动太慢导致，可以手动重启seata容器。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> restart seata
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>环境中配置了别名，具体映射关系如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">alias</span> <span class="token assign-left variable">dps</span><span class="token operator">=</span><span class="token string">&#39;docker ps --format &quot;table{{.ID}}\\t{{.Names}}\\t{{.Status}}\\t{{.Ports}}&quot;&#39;</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">dis</span><span class="token operator">=</span><span class="token string">&#39;docker images&#39;</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">dexe</span><span class="token operator">=</span><span class="token string">&#39;docker exec -it&#39;</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">dlog</span><span class="token operator">=</span><span class="token string">&#39;docker logs&#39;</span>

<span class="token builtin class-name">alias</span> <span class="token assign-left variable">dc</span><span class="token operator">=</span><span class="token string">&#39;docker-compose&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，大家可以利用命令快捷操作，例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看运行中的容器</span>
dps
<span class="token comment"># 查看镜像</span>
dis

<span class="token comment"># 启动所有环境中间件，注意，需要在/usr/local/src目录下运行，因为docker-compose.yml文件在这个目录</span>
<span class="token function">dc</span> up <span class="token parameter variable">-d</span>
<span class="token comment"># 停止所有环境中间件</span>
<span class="token function">dc</span> stop
<span class="token comment"># 停止并移除所有中间件</span>
<span class="token function">dc</span> down
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-3-配置本地hosts" tabindex="-1"><a class="header-anchor" href="#_3-3-配置本地hosts" aria-hidden="true">#</a> 3.3.配置本地hosts</h2><p>为了方便我们访问环境中提供的MQ、Nacos、GOGS、Jenkins等服务的控制台，我们可以将虚拟机IP映射到一个域名上。</p><p>假如你的虚拟机IP地址是192.168.150.101，则映射关系如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">192.168</span>.150.101 git.tianji.com
<span class="token number">192.168</span>.150.101 jenkins.tianji.com
<span class="token number">192.168</span>.150.101 mq.tianji.com
<span class="token number">192.168</span>.150.101 nacos.tianji.com
<span class="token number">192.168</span>.150.101 xxljob.tianji.com
<span class="token number">192.168</span>.150.101 es.tianji.com
<span class="token number">192.168</span>.150.101 api.tianji.com
<span class="token number">192.168</span>.150.101 www.tianji.com
<span class="token number">192.168</span>.150.101 manage.tianji.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将上述内容写入本地的hosts文件即可，不同操作系统hosts文件目录不同：</p><ul><li>Windows：在 <code>C:\\WINDOWS\\System32\\drivers\\etc\\HOSTS</code></li><li>Linux/MacOS：<code>/etc/hosts</code></li></ul><p>现在，我们访问域名时，就会被请求转发到虚拟机IP地址，而虚拟机中的Nginx则会将请求转发到具体的服务上。</p><p>例如，访问代码仓库，使用这个地址：</p>`,22),P={href:"http://git.tianji.com",target:"_blank",rel:"noopener noreferrer"},M=e("figure",null,[e("img",{src:y,alt:"img",tabindex:"0",loading:"lazy"}),e("figcaption",null,"img")],-1),J=e("h2",{id:"_3-4-配置webhook地址",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_3-4-配置webhook地址","aria-hidden":"true"},"#"),a(" 3.4.配置WebHook地址")],-1),L=e("p",null,"环境中配置了持续集成功能，也就是当我们向Git仓库推送代码时，会自动触发项目构建。但是构建的目标服务器地址无法通过脚本设置，需要大家手动修改。",-1),O=e("p",null,"访问GOGS页面：",-1),V={href:"http://git.tianji.com/",target:"_blank",rel:"noopener noreferrer"},W=t('<p>账户、密码是：tjxt/123321</p><p>然后访问tjxt仓库：</p><figure><img src="'+j+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>然后进入仓库设置：</p><figure><img src="'+z+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>然后进入web钩子设置，可以看到现有的钩子访问的192.168.150.101这个地址：</p><figure><img src="'+w+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>点击修改，进入web钩子页面：</p><figure><img src="'+G+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>将其中的IP地址修改为你自己的虚拟机地址后，点击更新Web钩子按钮即可。</p>',10);function B(C,E){const s=l("ExternalLinkIcon");return r(),o("div",null,[q,e("ul",null,[e("li",null,[e("a",I,[a("init.sh"),n(s)]),a("：搭建环境的脚本")]),N]),D,e("p",null,[e("a",P,[a("http://git.tianji.com"),n(s)])]),M,J,L,O,e("p",null,[e("a",V,[a("http://git.tianji.com/"),n(s)])]),W])}const R=i(S,[["render",B],["__file","自定义部署.html.vue"]]);export{R as default};
