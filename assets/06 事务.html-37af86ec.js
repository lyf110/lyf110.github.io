const e=JSON.parse('{"key":"v-58eeeb8a","path":"/database/mysql/heima2022/plus/06%20%E4%BA%8B%E5%8A%A1.html","title":"六、InnoDB引擎","lang":"zh-CN","frontmatter":{"title":"六、InnoDB引擎","date":"2023-04-02T10:38:46.000Z","order":6,"category":["数据库","InnoDB","MySQL"],"tag":["数据库","InnoDB","MySQL"],"author":{"name":"liu yang fang","link":"https://github.com/lyf110"},"description":"6 InnoDB引擎 6.1 逻辑存储结构 InnoDB的逻辑存储结构如下图所示: 1). 表空间 表空间是InnoDB存储引擎逻辑结构的最高层， 如果用户启用了参数 innodb_file_per_table(在8.0版本中默认开启) ，则每张表都会有一个表空间（xxx.ibd），一个mysql实例可以对应多个表空 间，用于存储记录、索引等数据。 2). 段 段，分为数据段（Leaf node segment）、索引段（Non-leaf node segment）、回滚段（Rollback segment），InnoDB是索引组织表，数据段就是B+树的叶子节点， 索引段即为B+树的 非叶子节点。段用来管理多个Extent（区）。","head":[["meta",{"property":"og:url","content":"https://github.com/lyf110/database/mysql/heima2022/plus/06%20%E4%BA%8B%E5%8A%A1.html"}],["meta",{"property":"og:site_name","content":"lyf blog"}],["meta",{"property":"og:title","content":"六、InnoDB引擎"}],["meta",{"property":"og:description","content":"6 InnoDB引擎 6.1 逻辑存储结构 InnoDB的逻辑存储结构如下图所示: 1). 表空间 表空间是InnoDB存储引擎逻辑结构的最高层， 如果用户启用了参数 innodb_file_per_table(在8.0版本中默认开启) ，则每张表都会有一个表空间（xxx.ibd），一个mysql实例可以对应多个表空 间，用于存储记录、索引等数据。 2). 段 段，分为数据段（Leaf node segment）、索引段（Non-leaf node segment）、回滚段（Rollback segment），InnoDB是索引组织表，数据段就是B+树的叶子节点， 索引段即为B+树的 非叶子节点。段用来管理多个Extent（区）。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://github.com/lyf110/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"六、InnoDB引擎"}],["meta",{"property":"article:author","content":"liu yang fang"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:tag","content":"InnoDB"}],["meta",{"property":"article:tag","content":"MySQL"}],["meta",{"property":"article:published_time","content":"2023-04-02T10:38:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"六、InnoDB引擎\\",\\"image\\":[\\"https://github.com/lyf110/\\"],\\"datePublished\\":\\"2023-04-02T10:38:46.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"liu yang fang\\",\\"link\\":\\"https://github.com/lyf110\\"}]}"]]},"headers":[{"level":2,"title":"6.1 逻辑存储结构","slug":"_6-1-逻辑存储结构","link":"#_6-1-逻辑存储结构","children":[{"level":3,"title":"1). 表空间","slug":"_1-表空间","link":"#_1-表空间","children":[]},{"level":3,"title":"2). 段","slug":"_2-段","link":"#_2-段","children":[]},{"level":3,"title":"3). 区","slug":"_3-区","link":"#_3-区","children":[]}]},{"level":2,"title":"6.2 架构","slug":"_6-2-架构","link":"#_6-2-架构","children":[{"level":3,"title":"6.2.1 概述","slug":"_6-2-1-概述","link":"#_6-2-1-概述","children":[]},{"level":3,"title":"6.2.2 内存结构","slug":"_6-2-2-内存结构","link":"#_6-2-2-内存结构","children":[]},{"level":3,"title":"6.2.3 磁盘结构","slug":"_6-2-3-磁盘结构","link":"#_6-2-3-磁盘结构","children":[]},{"level":3,"title":"6.2.4 后台线程","slug":"_6-2-4-后台线程","link":"#_6-2-4-后台线程","children":[]}]},{"level":2,"title":"6.3 事务原理","slug":"_6-3-事务原理","link":"#_6-3-事务原理","children":[{"level":3,"title":"6.3.1 事务基础","slug":"_6-3-1-事务基础","link":"#_6-3-1-事务基础","children":[]},{"level":3,"title":"6.3.2 redo log","slug":"_6-3-2-redo-log","link":"#_6-3-2-redo-log","children":[]},{"level":3,"title":"6.3.3 undo log","slug":"_6-3-3-undo-log","link":"#_6-3-3-undo-log","children":[]}]},{"level":2,"title":"6.4 MVCC","slug":"_6-4-mvcc","link":"#_6-4-mvcc","children":[{"level":3,"title":"6.4.1 基本概念","slug":"_6-4-1-基本概念","link":"#_6-4-1-基本概念","children":[]},{"level":3,"title":"6.4.2 隐藏字段","slug":"_6-4-2-隐藏字段","link":"#_6-4-2-隐藏字段","children":[]},{"level":3,"title":"6.4.3 undolog","slug":"_6-4-3-undolog","link":"#_6-4-3-undolog","children":[]},{"level":3,"title":"6.4.4 readview","slug":"_6-4-4-readview","link":"#_6-4-4-readview","children":[]},{"level":3,"title":"6.4.5 原理分析","slug":"_6-4-5-原理分析","link":"#_6-4-5-原理分析","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":23.29,"words":6988},"filePathRelative":"database/mysql/heima2022/plus/06 事务.md","localizedDate":"2023年4月2日","excerpt":"<h1> 6 InnoDB引擎</h1>\\n<h2> 6.1 逻辑存储结构</h2>\\n<p>InnoDB的逻辑存储结构如下图所示:</p>\\n<figure><figcaption></figcaption></figure>\\n<h3> 1). 表空间</h3>\\n<p>表空间是InnoDB存储引擎逻辑结构的最高层， 如果用户启用了参数 innodb_file_per_table(在8.0版本中默认开启) ，则每张表都会有一个表空间（xxx.ibd），一个mysql实例可以对应多个表空 间，用于存储记录、索引等数据。</p>\\n<h3> 2). 段</h3>\\n<p>段，分为数据段（Leaf node segment）、索引段（Non-leaf node segment）、回滚段（Rollback segment），InnoDB是索引组织表，数据段就是B+树的叶子节点， 索引段即为B+树的 非叶子节点。段用来管理多个Extent（区）。</p>","copyright":{"author":"liu yang fang","license":"Apache License 2.0"},"autoDesc":true}');export{e as data};
