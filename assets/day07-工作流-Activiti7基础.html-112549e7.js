import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o,c as i,a as n,b as s,d as p,e as a}from"./app-5f6064b2.js";const l="/assets/image-20240407192427926-219-bad6313e.png",u="/assets/image-20240407192427926-220-528ad0ed.png",k="/assets/image-20240407192427926-221-d8da9023.png",r="/assets/image-20240407192427926-222-8c1b4b8b.png",d="/assets/image-20240407192427926-223-f518d4d6.png",v="/assets/image-20240407192427926-224-ecc33e6b.png",m="/assets/image-20240407192427927-225-8e39d47f.png",g="/assets/image-20240407192427927-226-e7485983.png",b="/assets/image-20240407192427927-227-9a40f629.png",f="/assets/image-20240407192427927-228-f0ab0c53.png",y="/assets/image-20240407192427927-229-48a7eb05.png",h="/assets/image-20240407192427927-230-590f74f5.png",_="/assets/image-20240407192427927-231-850a686a.png",q="/assets/image-20240407192427927-232-92beec62.png",w="/assets/image-20240407192427927-233-831f0e36.png",S="/assets/image-20240407192427927-234-8f25941f.png",T="/assets/image-20240407192427927-235-9dbc2009.png",I="/assets/image-20240407192427927-236-1435b7eb.png",A="/assets/image-20240407192427927-237-bd499403.png",E="/assets/image-20240407192427928-238-40346ec9.png",x="/assets/image-20240407192427928-239-038ec22f.png",N="/assets/image-20240407192427928-240-daccb64f.png",R="/assets/image-20240407192427928-241-94d79efb.png",P="/assets/image-20240407192427928-242-7dea5263.png",j="/assets/image-20240407192427928-241-94d79efb.png",C="/assets/image-20240407192427928-244-3d05e000.png",M="/assets/image-20240407192427928-245-a9b32505.png",D="/assets/image-20240407192427929-246-f2c574ea.png",B="/assets/image-20240407192427929-247-1508dbf3.png",O="/assets/image-20240407192427929-248-4d1ba21b.png",L="/assets/image-20240407192427929-249-e8ce9eda.png",z="/assets/image-20240407192427929-250-3b9fedcf.png",H="/assets/image-20240407192427929-251-931b369e.png",K="/assets/image-20240407192427929-252-0ddd7734.png",V="/assets/image-20240407192427929-253-3e79ed8c.png",U="/assets/image-20240407192427929-254-394213dd.png",Y="/assets/image-20240407192427929-255-bdb4647e.gif",G="/assets/image-20240407192427929-256-602229a1.png",Q="/assets/image-20240407192427929-257-e0078be5.png",F="/assets/image-20240407192427929-258-7fa07ef0.png",$="/assets/image-20240407192427929-259-11b55c89.png",X={},J=a('<h1 id="工作流-activiti7基础" tabindex="-1"><a class="header-anchor" href="#工作流-activiti7基础" aria-hidden="true">#</a> 工作流-Activiti7基础</h1><h2 id="_1-目标" tabindex="-1"><a class="header-anchor" href="#_1-目标" aria-hidden="true">#</a> 1 目标</h2><p>我们前几天的开发中，都是做的系统的基础模块开发，那接下来的几天，我们会开始养老项目的核心业务开发，比如，有老人的入住办理，退住办理等等这些，如下图</p><p>入住办理</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>退住办理</p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在上图中，使用红框圈起来的内容，大家可以看到，入住和退住，它们都有完整的比较长的流程，里面涉及到了多个表单的提交和多个角色的审核，那么在业务开发的过程中，如果想要完美的实现这些流程的开发，我们最好的技术选型就是使用<strong>工作流</strong>技术完成，那什么是工作流呢？</p><p>工作流（ Workflow ）：是一项将系统任务或操作抽取，再按照预定业务流程进行组织、协调、并自动化执行的技术。</p><p>我们也可以简单理解工作流是一种开发方式，其主要是解决一些业务场景硬编码方式的成本高、效率低、变更慢等问题的技术。</p><p>在今天，我们会先讲解工作流技术的基础内容，在接下来的几天，我们会把工作流集成到我们的项目中完成入住和退住的开发。</p><p>所以我们今天的目标是：</p><ul><li>掌握工作流的使用场景有哪些</li><li>能够清楚Activiti7的特点</li><li>能够掌握BPMN设计器的使用以及常见的流程符号</li><li>能够独立完成Springboot与Activiti7的集成</li><li>能够独立完成请假流程的审批代码开发</li><li>能够掌握完成流量变量的使用</li><li>能够掌握使用UEL表达式动态分配办理人</li><li>能够掌握使用UEL表达式动态分配连线变量</li><li>能够掌握使用网关来完成分支执行的流程</li></ul><h2 id="_2-activiti7概述" tabindex="-1"><a class="header-anchor" href="#_2-activiti7概述" aria-hidden="true">#</a> 2 Activiti7概述</h2><p>Activiti：是一个开源的轻量级工作流和业务流程管理与执行的引擎。2010年基于jBPM4实现首次开源，旨在帮助企业自动化和优化各种业务流程。</p>',15),W={href:"https://www.activiti.org/",target:"_blank",rel:"noopener noreferrer"},Z=a('<p><strong>Activiti 的主要特点和优势：</strong></p><ul><li></li></ul><p>开源和跨平台：Activiti 是一个开源项目，可以在各种操作系统和平台上运行，提供灵活的部署选项。</p><ul><li></li></ul><p>高度可定制：Activiti 提供了可视化的流程设计器，使用户能够轻松设计和定制各种业务流程。流程定义可以基于 BPMN 2.0 标准进行创建。</p><ul><li></li></ul><p>强大的任务管理：Activiti 允许用户定义任务、分配任务给不同的用户或组，并支持任务的优先级和截止日期。</p><ul><li></li></ul><p>工作流引擎：Activiti 提供了强大的工作流引擎，能够自动执行流程、处理任务、执行规则等。它支持顺序流、条件流、并行网关等流程控制元素。</p><ul><li></li></ul><p>事件驱动：Activiti 支持事件驱动的流程，可以在特定的事件发生时触发流程的不同分支。</p><ul><li></li></ul><p>可扩展性：Activiti 允许开发人员通过编写自定义 Java 类来扩展其功能，满足特定的业务需求。</p><ul><li></li></ul><p>数据持久化：Activiti 使用关系型数据库来存储流程定义、流程实例、任务等信息，保证了数据的持久性和可靠性。</p><ul><li></li></ul><p>集成支持：Activiti 可以与其他技术和系统集成，如 Spring、RESTful Web Services、JavaEE 等。</p><ul><li></li></ul><p>监控和报告：Activiti 提供了流程实例的监控、报告和分析功能，使用户能够了解流程的状态和性能。</p><h2 id="_3-bpmn" tabindex="-1"><a class="header-anchor" href="#_3-bpmn" aria-hidden="true">#</a> 3 BPMN</h2><h3 id="_3-1-概述" tabindex="-1"><a class="header-anchor" href="#_3-1-概述" aria-hidden="true">#</a> 3.1 概述</h3><p>BPMN：业务流程建模与标记语言（Business Process Model and Notation），是一种用于图形化表示和描述业务流程的标准化标记语言。目前主流的版本是BPMN2.0，由 Object Management Group（OMG）制定，并于2011年发布，发展至今，已被主流的流程引擎支持，并作为默认。</p>',22),nn={href:"https://www.bpmn.org/",target:"_blank",rel:"noopener noreferrer"},sn=a('<p>讲白了，BPMN和HTML类似都是标记语言，都是通过XML的格式来组织数据，供后端解析，也可转成图形化方式直观展示给用户看。</p><p><strong>例：BPMN标准的流程文件内容：</strong></p><p>讲白了，BPMN和HTML类似都是标记语言，都是通过XML的格式来组织数据，供后端解析，也可转成图形化方式直观展示给用户看。</p><p><strong>例：BPMN标准的流程文件内容：</strong></p><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>转成直观的图：</strong></p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-2-bpmn设计器" tabindex="-1"><a class="header-anchor" href="#_3-2-bpmn设计器" aria-hidden="true">#</a> 3.2 BPMN设计器</h3>',8),an={href:"https://github.com/activiti/activiti-modeling-app%E8%AE%BE%E8%AE%A1%E5%99%A8%EF%BC%8C%E5%B0%B1%E6%98%AF%E5%9F%BA%E4%BA%8Ebpmn-js%E5%AE%9E%E7%8E%B0%E7%9A%84",target:"_blank",rel:"noopener noreferrer"},tn=n("p",null,"找到资料中的",-1),pn=n("figure",null,[n("img",{src:d,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),en=n("p",null,[s("解压，然后使用npm命令启动:"),n("code",null,"npm run dev")],-1),cn=n("figure",null,[n("img",{src:v,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),on={href:"http://localhost:9013/",target:"_blank",rel:"noopener noreferrer"},ln=a('<figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>到此呢，我们就把画图的工具准备好了。</p><h3 id="_3-3-常见流程符号" tabindex="-1"><a class="header-anchor" href="#_3-3-常见流程符号" aria-hidden="true">#</a> 3.3 常见流程符号</h3><h4 id="_3-3-1-事件event" tabindex="-1"><a class="header-anchor" href="#_3-3-1-事件event" aria-hidden="true">#</a> 3.3.1 事件event</h4><p>事件（Event）是业务流程模型中的重要元素之一。事件可以发生在流程的任何阶段，并且可以影响流程的执行。根据事件发生的时间和方式，可以将BPMN事件分为以下几类：</p><ul><li></li></ul><p>开始事件（Start Event）：表示流程的起点，通常用于触发流程的启动。</p><ul><li></li></ul><p>中间事件（Intermediate Event）：发生在流程中间的事件，可以根据需要划分为多种类型，如定时器事件、消息事件、信号事件等。</p><ul><li></li></ul><p>结束事件（End Event）：表示流程的结束点，通常用于触发流程的结束。</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_3-3-2-活动activity" tabindex="-1"><a class="header-anchor" href="#_3-3-2-活动activity" aria-hidden="true">#</a> 3.3.2 活动activity</h4><p>活动（Activity）是业务流程模型中的重要元素之一。活动可以包括任务（Task）、子流程（Subprocess）、调用活动（Call Activity）等。</p><p>任务（Task）是最基本的活动类型，表示一个简单的、可执行的工作单元。任务通常由人工执行，并且需要指定执行者。根据执行方式的不同，任务可以分为用户任务（User Task）和手动任务（Manual Task）。用户任务是由人工执行的，需要指定执行的用户或角色，并提供相应的输入；手动任务是由系统自动执行的，不需要指定执行的用户或角色。</p><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_3-3-3-流向flow" tabindex="-1"><a class="header-anchor" href="#_3-3-3-流向flow" aria-hidden="true">#</a> 3.3.3 流向flow</h4><figure><img src="'+f+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_4-springboot集成activiti7" tabindex="-1"><a class="header-anchor" href="#_4-springboot集成activiti7" aria-hidden="true">#</a> 4 Springboot集成Activiti7</h2><h3 id="_4-1-导入依赖" tabindex="-1"><a class="header-anchor" href="#_4-1-导入依赖" aria-hidden="true">#</a> 4.1 导入依赖</h3><p>创建一个新的项目 activiti-sample，导入以下依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.itheima<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>activiti-sample<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.7.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--安全框架 spring security --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--springboot与activiti7整合的starter--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.activiti<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>activiti-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>7.10.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

        <span class="token comment">&lt;!-- mybatis --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

        <span class="token comment">&lt;!-- mysql驱动 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 单元测试 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.16.22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!--如果activiti依赖下载不了，可以配置如下地址进行下载--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>activiti-releases<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>https://artifacts.alfresco.com/nexus/content/repositories/activiti-releases<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需自己创建引导类和配置文件application.yml</p><h3 id="_4-2-属性配置" tabindex="-1"><a class="header-anchor" href="#_4-2-属性配置" aria-hidden="true">#</a> 4.2 属性配置</h3><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8989</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> heima123
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//192.168.200.146<span class="token punctuation">:</span>3306/activiti<span class="token punctuation">-</span>db<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=utf-8&amp;useSSL=true&amp;serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&amp;serverTimezone=Asia/Shanghai</span>
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver
    <span class="token comment">#日志的相关配置</span>
  <span class="token key atrule">activiti</span><span class="token punctuation">:</span>
    <span class="token comment">#是否让activiti自动创建所有的历史表</span>
    <span class="token key atrule">history-level</span><span class="token punctuation">:</span> full
    <span class="token comment">#是否需要使用历史表,默认false不使用,而配置true是使用历史表</span>
    <span class="token key atrule">db-history-used</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token comment">#流程自动部署，关闭，需要手动部署流程 服务启动的时候自动检查resources目录下的bpmn文件 如果为true自动部署流程</span>
    <span class="token key atrule">check-process-definitions</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token comment">#关闭启动服务自动框架部署</span>
    <span class="token key atrule">deployment-mode</span><span class="token punctuation">:</span> never<span class="token punctuation">-</span>fail
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：需要在自己的MySQL中创建一个新的数据库：activiti-db</p><p>准备一个引导类，然后启动项目，启动日志中，我们可以看到，activiti会自动创建表结构</p><figure><img src="`+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们也可以直接查询数据库，数据库中创建了25张表，目前说明springboot已成功集成了activiti7</p><figure><img src="'+h+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4-3-表结构" tabindex="-1"><a class="header-anchor" href="#_4-3-表结构" aria-hidden="true">#</a> 4.3 表结构</h3><p>Activiti 的表都以 ACT_ 开头。 第二部分是表示表的用途的两个字母标识。 用途也和服务的 API 对应。</p><ul><li>ACT_RE ：<code>RE</code>表示 repository。 这个前缀的表包含了流程定义和流程静态资源 （图片，规则）</li><li>ACT_RU：<code>RU</code>表示 runtime。 这些运行时的表，包含流程实例，任务，变量，异步任务，等运行中的数据。 Activiti 只在流程实例执行过程中保存这些数据， 在流程结束时就会删除这些记录。 这样运行时表可以一直很小速度很快。</li><li>ACT_HI：<code>HI</code>表示 history。 这些表包含历史数据，比如历史流程实例， 变量，任务等等。</li><li>ACT_GE ： <code>GE</code> 表示 general。 通用数据， 用于不同场景下</li></ul><p>具体的表含义，如下：</p><ul><li><p>一般数据</p><ul><li>ACT_GE_BYTEARRAY 通用的流程定义和流程资源</li><li>ACT_GE_PROPERTY 系统相关属性</li></ul></li><li><p>流程历史记录</p><ul><li>ACT_HI_ACTINST 历史的流程实例</li><li>ACT_HI_ATTACHMENT 历史的流程附件</li><li>ACT_HI_COMMENT 历史的说明性信息</li><li>ACT_HI_DETAIL 历史的流程运行中的细节信息</li><li>ACT_HI_IDENTITYLINK 历史的流程运行过程中用户关系</li><li>ACT_HI_PROCINST 历史的流程实例</li><li>ACT_HI_TASKINST 历史的任务实例</li><li>ACT_HI_VARINST 历史的流程运行中的变量信息</li></ul></li><li><p>流程定义表</p><ul><li>ACT_RE_DEPLOYMENT 部署单元信息</li><li>ACT_RE_MODEL 模型信息</li><li>ACT_RE_PROCDEF 已部署的流程定义</li></ul></li><li><p>运行实例表</p><ul><li>ACT_RU_EVENT_SUBSCR 运行时事件</li><li>ACT_RU_EXECUTION 运行时流程执行实例</li><li>ACT_RU_IDENTITYLINK 运行时用户关系信息，存储任务节点与参与者的相关信息</li><li>ACT_RU_JOB 运行时作业</li><li>ACT_RU_TASK 运行时任务</li><li>ACT_RU_VARIABLE 运行时变量表</li></ul></li></ul><h3 id="_4-4-常见api" tabindex="-1"><a class="header-anchor" href="#_4-4-常见api" aria-hidden="true">#</a> 4.4 常见api</h3><p>在activiti7框架内部，已经对25张表的数据操作，已经封装了对应的service，在我们业务进行集成的时候，一般情况下无需再开发针对activiti7相关表的操作进行开发，直接使用activiti7内部提供的api即可。</p><ul><li></li></ul><p>RepositoryService：用于部署流程定义，可以添加、删除、查询和管理流程定义。</p><ul><li></li></ul><p>RuntimeService：用于启动、查询和管理正在运行的流程实例。</p><ul><li></li></ul><p>TaskService：用于查询和管理当前用户可以操作的任务，以及完成任务。</p><ul><li></li></ul><p>HistoryService：用于查询历史数据，例如已完成的流程实例、已删除的流程实例、用户任务等。</p><p>因为我们现在使用的是springboot集成了activiti，这些api也被spring容器进行了管理，需要用到以上api的时候，直接注入即可，例如</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">RepositoryService</span> repositoryService<span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
     * 部署流程定义
     */</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveNewDeploy</span><span class="token punctuation">(</span><span class="token class-name">FlowInfo</span> flowInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Deployment</span> deployment <span class="token operator">=</span> repositoryService<span class="token punctuation">.</span><span class="token function">createDeployment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">addClasspathResource</span><span class="token punctuation">(</span>flowInfo<span class="token punctuation">.</span><span class="token function">getFilepath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 添加bpmn资源</span>
        <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span>flowInfo<span class="token punctuation">.</span><span class="token function">getFlowname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span>flowInfo<span class="token punctuation">.</span><span class="token function">getFlowkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;流程部署id：&quot;</span> <span class="token operator">+</span> deployment<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;流程部署名称：&quot;</span> <span class="token operator">+</span> deployment<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-请假流程审批" tabindex="-1"><a class="header-anchor" href="#_5-请假流程审批" aria-hidden="true">#</a> 5 请假流程审批</h2><h3 id="_5-1-需求说明" tabindex="-1"><a class="header-anchor" href="#_5-1-需求说明" aria-hidden="true">#</a> 5.1 需求说明</h3><p>在企业中，员工如果有事需要请假，一般都需要向上级请假，得到批准后，方可离开公司。而整个过程在企业中需要在系统中完成，以信息化员工的出勤信息，便于工资、奖金的结算，因此需要开发此功能，需求如下：</p><ul><li>员工：请假的员工需要先填写请假单，填写的字段有：请假人、请假天数、开始请假时间、请假事由；</li><li>经理：审批员工的请假单，如果不同意，则需要说明不同意的理由；</li></ul><figure><img src="`+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>实现步骤</strong></p><p>在这里我们主要是来了解一下基于Activiti如何来实现上述需求，其主要的实现步骤是什么？</p><p>1、集成流程引擎，（已完成）</p><p>2、画流程图，基于bpmn-js工具</p><p>3、保存流程图，基于activiti提供的api</p><p>4、部署和运行流程图，基于activiti提供的api</p><p>5、开发同意和不同意审批功能，基于activiti提供的api</p><h3 id="_5-2-画流程" tabindex="-1"><a class="header-anchor" href="#_5-2-画流程" aria-hidden="true">#</a> 5.2 画流程</h3><p>我们打开bpmn-js，可以直接在页面中画图，步骤如下：</p><p>(1)定义流程编号（ID）和名称</p><figure><img src="'+q+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>(2)新增一个用户任务，并指定代理人为：张三</p><figure><img src="'+w+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>(3)新增一个用户任务，并指定代理人为：李四，同时需要结束这个流程，最后需要有一个结束事件</p><figure><img src="'+S+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>流程图画好之后，在页面的左下角有一个导出，就可以直接导出为bpmn文件（xml文件）</p><figure><img src="'+T+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>把生成后的bpmn文件拷贝到idea中备用，存储位置：resource/bpmn/diagram.bpmn</p><p>因为保存的文件都是xml文件，我们为了方便查看这些流程，也可以截个图一起放入bpmn目录下</p><figure><img src="'+I+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_5-3-部署流程" tabindex="-1"><a class="header-anchor" href="#_5-3-部署流程" aria-hidden="true">#</a> 5.3 部署流程</h3><p>我们在项目的测试包下创建一个ACTQuickStartTest类来完成入门的所有代码</p><p>在我们去部署流程、创建流程实例、执行任务的时候可以直接使用activiti提供的api，我们先用三个</p><ul><li></li></ul><p>RepositoryService：用于部署流程定义，可以添加、删除、查询和管理流程定义。</p><ul><li></li></ul><p>RuntimeService：用于启动、查询和管理正在运行的流程实例。</p><ul><li></li></ul><p>TaskService：用于查询和管理当前用户可以操作的任务，以及完成任务。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>activiti<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 流程部署
 * 添加资源文件、获取部署信息、部署时间
 * act_re_deployment
 */</span>
<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ACTQuickStartTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">RepositoryService</span> repositoryService<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 流程部署
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deployProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> fileName <span class="token operator">=</span> <span class="token string">&quot;bpmn/diagram.bpmn&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> imageFile <span class="token operator">=</span> <span class="token string">&quot;bpmn/diagram.png&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">//定义流程</span>
        <span class="token class-name">Deployment</span> deployment <span class="token operator">=</span> repositoryService<span class="token punctuation">.</span><span class="token function">createDeployment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">addClasspathResource</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">addClasspathResource</span><span class="token punctuation">(</span>imageFile<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&quot;Process_1&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//部署流程</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>deployment<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>deployment<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行成功以后，打印了流程部署id和流程的name</p><figure><img src="`+A+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们在数据库中查询，</p><ul><li>ACT_RE_DEPLOYMENT 流程部署</li><li>ACT_GE_BYTEARRAY 流程资源</li><li>ACT_RE_PROCDEF 流程定义表</li></ul><p>(1) ACT_RE_DEPLOYMENT 流程部署表</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ACT_RE_DEPLOYMENT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+E+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>ACT_RE_DEPLOYMENT 表结构</p><table><thead><tr><th>字段名</th><th>类型</th><th>长度</th><th>注释</th></tr></thead><tbody><tr><td>ID_</td><td>varchar</td><td>64</td><td>主键</td></tr><tr><td>NAME_</td><td>varchar</td><td>255</td><td>名称</td></tr><tr><td>CATEGORY_</td><td>varchar</td><td>255</td><td>分类</td></tr><tr><td>KEY_</td><td>varchar</td><td>255</td><td>业务key</td></tr><tr><td>TENANT_ID_</td><td>varchar</td><td>255</td><td>租户ID</td></tr><tr><td>DEPLOY_TIME_</td><td>timestamp</td><td></td><td>部署时间</td></tr><tr><td>ENGINE_VERSION_</td><td>varchar</td><td>255</td><td>引擎版本，一般为空</td></tr><tr><td>VERSION_</td><td>int</td><td>10</td><td>部署版本</td></tr><tr><td>PROJECT_RELEASE_VERSION_</td><td>varchar</td><td>255</td><td>项目版本，一般为空</td></tr></tbody></table><p>(2)ACT_GE_BYTEARRAY流程资源</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ACT_GE_BYTEARRAY
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+x+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>表结构</p><table><thead><tr><th>字段名</th><th>类型</th><th>长度</th><th>注释</th></tr></thead><tbody><tr><td>ID_</td><td>varchar</td><td>64</td><td>主键</td></tr><tr><td>REV_</td><td>int</td><td>10</td><td>数据更新乐观锁</td></tr><tr><td>NAME_</td><td>varchar</td><td>255</td><td>名称</td></tr><tr><td>DEPLOYMENT_ID_</td><td>varchar</td><td>64</td><td>部署ID</td></tr><tr><td>BYTES_</td><td>longblob</td><td>4294967295</td><td>大字段内容</td></tr><tr><td>GENERATED_</td><td>tinyint</td><td>3</td><td>标识是否自动生成的记录</td></tr></tbody></table><p>(3)act_re_procdef 流程定义表，部署每个新的流程定义都会在这张表中增加一条记录</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ACT_RE_PROCDEF
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+N+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>表结构</p><table><thead><tr><th>字段名</th><th>类型</th><th>长度</th><th>注释</th></tr></thead><tbody><tr><td>ID_</td><td>varchar</td><td>64</td><td>主键</td></tr><tr><td>REV_</td><td>int</td><td>10</td><td>数据更新乐观锁</td></tr><tr><td>CATEGORY_</td><td>varchar</td><td>255</td><td>分类</td></tr><tr><td>NAME_</td><td>varchar</td><td>255</td><td>名称</td></tr><tr><td>KEY_</td><td>varchar</td><td>255</td><td>流程定义key</td></tr><tr><td>VERSION_</td><td>int</td><td>10</td><td>流程定义版本</td></tr><tr><td>DEPLOYMENT_ID_</td><td>varchar</td><td>64</td><td>关联部署ID</td></tr><tr><td>RESOURCE_NAME_</td><td>varchar</td><td>4000</td><td>流程定义存在的资源名称</td></tr><tr><td>DGRM_RESOURCE_NAME_</td><td>varchar</td><td>4000</td><td>流程图文件的资源名称，一般为空</td></tr><tr><td>DESCRIPTION_</td><td>varchar</td><td>4000</td><td>流程定义描述</td></tr><tr><td>HAS_START_FORM_KEY_</td><td>tinyint</td><td>3</td><td>是否启动表单，1是，0否，一般为0</td></tr><tr><td>HAS_GRAPHICAL_NOTATION_</td><td>tinyint</td><td>3</td><td>是否图形标记，1是，0否，可以理解成</td></tr><tr><td>xml中节点坐标等信息是否有</td><td></td><td></td><td></td></tr><tr><td>SUSPENSION_STATE_</td><td>int</td><td>10</td><td>挂起状态，1挂起，2未挂起</td></tr><tr><td>TENANT_ID_</td><td>varchar</td><td>255</td><td>租户ID</td></tr><tr><td>ENGINE_VERSION_</td><td>varchar</td><td>255</td><td>引擎版本，一般不用</td></tr><tr><td>APP_VERSION_</td><td>int</td><td>10</td><td>APP版本，一般不用</td></tr></tbody></table><p>act_re_deployment和act_re_procdef一对多关系，一次部署在流程部署表生成一条记录，但一次部署可以部署多个流程定义，每个流程定义在流程定义表生成一条记录。每一个流程定义在act_ge_bytearray会存在两个资源记录，bpmn和png。</p><p>一般情况下：一次部署一个流程，这样部署表和流程定义表是一对一有关系，方便读取流程部署及流程定义信息。</p><h3 id="_5-4-运行流程实例" tabindex="-1"><a class="header-anchor" href="#_5-4-运行流程实例" aria-hidden="true">#</a> 5.4 运行流程实例</h3><p>什么是流程实例呢？流程实例和流程部署的关系</p><p>我们还是先来看一下刚才的请假的流程图</p><figure><img src="'+R+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这个图定义好之后，是公司的任何人都会按照这个流程去执行请假，这个流程定义好之后，我们存储起来，相当于定义了一个<strong>模板</strong>，这个就是流程部署</p><p>公司有很多人，每个人请假填写的申请单是不一样的，那么只要有人填写一次申请单，就相当于是一个流程实例。简单说就是用户或程序按照流程定义内容发起一个流程，这就是一个流程实例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">RuntimeService</span> runtimeService<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initProcessInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token class-name">ProcessInstance</span> processInstance <span class="token operator">=</span> runtimeService<span class="token punctuation">.</span><span class="token function">startProcessInstanceByKey</span><span class="token punctuation">(</span><span class="token string">&quot;Process_1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;business_key_01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;流程定义Id: &quot;</span><span class="token operator">+</span> processInstance<span class="token punctuation">.</span><span class="token function">getProcessDefinitionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;流程实例Id: &quot;</span><span class="token operator">+</span> processInstance<span class="token punctuation">.</span><span class="token function">getProcessInstanceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动流程实例时，指定的businesskey，就会在act_ru_execution #流程实例的执行表中存储businesskey。</p><p>Businesskey：业务标识，通常为业务表的主键，业务标识和流程实例一一对应。业务标识来源于业务系统。存储业务标识就是根据业务标识来关联查询业务系统的数据。</p><blockquote><p>比如，在这个请假流程中，有一张表是专门存储请假单的。</p></blockquote><blockquote><p>那不同的人执行请假流程，就会有单独的流程实例，那对应的请假单表中的数据也是不一样的，通常这个businesskey关联就是因为的主键（请假单表的主键）</p></blockquote><p>控制台打印结果：</p><figure><img src="`+P+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>流程实例启动之后，也会操作相关的表结构</p><ul><li></li></ul><p>act_hi_actinst 流程实例执行历史</p><ul><li></li></ul><p>act_hi_identitylink 流程的参与用户历史信息</p><ul><li></li></ul><p>act_hi_procinst 流程实例历史信息</p><ul><li></li></ul><p>act_hi_taskinst 流程任务历史信息</p><ul><li></li></ul><p>act_ru_execution 流程执行信息</p><ul><li></li></ul><p>act_ru_identitylink 流程的参与用户信息</p><ul><li></li></ul><p>act_ru_task 任务信息</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ACT_HI_ACTINST     
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ACT_HI_IDENTITYLINK  
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ACT_HI_PROCINST      
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ACT_HI_TASKINST       
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ACT_RU_EXECUTION   
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ACT_RU_IDENTITYLINK  
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ACT_RU_TASK
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-5-任务完成和拒绝" tabindex="-1"><a class="header-anchor" href="#_5-5-任务完成和拒绝" aria-hidden="true">#</a> 5.5 任务完成和拒绝</h3><p>在操作任务的时候，我们主要使用TaskService来进行操作</p><h4 id="_5-5-1-查询待办任务" tabindex="-1"><a class="header-anchor" href="#_5-5-1-查询待办任务" aria-hidden="true">#</a> 5.5.1 查询待办任务</h4><p>我们回顾一下，请假流程图</p><figure><img src="`+j+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当流程实例创建之后，就会分配给不同的人来去执行流程中的任务（目前都是用户任务），因为在流程图中已经定义了每个节点的操作人，所以操作人可以进行查询我的待办任务</p><p>根据流程图的中的定义，第一个”填写请假单”是由<strong>张三</strong>负责的，我们就可以先查询张三的任务</p><p>代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">TaskService</span> taskService<span class="token punctuation">;</span>


<span class="token comment">//查询我的代办任务</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getTasksByAssignee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token class-name">Task</span> task <span class="token operator">=</span> taskService<span class="token punctuation">.</span><span class="token function">createTaskQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">processDefinitionKey</span><span class="token punctuation">(</span><span class="token string">&quot;Process_1&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">taskAssignee</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">processInstanceBusinessKey</span><span class="token punctuation">(</span><span class="token string">&quot;business_key_01&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">singleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">getAssignee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-5-2-填写申请单" tabindex="-1"><a class="header-anchor" href="#_5-5-2-填写申请单" aria-hidden="true">#</a> 5.5.2 填写申请单</h4><p>现在流程中的节点已经走到了张三这里，需要他进行处理，因为目前是请假申请单，所以他需要填写请假单的内容，并且提交数据，继续往下执行流程</p><ul><li>TaskService：是一个常用的API，主要用来对任务进行各种操作</li><li>调用complete方法，即可结束当前节点，并且流程会自动开启下一个节点的任务。同时在结束时还可以把填写的表单数据，作为流程变量（这些流程变量，后续再去讲解如何使用）。</li></ul><p>代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//执行任务</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">completeTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> assingee <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> businessKey <span class="token operator">=</span> <span class="token string">&quot;business_key_0001&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">//根据流程key 和 任务的负责人 查询任务</span>
    <span class="token comment">//返回一个任务对象</span>
    <span class="token class-name">Task</span> task <span class="token operator">=</span> taskService<span class="token punctuation">.</span><span class="token function">createTaskQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">processDefinitionKey</span><span class="token punctuation">(</span><span class="token string">&quot;Process_1&quot;</span><span class="token punctuation">)</span> <span class="token comment">//流程Key</span>
            <span class="token punctuation">.</span><span class="token function">taskAssignee</span><span class="token punctuation">(</span>assingee<span class="token punctuation">)</span>  <span class="token comment">//要查询的负责人</span>
            <span class="token punctuation">.</span><span class="token function">processInstanceBusinessKey</span><span class="token punctuation">(</span>businessKey<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">singleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//执行任务</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>task <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> variables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        variables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;userName&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        variables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;startDate&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;2024-01-01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        variables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;days&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        variables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;reason&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;元旦回家探亲&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        taskService<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>variables<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;任务完成...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行上面代码后，可以在act_ru_execution表中发现，新增了【经理审批】待执行的节点，而完成的【填写请假单】节点被删除了。</p><p>同时在act_ru_task表中，待办任务也变成了李四【经理审批】：</p><figure><img src="`+C+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>代码中传入的表单数据，同时也作为流程变量存储到了act_ru_variable表中（详细字段含义，后续讲解）。</p><figure><img src="'+M+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_5-5-3-经理同意" tabindex="-1"><a class="header-anchor" href="#_5-5-3-经理同意" aria-hidden="true">#</a> 5.5.3 经理同意</h4><p>关于经理同意操作的实现，如果我们把【同意】看做是经理填写的【审批表单（包括：审批结果、审批意见）】中的一个字段，那么其实现和完成填写请假单任务的实现差不多，经理点击同意之后也需要完成当前节点执行下一结束节点。</p><p>任务执行有两种情况，第一个是同意，第二个是不同意，我们先开发同意</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAgree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token class-name">Authentication</span> authentication <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAuthentication</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Task</span> task <span class="token operator">=</span> taskService<span class="token punctuation">.</span><span class="token function">createTaskQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">processDefinitionKey</span><span class="token punctuation">(</span><span class="token string">&quot;Process_1&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">taskAssignee</span><span class="token punctuation">(</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">processInstanceBusinessKey</span><span class="token punctuation">(</span><span class="token string">&quot;business_key_01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">singleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> task<span class="token punctuation">)</span><span class="token punctuation">{</span>

        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> variables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        variables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;approvalStatus&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;同意&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        variables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;approvalNote&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        taskService<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>variables<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;任务完成...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码执行成功后，到数据库中查看act_ru_execution、act_ru_task、act_ru_variable中的数据，你会发现里面没有了相关流程实例的数据，那是因为【经理审批】节点执行完成之后，后面的结束节点也会自动执行，因此流程就执行完成了。而<strong>act_ru_开头的表只存储运行中的流程信息</strong>，不会存储流程结束了的信息，<strong>结束了的相关信息都转到act_hi开头的表中存储了</strong>，相关表稍后我们再去认识。</p><h4 id="_5-5-4-经理不同意" tabindex="-1"><a class="header-anchor" href="#_5-5-4-经理不同意" aria-hidden="true">#</a> 5.5.4 经理不同意</h4><p>经理不同意和同意都是审批操作，那么不同意的实现就和同意的实现一样？不然，在这里不同意的需求要比同意的复杂一点，不同意则流程会终止执行。比如下面流程中，如果经理1审批不同意，那么经理2就不用审批了，整个流程就应该直接结束。因此不同意，则应该是终止流程而不是完成节点。</p><figure><img src="`+D+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>综上需求所述，则不同意的实现代码如下：</p><ul><li>在这里，要终止流程，因此操作的是流程实例</li><li>在删除流程时，同时也把审批不同意及理由，作为流程变量存储到流程变量中</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRejectTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> assingee <span class="token operator">=</span> <span class="token string">&quot;李四&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name">Task</span> task <span class="token operator">=</span> taskService<span class="token punctuation">.</span><span class="token function">createTaskQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">processDefinitionKey</span><span class="token punctuation">(</span><span class="token string">&quot;Process_1&quot;</span><span class="token punctuation">)</span> <span class="token comment">//流程Key</span>
        <span class="token punctuation">.</span><span class="token function">taskAssignee</span><span class="token punctuation">(</span>assingee<span class="token punctuation">)</span>  <span class="token comment">//要查询的负责人</span>
        <span class="token punctuation">.</span><span class="token function">singleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> reason <span class="token operator">=</span> <span class="token string">&quot;时间太久，不同意&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> variables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    variables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;approvalStatus&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;不同意&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    variables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;approvalNode&quot;</span><span class="token punctuation">,</span> reason<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//记录流程变量</span>
    runtimeService<span class="token punctuation">.</span><span class="token function">setVariables</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">getProcessInstanceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> variables<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//添加流程变量，删除流程实例，表示任务被拒绝</span>
    runtimeService<span class="token punctuation">.</span><span class="token function">deleteProcessInstance</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">getProcessInstanceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reason<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码执行成功后，同样在数据库中act_ru_execution、act_ru_task、act_ru_variable中的看不到数据，应为整个流程都被删除了，也结束了，信息也被转到了act_hi开头的表中。</p><p>到此，《单人审批请假流程》的整个流程就基本实现完成了。</p><h4 id="_5-5-5-查询历史任务" tabindex="-1"><a class="header-anchor" href="#_5-5-5-查询历史任务" aria-hidden="true">#</a> 5.5.5 查询历史任务</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>activiti<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>activiti<span class="token punctuation">.</span>engine<span class="token punctuation">.</span></span><span class="token class-name">HistoryService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>activiti<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>history<span class="token punctuation">.</span></span><span class="token class-name">HistoricTaskInstance</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>activiti<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>history<span class="token punctuation">.</span></span><span class="token class-name">HistoricTaskInstanceQuery</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> sjqn
 */</span>
<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HistoryTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">HistoryService</span> historyService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getHistoryList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">HistoricTaskInstanceQuery</span> instanceQuery <span class="token operator">=</span> historyService<span class="token punctuation">.</span><span class="token function">createHistoricTaskInstanceQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">includeProcessVariables</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">orderByHistoricTaskInstanceEndTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">desc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">finished</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">taskAssignee</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//自定义流程变量  条件查询</span>
<span class="token comment">//        instanceQuery.processVariableValueGreaterThan(&quot;days&quot;, &quot;1&quot;);</span>

        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HistoricTaskInstance</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> instanceQuery<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HistoricTaskInstance</span> history <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Id: &quot;</span> <span class="token operator">+</span> history<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ProcessInstanceId: &quot;</span> <span class="token operator">+</span> history<span class="token punctuation">.</span><span class="token function">getProcessInstanceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;StartTime: &quot;</span> <span class="token operator">+</span> history<span class="token punctuation">.</span><span class="token function">getStartTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Name: &quot;</span> <span class="token operator">+</span> history<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> processVariables <span class="token operator">=</span> history<span class="token punctuation">.</span><span class="token function">getProcessVariables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>processVariables<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;days&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>processVariables<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;reason&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询条件API说明</p><table><thead><tr><th>方法名称</th><th></th></tr></thead><tbody><tr><td>processInstanceBusinessKey(String processInstanceBusinessKey)</td><td>根据流程实例业务Key查询</td></tr><tr><td>taskId(String taskId)</td><td>根据任务ID查询</td></tr><tr><td>taskAssignee(String taskAssignee) | taskAssigneeLike(String taskAssignee)</td><td>根据执行人查询</td></tr><tr><td>finished()</td><td>已完成的（申请过、同意过）</td></tr><tr><td>unfinished()</td><td>未完成任务</td></tr><tr><td>orderByHistoricTaskInstanceEndTime().desc()</td><td>按照执行时间排序</td></tr><tr><td>taskName(String var1) | taskNameLike(String var1)</td><td>根据节点任务名称查询</td></tr><tr><td>list()</td><td>返回分页数据</td></tr><tr><td>includeProcessVariables()</td><td>包含流程变量（配合下面使用）</td></tr><tr><td>processVariableValueEquals(String variableName, Object variableValue)</td><td>两个值相等</td></tr><tr><td>processVariableValueNotEquals(String variableName, Object variableValue)</td><td>两个值不相等</td></tr><tr><td>processVariableValueGreaterThan(String name, Object value)</td><td>大于</td></tr><tr><td>processVariableValueLessThan(String name, Object value)</td><td>小于</td></tr></tbody></table><h2 id="_6-流程变量" tabindex="-1"><a class="header-anchor" href="#_6-流程变量" aria-hidden="true">#</a> 6 流程变量</h2><p>在刚才我们做过的例子中，其实就是固定分配，我们在画流程图的时候，指定的是具体的人去执行任务</p><figure><img src="`+B+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>比如上图中，我们创建了用户任务节点之后，可以指定代理人，目前是让张三审核</p><p>不过，在实际的开发中，不同的部门有不同的人，这个执行人应该是一个变量，不应该写死，所以，固定分配可以在我们做demo的时候使用，在业务开发的过程中，需要使用动态的设置代理人</p><h3 id="_6-1-uel表达式" tabindex="-1"><a class="header-anchor" href="#_6-1-uel表达式" aria-hidden="true">#</a> 6.1 UEL表达式</h3><p>我们现在想要动态的设置任务的代理人，我们就可以使用UEL表达式来完成。</p><p>UEL表达式（Unified Expression Language），是一种用于在流程定义中评估和计算表达式的语言。可以用来做流程条件判断、变量赋值等，使得流程定义或运行变得更加的灵活。</p><ul><li>定界符：<code>${assignee} | ${user.assignee}</code></li><li>数学运算：<code>${ 5+5 }</code></li><li>逻辑判断：<code>${amount &gt; 100}</code></li><li>方法调用：<code>${ list(&#39;参数&#39;) }</code>，调用的是list方法，这个方法是Activiti内置的方法，把参数转成一个集合</li></ul><h3 id="_6-2-动态分配任务人" tabindex="-1"><a class="header-anchor" href="#_6-2-动态分配任务人" aria-hidden="true">#</a> 6.2 动态分配任务人</h3><h4 id="_6-2-1-改造流程图" tabindex="-1"><a class="header-anchor" href="#_6-2-1-改造流程图" aria-hidden="true">#</a> 6.2.1 改造流程图</h4><p>打开BPMN-JS前端工程，修改刚才的请假流程图，需要修改两个节点，分别是填写申请单、经理审核</p><p>第一：修改”填写申请单”任务节点，代理人改为：<code>${assingee0}</code></p><figure><img src="'+O+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>第二：修改”经理审核”任务节点，代理人改为：<code>${assingee1}</code></p><figure><img src="'+L+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>第三：重新导出流程图，放到idea中</p><p>为了跟之前的流程图区分，我们在导出之前可以修改流程图的编号，目前为：Process_2，如下：</p><figure><img src="'+z+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>流程图文件的名字改为：diagram-uel.bpmn</p><figure><img src="'+H+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_6-2-2-动态分配" tabindex="-1"><a class="header-anchor" href="#_6-2-2-动态分配" aria-hidden="true">#</a> 6.2.2 动态分配</h4>',190),un=n("p",null,[s("我们现在的任务是UEL表达式来动态分配代理人的，其中的流程部署和任务执行的方式都一样，唯一不同的是，启动流程实例的时候，需要设置流程变量，来给刚才的"),n("img",{src:"https://www.yuque.com/api/services/graph/generate_redirect/latex?{assingee0}和#card=math&code={assingee0}和",alt:"",assingee1:"",loading:"lazy"}),s("赋值，这样就能做到，多个人申请流程，是多套流程实例，每一套都有可能是不同的人来去处理任务")],-1),kn=a(`<p>代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>activiti<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> sjqn
 * <span class="token keyword">@date</span> 2023/9/30
 */</span>
<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UELTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">RepositoryService</span> repositoryService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">RuntimeService</span> runtimeService<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 流程部署
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deployProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> fileName <span class="token operator">=</span> <span class="token string">&quot;bpmn/diagram-uel.bpmn&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">//定义流程</span>
        <span class="token class-name">Deployment</span> deployment <span class="token operator">=</span> repositoryService<span class="token punctuation">.</span><span class="token function">createDeployment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">addClasspathResource</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&quot;Process_2&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//部署流程</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>deployment<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>deployment<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initProcessInstanceWithArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//流程变量</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> variables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        variables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;assingee0&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;赵六&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        variables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;assingee1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;王五&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//启动流程实例</span>
        <span class="token class-name">ProcessInstance</span> processInstance <span class="token operator">=</span> runtimeService<span class="token punctuation">.</span><span class="token function">startProcessInstanceByKey</span><span class="token punctuation">(</span>
                <span class="token string">&quot;Process_2&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;business_key_02&quot;</span><span class="token punctuation">,</span>
                variables<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//Process_2:1:2ca378d1-fe9b-11ed-b40d-5405db5be13e</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;流程实例ID: &quot;</span> <span class="token operator">+</span> processInstance<span class="token punctuation">.</span><span class="token function">getProcessDefinitionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-2-3-任务查询和执行" tabindex="-1"><a class="header-anchor" href="#_6-2-3-任务查询和执行" aria-hidden="true">#</a> 6.2.3 任务查询和执行</h4><p>任务查询和执行还是跟之前是一样的，因为现在我们已经给任务节点分配了执行人，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//查询我的代办任务</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getTasksByAssignee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> assingee <span class="token operator">=</span> <span class="token string">&quot;赵六&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name">Task</span> task <span class="token operator">=</span> taskService<span class="token punctuation">.</span><span class="token function">createTaskQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">processDefinitionKey</span><span class="token punctuation">(</span><span class="token string">&quot;Process_2&quot;</span><span class="token punctuation">)</span> <span class="token comment">//流程Key</span>
        <span class="token punctuation">.</span><span class="token function">taskAssignee</span><span class="token punctuation">(</span>assingee<span class="token punctuation">)</span>  <span class="token comment">//要查询的负责人</span>
        <span class="token punctuation">.</span><span class="token function">singleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Id: &quot;</span> <span class="token operator">+</span> task<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Name: &quot;</span> <span class="token operator">+</span> task<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Assignee: &quot;</span> <span class="token operator">+</span> task<span class="token punctuation">.</span><span class="token function">getAssignee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//执行任务</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">completeTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> assingee <span class="token operator">=</span> <span class="token string">&quot;赵六&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">//根据流程key 和 任务的负责人 查询任务</span>
    <span class="token comment">//返回一个任务对象</span>
    <span class="token class-name">Task</span> task <span class="token operator">=</span> taskService<span class="token punctuation">.</span><span class="token function">createTaskQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">processDefinitionKey</span><span class="token punctuation">(</span><span class="token string">&quot;Process_2&quot;</span><span class="token punctuation">)</span> <span class="token comment">//流程Key</span>
        <span class="token punctuation">.</span><span class="token function">taskAssignee</span><span class="token punctuation">(</span>assingee<span class="token punctuation">)</span>  <span class="token comment">//要查询的负责人</span>
        <span class="token punctuation">.</span><span class="token function">singleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>task <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>assingee <span class="token operator">+</span> <span class="token string">&quot;,没有任务可以执行...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">//执行任务</span>

        <span class="token comment">// 把张三填写的请假单中的数据，作为流程变量，设置到流程中</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> variables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        variables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;userName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;赵六&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        variables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;startDate&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2024-1-1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        variables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;days&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        variables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;reason&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;元旦回家&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        taskService<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> variables<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;完成任务&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中经理审批的同意和不同意跟之前的代码是一样的，大家可以参考之前的代码</p><h4 id="_6-2-4-其他类型支持" tabindex="-1"><a class="header-anchor" href="#_6-2-4-其他类型支持" aria-hidden="true">#</a> 6.2.4 其他类型支持</h4><p>刚才的例子只是UEL表达式中最基本的设置变量的方式，UEL还支持其他很多类型，比如：</p><p>使用pojo对象赋值</p><figure><img src="`+K+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>spring的bean</p><figure><img src="'+V+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_6-3-动态分配连线上的变量" tabindex="-1"><a class="header-anchor" href="#_6-3-动态分配连线上的变量" aria-hidden="true">#</a> 6.3 动态分配连线上的变量</h3><h4 id="_6-3-1-需求说明" tabindex="-1"><a class="header-anchor" href="#_6-3-1-需求说明" aria-hidden="true">#</a> 6.3.1 需求说明</h4><p>我们先来看一个新的需求，如下图</p><figure><img src="'+U+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>一个员工请假，如果请假天数不超过3天，则由经理审批，如果请假天数超过3天，则由总经理审批</p><p>这个就需要我们在流程连上设置变量，就是我们刚才说的UEL表达式</p><h4 id="_6-3-2-画流程图" tabindex="-1"><a class="header-anchor" href="#_6-3-2-画流程图" aria-hidden="true">#</a> 6.3.2 画流程图</h4><figure><img src="'+Y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上面流程中，重点是在经理审批和总经理审批的连上中设置UEL变量</p><ul><li>经理审批---&gt; <code>${days &lt;= 3}</code></li><li>总经理审批---&gt; <code>${days &gt; 3}</code></li></ul><p>我们画好流程图之后，需要把它导出，然后放到idea中的</p><figure><img src="'+G+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_6-3-3-代码开发" tabindex="-1"><a class="header-anchor" href="#_6-3-3-代码开发" aria-hidden="true">#</a> 6.3.3 代码开发</h4><p>(1)部署流程</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> sjqn
 * <span class="token keyword">@date</span> 2023/9/16
 */</span>
<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SequenceTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">RepositoryService</span> repositoryService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">RuntimeService</span> runtimeService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">TaskService</span> taskService<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 流程部署
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deployProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> fileName <span class="token operator">=</span> <span class="token string">&quot;bpmn/diagram-sequence.bpmn&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">//定义流程</span>
        <span class="token class-name">Deployment</span> deployment <span class="token operator">=</span> repositoryService<span class="token punctuation">.</span><span class="token function">createDeployment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">addClasspathResource</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&quot;Process_3&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//部署流程</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>deployment<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>deployment<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(2)启动流程实例，设置流程变量</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> sjqn
 * <span class="token keyword">@date</span> 2023/9/16
 */</span>
<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SequenceTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">RepositoryService</span> repositoryService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">RuntimeService</span> runtimeService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">TaskService</span> taskService<span class="token punctuation">;</span>


    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initProcessInstanceWithArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//流程变量</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> variables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        variables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;assingee0&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        variables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;assingee1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        variables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;assingee2&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;王五&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//启动流程实例</span>
        <span class="token class-name">ProcessInstance</span> processInstance <span class="token operator">=</span> runtimeService<span class="token punctuation">.</span><span class="token function">startProcessInstanceByKey</span><span class="token punctuation">(</span>
                <span class="token string">&quot;Process_3&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;business_key_03&quot;</span><span class="token punctuation">,</span>
                variables<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//Process_2:1:2ca378d1-fe9b-11ed-b40d-5405db5be13e</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;流程实例ID: &quot;</span> <span class="token operator">+</span> processInstance<span class="token punctuation">.</span><span class="token function">getProcessDefinitionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(3)填写请假单</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>activiti<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>activiti<span class="token punctuation">.</span>engine<span class="token punctuation">.</span></span><span class="token class-name">RepositoryService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>activiti<span class="token punctuation">.</span>engine<span class="token punctuation">.</span></span><span class="token class-name">RuntimeService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>activiti<span class="token punctuation">.</span>engine<span class="token punctuation">.</span></span><span class="token class-name">TaskService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>activiti<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>repository<span class="token punctuation">.</span></span><span class="token class-name">Deployment</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>activiti<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span></span><span class="token class-name">ProcessInstance</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>activiti<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>task<span class="token punctuation">.</span></span><span class="token class-name">Task</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> sjqn
 * <span class="token keyword">@date</span> 2023/9/16
 */</span>
<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SequenceTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">RepositoryService</span> repositoryService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">RuntimeService</span> runtimeService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">TaskService</span> taskService<span class="token punctuation">;</span>


    <span class="token comment">//查询我的代办任务</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getTasksByAssignee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">String</span> assingee <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> businessKey <span class="token operator">=</span> <span class="token string">&quot;business_key_03&quot;</span><span class="token punctuation">;</span>

        <span class="token class-name">Task</span> task <span class="token operator">=</span> taskService<span class="token punctuation">.</span><span class="token function">createTaskQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">processDefinitionKey</span><span class="token punctuation">(</span><span class="token string">&quot;Process3&quot;</span><span class="token punctuation">)</span> <span class="token comment">//流程Key</span>
                <span class="token punctuation">.</span><span class="token function">taskAssignee</span><span class="token punctuation">(</span>assingee<span class="token punctuation">)</span>  <span class="token comment">//要查询的负责人</span>
                <span class="token punctuation">.</span><span class="token function">processInstanceBusinessKey</span><span class="token punctuation">(</span>businessKey<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">singleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Id: &quot;</span> <span class="token operator">+</span> task<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Name: &quot;</span> <span class="token operator">+</span> task<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Assignee: &quot;</span> <span class="token operator">+</span> task<span class="token punctuation">.</span><span class="token function">getAssignee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//执行任务</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">completeTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">String</span> assingee <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> businessKey <span class="token operator">=</span> <span class="token string">&quot;business_key_03&quot;</span><span class="token punctuation">;</span>

        <span class="token comment">//根据流程key 和 任务的负责人 查询任务</span>
        <span class="token comment">//返回一个任务对象</span>
        <span class="token class-name">Task</span> task <span class="token operator">=</span> taskService<span class="token punctuation">.</span><span class="token function">createTaskQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">processDefinitionKey</span><span class="token punctuation">(</span><span class="token string">&quot;Process3&quot;</span><span class="token punctuation">)</span> <span class="token comment">//流程Key</span>
                <span class="token punctuation">.</span><span class="token function">taskAssignee</span><span class="token punctuation">(</span>assingee<span class="token punctuation">)</span>  <span class="token comment">//要查询的负责人</span>
                <span class="token punctuation">.</span><span class="token function">processInstanceBusinessKey</span><span class="token punctuation">(</span>businessKey<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">singleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>task <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>assingee <span class="token operator">+</span> <span class="token string">&quot;,没有任务可以执行...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">//执行任务</span>

            <span class="token comment">// 把张三填写的请假单中的数据，作为流程变量，设置到流程中</span>
            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> variables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            variables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;userName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            variables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;startDate&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2024-1-1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            variables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;days&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            variables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;reason&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;元旦回家&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            taskService<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> variables<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;完成任务&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当<code>张三</code>填写申请单，我们重点设置<code>days</code>这个变量</li><li>当<code>days</code>变量小于等于3则会把下一个任务分配经理(李四)审批</li><li>当<code>days</code>变量大于3则会把下一个任务分配给总经理(王五)审批</li></ul><p>(4)经理审批或总经理审批</p><p>通过流程变量<code>days</code>控制之后，分配到了经理审批或总经理审批完成整个流程任务</p><h2 id="_7-流程网关" tabindex="-1"><a class="header-anchor" href="#_7-流程网关" aria-hidden="true">#</a> 7 流程网关</h2><h3 id="_7-1-概述" tabindex="-1"><a class="header-anchor" href="#_7-1-概述" aria-hidden="true">#</a> 7.1 概述</h3><p>网关（Gateway）是用于控制流程执行流向的元素。网关的作用是在流程执行时进行决策，决定流程的下一个执行步骤。根据网关的决策方式，可以将BPMN网关分为以下几种类型：</p><ol><li>排他网关（Exclusive Gateway）：也称为XOR网关或基于数据的排他网关，用于在流程中创建决策点。当执行到达排他网关时，所有出口顺序流会按照它们定义的顺序进行计算。条件计算为true的顺序流会被选择用于继续流程。</li><li>包容网关（Inclusive Gateway）：也称为AND网关或包容性决策网关，用于在流程中创建平行的路径。当执行到达包容网关时，所有出口顺序流同时进行计算，并且至少要有一个条件计算为true的顺序流被选择用于继续流程。</li><li>综合网关（Complex Gateway）：用于模拟复杂的同步行为。通过表达式激活条件描述精确的行为。</li><li>基于事件的网关（Event-based Gateway）：基于事件的网关代表流程中的一个分支点，其中遵循网关的替代路径基于发生的事件，而不是使用流程数据对表达式的评估。</li><li>并行网关（Parallel Gateway）：用于同步（组合）并行流并创建并行流。</li></ol><figure><img src="`+Q+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_7-2-排他网关" tabindex="-1"><a class="header-anchor" href="#_7-2-排他网关" aria-hidden="true">#</a> 7.2 排他网关</h3><p>排他网关，用来在流程中实现决策。 当流程执行到这个网关，所有分支都会判断条件是否为true，如果为true则执行该分支，</p><p><strong>注意</strong>：排他网关只会选择一个为true的分支执行。如果有两个分支条件都为true，排他网关会选择id值较小的一条分支去执行。</p><p>为什么要用排他网关？</p><p>不用排他网关也可以实现分支，如：在连线的condition条件上设置分支条件。</p><p>在连线设置condition条件的缺点：如果条件都不满足，流程就结束了(是异常结束)。</p><p>如果 使用排他网关决定分支的走向，如下：</p><figure><img src="'+F+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果从网关出去的线所有条件都不满足则系统抛出异常。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>activiti<span class="token punctuation">.</span>engine<span class="token punctuation">.</span></span>ActivitiException</span><span class="token operator">:</span> <span class="token class-name">No</span> outgoing sequence flow of the exclusive gateway &#39;exclusivegateway1&#39; could be selected <span class="token keyword">for</span> continuing the process
   at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>activiti<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>bpmn<span class="token punctuation">.</span>behavior<span class="token punctuation">.</span></span>ExclusiveGatewayActivityBehavior</span><span class="token punctuation">.</span><span class="token function">leave</span><span class="token punctuation">(</span><span class="token class-name">ExclusiveGatewayActivityBehavior</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">85</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>实现代码：参考6.3章节中</p></blockquote><h2 id="_8-作业" tabindex="-1"><a class="header-anchor" href="#_8-作业" aria-hidden="true">#</a> 8 作业</h2><p>采购流程审批</p><figure><img src="`+$+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',53);function rn(dn,vn){const t=c("ExternalLinkIcon");return o(),i("div",null,[J,n("p",null,[s("官网地址："),n("a",W,[s("https://www.activiti.org/"),p(t)])]),Z,n("p",null,[s("官网："),n("a",nn,[s("https://www.bpmn.org/"),p(t)])]),sn,n("p",null,[s("虽然BPMN是一个标记语言，但是在实际中，我们很少直接去用它语法进行开发，而是直接使用流程设计器来画，而画用前端技术即可实现，在前端开源项目中有一个叫bpmn-js的开源项目，现在几乎成了画流程的标准，市面上的流程设计器基本都是基于它改造的。比如Activiti7官网提供的："),n("a",an,[s("https://github.com/activiti/activiti-modeling-app设计器，就是基于bpmn-js实现的"),p(t)])]),tn,pn,en,cn,n("p",null,[s("启动成功之后，访问地址为："),n("a",on,[s("http://localhost:9013/"),p(t)])]),ln,un,kn])}const bn=e(X,[["render",rn],["__file","day07-工作流-Activiti7基础.html.vue"]]);export{bn as default};
