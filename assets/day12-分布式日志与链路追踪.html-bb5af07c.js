import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c as i,a,b as n,d as t,e}from"./app-5f6064b2.js";const c="/assets/image-20240407183435258-280-fa4b6073.gif",r="/assets/image-20240407183435285-378-e1b3967f.png",u="/assets/image-20240407183435285-379-6267e5e0.png",d="/assets/image-20240407183435285-380-e35894cf.png",g="/assets/image-20240407183435285-381-7f4c04c8.png",k="/assets/image-20240407183435285-382-614bcecf.png",m="/assets/image-20240407183435285-383-35e758bd.png",v="/assets/image-20240407183435285-384-8ba47ac1.png",b="/assets/image-20240407183435285-385-deea59b5.png",h="/assets/image-20240407183435285-386-15e33043.png",_="/assets/image-20240407183435285-387-bd186f3d.png",y="/assets/image-20240407183435286-388-73c01e01.png",f="/assets/image-20240407183435286-389-f91f4782.png",q="/assets/image-20240407183435286-390-5b6c8ac3.png",G="/assets/image-20240407183435286-391-30ed9460.png",S="/assets/image-20240407183435286-392-b1fd26d7.png",E="/assets/image-20240407183435286-393-444ef6f4.png",L="/assets/image-20240407183435286-394-b0790e5a.png",A="/assets/image-20240407183435286-395-bd15c51c.png",x="/assets/image-20240407183435286-396-2e220641.png",O="/assets/image-20240407183435286-397-8ad96b20.png",w="/assets/image-20240407183435286-398-650b3d3d.png",R="/assets/image-20240407183435286-399-6ef29ea5.png",T="/assets/image-20240407183435286-400-9b10f294.png",I="/assets/image-20240407183435286-401-1bd15c30.png",z="/assets/image-20240407183435286-402-3116d963.png",D="/assets/image-20240407183435286-403-b77692ca.png",P="/assets/image-20240407183435286-404-12d6351f.png",N="/assets/image-20240407183435286-405-575c3897.png",M="/assets/image-20240407183435286-406-c8a0d609.png",F="/assets/image-20240407183435286-407-93d5443a.png",B="/assets/image-20240407183435286-408-2ed169b6.png",C="/assets/image-20240407183435286-409-9fa67658.png",U="/assets/image-20240407183435286-410-223a4c24.png",j="/assets/image-20240407183435286-411-b6c17308.png",W="/assets/image-20240407183435286-412-e123abea.png",H="/assets/image-20240407183435286-413-26b2e33c.png",Y="/assets/image-20240407183435287-414-6cb7145e.png",$="/assets/image-20240407183435287-415-e0995e97.png",J="/assets/image-20240407183435287-416-4b8382d3.png",K="/assets/image-20240407183435287-417-ef966e56.png",V="/assets/image-20240407183435287-418-c27a9f0b.png",Z={},X=e('<h1 id="_1、课程安排" tabindex="-1"><a class="header-anchor" href="#_1、课程安排" aria-hidden="true">#</a> 1、课程安排</h1><ul><li>了解什么是分布式日志</li><li>Graylog的部署安装</li><li>使用Graylog进行日志收集</li><li>Graylog的搜索语法</li><li>了解什么是链路追踪</li><li>Skywalking的基本使用</li><li>整合微服务使用Skywalking</li><li>将Skywalking整合到Docker中</li></ul><h1 id="_2、背景说明" tabindex="-1"><a class="header-anchor" href="#_2、背景说明" aria-hidden="true">#</a> 2、背景说明</h1><p>在微服务架构体系中，微服务上线后，有两个不容忽略的问题，一是日志该怎么存储、查看，二是如何在复杂的调用链中排查问题。<br><img src="'+c+'" alt="" loading="lazy"></p><h2 id="_2-1、日志问题" tabindex="-1"><a class="header-anchor" href="#_2-1、日志问题" aria-hidden="true">#</a> 2.1、日志问题</h2><p>在微服务架构下，微服务被拆分成多个微小的服务，每个微小的服务都部署在不同的服务器实例上，当我们定位问题，检索日志的时候需要依次登录每台服务器进行检索。<br> 这样是不是感觉很繁琐和效率低下？所以我们还需要一个工具来帮助集中收集、存储和搜索这些跟踪信息。<br> 集中化管理日志后，日志的统计和检索又成为一件比较麻烦的事情。以前，我们通过使用grep、awk和wc等Linux命令能实现检索和统计，但是对于要求更高的查询、排序和统计等要求和庞大的机器数量依然使用这样的方法难免有点力不从心。<br> 所以，需要通过<strong>分布式日志服务</strong>来帮我们解决上述问题的。</p><h2 id="_2-2、调用链问题" tabindex="-1"><a class="header-anchor" href="#_2-2、调用链问题" aria-hidden="true">#</a> 2.2、调用链问题</h2><p>在微服务架构下，如何排查异常的微服务，比如：发布新版本后发现系统处理用户请求变慢了，要想解决这个问首先是要找出“慢”的环节，此时就需要对整个微服务的调用链有清晰的监控，否则是不容易找出问题的。下面所展现的就是通过skywalking可以查看微服务的调用链，就会比较容易的找出问题：<br><img src="'+r+'" alt="" loading="lazy"></p><h1 id="_3、分布式日志" tabindex="-1"><a class="header-anchor" href="#_3、分布式日志" aria-hidden="true">#</a> 3、分布式日志</h1><h2 id="_3-1、实现思路" tabindex="-1"><a class="header-anchor" href="#_3-1、实现思路" aria-hidden="true">#</a> 3.1、实现思路</h2><p>分布式日志框架服务的实现思路基本是一致的，如下：</p><ul><li>**日志收集器：**微服务中引入日志客户端，将记录的日志发送到日志服务端的收集器，然后以某种方式存储</li><li>**数据存储：**一般使用ElasticSearch分布式存储，把收集器收集到的日志格式化，然后存储到分布式存储中</li><li>**web服务：**利用ElasticSearch的统计搜索功能，实现日志查询和报表输出</li></ul><p>比较知名的分布式日志服务包括：</p><ul><li>ELK：elasticsearch、Logstash、Kibana</li><li>GrayLog</li></ul><p>本课程主要是基于GrayLog讲解。</p><h2 id="_3-2、为什么选择graylog" tabindex="-1"><a class="header-anchor" href="#_3-2、为什么选择graylog" aria-hidden="true">#</a> 3.2、为什么选择GrayLog？</h2><p>业界比较知名的分布式日志服务解决方案是ELK，而我们今天要学习的是GrayLog。为什么呢？<br> ELK解决方案的问题：</p><ol><li>不能处理多行日志，比如Mysql慢查询，Tomcat/Jetty应用的Java异常打印</li><li>不能保留原始日志，只能把原始日志分字段保存，这样搜索日志结果是一堆Json格式文本，无法阅读。</li><li>不符合正则表达式匹配的日志行，被全部丢弃。</li></ol><p>GrayLog方案的优势：</p><ol><li>一体化方案，安装方便，不像ELK有3个独立系统间的集成问题。</li><li>采集原始日志，并可以事后再添加字段，比如http_status_code，response_time等等。</li><li>自己开发采集日志的脚本，并用curl/nc发送到Graylog Server，发送格式是自定义的GELF，Flunted和Logstash都有相应的输出GELF消息的插件。自己开发带来很大的自由度。实际上只需要用inotifywait监控日志的modify事件，并把日志的新增行用curl/netcat发送到Graylog Server就可。</li><li>搜索结果高亮显示，就像google一样。</li><li>搜索语法简单，比如： <code>source:mongo AND reponse_time_ms:&gt;5000</code>，避免直接输入elasticsearch搜索json语法</li><li>搜索条件可以导出为elasticsearch的搜索json文本，方便直接开发调用elasticsearch rest api的搜索脚本。</li></ol><h2 id="_3-3、graylog简介" tabindex="-1"><a class="header-anchor" href="#_3-3、graylog简介" aria-hidden="true">#</a> 3.3、GrayLog简介</h2>',21),Q=a("br",null,null,-1),aa={href:"https://www.graylog.org/",target:"_blank",rel:"noopener noreferrer"},na=a("br",null,null,-1),sa=a("br",null,null,-1),ta=a("img",{src:u,alt:"",loading:"lazy"},null,-1),ea=a("br",null,null,-1),la=e(`<ul><li>微服务中的GrayLog客户端发送日志到GrayLog服务端</li><li>GrayLog把日志信息格式化，存储到Elasticsearch</li><li>客户端通过浏览器访问GrayLog，GrayLog访问Elasticsearch</li></ul><p>这里MongoDB是用来存储GrayLog的配置信息的，这样搭建集群时，GrayLog的各节点可以共享配置。</p><h2 id="_3-4、部署安装" tabindex="-1"><a class="header-anchor" href="#_3-4、部署安装" aria-hidden="true">#</a> 3.4、部署安装</h2><p>我们在虚拟机中选择使用Docker来安装。需要安装的包括：</p><ul><li>MongoDB：用来存储GrayLog的配置信息</li><li>Elasticsearch：用来存储日志信息</li><li>GrayLog：GrayLog服务端</li></ul><p>下面将通过docker的方式部署，镜像已经下载到101虚拟机中，部署脚本如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#部署Elasticsearch</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">--name</span> elasticsearch <span class="token punctuation">\\</span>
    <span class="token parameter variable">-e</span> <span class="token string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">-e</span> <span class="token string">&quot;discovery.type=single-node&quot;</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">-v</span> es-data:/usr/share/elasticsearch/data <span class="token punctuation">\\</span>
    <span class="token parameter variable">-v</span> es-plugins:/usr/share/elasticsearch/plugins <span class="token punctuation">\\</span>
    <span class="token parameter variable">--privileged</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">-p</span> <span class="token number">9200</span>:9200 <span class="token punctuation">\\</span>
    <span class="token parameter variable">-p</span> <span class="token number">9300</span>:9300 <span class="token punctuation">\\</span>
elasticsearch:7.17.5

<span class="token comment">#部署MongoDB（使用之前部署的服务即可）</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span> mongodb <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">27017</span>:27017 <span class="token punctuation">\\</span>
<span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> mongodb:/data/db <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">MONGO_INITDB_ROOT_USERNAME</span><span class="token operator">=</span>sl <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">MONGO_INITDB_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123321</span> <span class="token punctuation">\\</span>
mongo:4.4

<span class="token comment">#部署</span>
<span class="token function">docker</span> run <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span> graylog <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">9000</span>:9000 <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">12201</span>:12201/udp <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">GRAYLOG_HTTP_EXTERNAL_URI</span><span class="token operator">=</span>http://192.168.150.101:9000/ <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">GRAYLOG_ELASTICSEARCH_HOSTS</span><span class="token operator">=</span>http://192.168.150.101:9200/ <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">GRAYLOG_ROOT_TIMEZONE</span><span class="token operator">=</span><span class="token string">&quot;Asia/Shanghai&quot;</span>  <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">GRAYLOG_WEB_ENDPOINT_URI</span><span class="token operator">=</span><span class="token string">&quot;http://192.168.150.101:9000/:9000/api&quot;</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">GRAYLOG_PASSWORD_SECRET</span><span class="token operator">=</span><span class="token string">&quot;somepasswordpepper&quot;</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">GRAYLOG_ROOT_PASSWORD_SHA2</span><span class="token operator">=</span>8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918 <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">GRAYLOG_MONGODB_URI</span><span class="token operator">=</span>mongodb://sl:123321@192.168.150.101:27017/admin <span class="token punctuation">\\</span>
<span class="token parameter variable">-d</span> <span class="token punctuation">\\</span>
graylog/graylog:4.3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>命令解读：</p><ul><li>端口信息： <ul><li><code>-p 9000:9000</code>：GrayLog的http服务端口，9000</li><li><code>-p 12201:12201/udp</code>：GrayLog的GELF UDP协议端口，用于接收从微服务发来的日志信息</li></ul></li><li>环境变量 <ul><li><code>-e GRAYLOG_HTTP_EXTERNAL_URI</code>：对外开放的ip和端口信息，这里用9000端口</li><li><code>-e GRAYLOG_ELASTICSEARCH_HOSTS</code>：GrayLog依赖于ES，这里指定ES的地址</li><li><code>-e GRAYLOG_WEB_ENDPOINT_URI</code>：对外开放的API地址</li><li><code>-e GRAYLOG_PASSWORD_SECRET</code>：密码加密的秘钥</li><li><code>-e GRAYLOG_ROOT_PASSWORD_SHA2</code>：密码加密后的密文。明文是<code>admin</code>，账户也是<code>admin</code></li><li><code>-e GRAYLOG_ROOT_TIMEZONE=&quot;Asia/Shanghai&quot;</code>：GrayLog容器内时区</li><li><code>-e GRAYLOG_MONGODB_URI</code>：指定MongoDB的链接信息</li></ul></li><li><code>graylog/graylog:4.3</code>：使用的镜像名称，版本为4.3</li></ul>`,9),pa={href:"http://192.168.150.101:9000/",target:"_blank",rel:"noopener noreferrer"},oa=a("br",null,null,-1),ia=a("img",{src:d,alt:"",loading:"lazy"},null,-1),ca=a("br",null,null,-1),ra=a("code",null,"admin/admin",-1),ua=a("br",null,null,-1),da=a("img",{src:g,alt:"",loading:"lazy"},null,-1),ga=e('<h2 id="_3-5、收集日志" tabindex="-1"><a class="header-anchor" href="#_3-5、收集日志" aria-hidden="true">#</a> 3.5、收集日志</h2><h3 id="_3-5-1、配置inputs" tabindex="-1"><a class="header-anchor" href="#_3-5-1、配置inputs" aria-hidden="true">#</a> 3.5.1、配置Inputs</h3><p>部署完成GrayLog后，需要配置Inputs才能接收微服务发来的日志数据。<br> 第一步，在<code>System</code>菜单中选择<code>Inputs</code>：<br><img src="'+k+'" alt="" loading="lazy"><br> 第二步，在页面的下拉选框中，选择<code>GELF UDP</code>：<br><img src="'+m+'" alt="" loading="lazy"><br> 然后点击<code>Launch new input</code>按钮：<br><img src="'+v+'" alt="" loading="lazy"><br> 点击<code>save</code>保存：<br><img src="'+b+`" alt="" loading="lazy"><br> 可以看到，GELF UDP Inputs 保存成功。</p><h3 id="_3-5-2、集成微服务" tabindex="-1"><a class="header-anchor" href="#_3-5-2、集成微服务" aria-hidden="true">#</a> 3.5.2、集成微服务</h3><p>现在，GrayLog的服务端日志收集器已经准备好，我们还需要在项目中添加GrayLog的客户端，将项目日志发送到GrayLog服务中，保存到ElasticSearch。<br> 基本步骤如下：</p><ul><li>引入GrayLog客户端依赖</li><li>配置Logback，集成GrayLog的Appender</li><li>启动并测试</li></ul><p>这里，我们以work微服务为例，其他的类似。<br> 导入依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>biz.paluch.logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>logstash-gelf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.15.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置Logback，在配置文件中增加 GELF的appender：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token comment">&lt;!--scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。--&gt;</span>
<span class="token comment">&lt;!--scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。--&gt;</span>
<span class="token comment">&lt;!--debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span> <span class="token attr-name">debug</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span> <span class="token attr-name">scan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span> <span class="token attr-name">scanPeriod</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>60 seconds<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProperty</span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>context<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>appName<span class="token punctuation">&quot;</span></span> <span class="token attr-name">source</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>spring.application.name<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token comment">&lt;!--文件名--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>logback.appname<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${appName}<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token comment">&lt;!--文件位置--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>logback.logdir<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/data/logs<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

    <span class="token comment">&lt;!-- 定义控制台输出 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stdout<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ch.qos.logback.classic.PatternLayout<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} - [%thread] - %-5level - %logger{50} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>


    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>FILE<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ch.qos.logback.classic.filter.ThresholdFilter<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">&gt;</span></span>DEBUG<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>File</span><span class="token punctuation">&gt;</span></span>\${logback.logdir}/\${logback.appname}/\${logback.appname}.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>File</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FileNamePattern</span><span class="token punctuation">&gt;</span></span>\${logback.logdir}/\${logback.appname}/\${logback.appname}.%d{yyyy-MM-dd}.log.zip<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FileNamePattern</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">&gt;</span></span>90<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>%d [%thread] %-5level %logger{36} %line - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>GELF<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>biz.paluch.logging.gelf.logback.GelfLogbackAppender<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--GrayLog服务地址--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">&gt;</span></span>udp:192.168.150.101<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--GrayLog服务端口--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">&gt;</span></span>12201<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--当前服务名称--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>facility</span><span class="token punctuation">&gt;</span></span>\${appName}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>facility</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>extractStackTrace</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>extractStackTrace</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filterStackTrace</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filterStackTrace</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mdcProfiling</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mdcProfiling</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timestampPattern</span><span class="token punctuation">&gt;</span></span>yyyy-MM-dd HH:mm:ss,SSS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timestampPattern</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maximumMessageSize</span><span class="token punctuation">&gt;</span></span>8192<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maximumMessageSize</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!--evel:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，--&gt;</span>
    <span class="token comment">&lt;!--不能设置为INHERITED或者同义词NULL。默认是DEBUG。--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>INFO<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stdout<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>GELF<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改代码，<code>com.sl.ms.work.controller.TransportOrderController#findStatusCount()</code>进入打印日志便于查看数据，启动服务，点击search按钮即可看到日志数据：<br><img src="`+h+'" alt="" loading="lazy"></p><h2 id="_3-6、日志回收策略" tabindex="-1"><a class="header-anchor" href="#_3-6、日志回收策略" aria-hidden="true">#</a> 3.6、日志回收策略</h2><p>到此graylog的基础配置就算完成了，已经可以收到日志数据。<br> 但是在实际工作中，服务日志会非常多，这么多的日志，如果不进行存储限制，那么不久就会占满磁盘，查询变慢等等，而且过久的历史日志对于实际工作中的有效性也会很低。<br> Graylog则自身集成了日志数据限制的配置，可以通过如下进行设置：<br><img src="'+_+'" alt="" loading="lazy"><br> 选择<code>Default index set</code>的<code>Edit</code>按钮：<br><img src="'+y+'" alt="" loading="lazy"><br> GrayLog有3种日志回收限制，触发以后就会开始回收空间，删除索引：<br><img src="'+f+'" alt="" loading="lazy"><br> 分别是：</p><ul><li><code>Index Message Count</code>：按照日志数量统计，默认超过<code>20000000</code>条日志开始清理 <ul><li>我们测试时，设置<code>100000</code>即可</li></ul></li><li><code>Index Size</code>：按照日志大小统计，默认超过<code>1GB</code>开始清理</li><li><code>Index Message Count</code>：按照日志日期清理，默认日志存储1天</li></ul><h2 id="_3-7、搜索语法" tabindex="-1"><a class="header-anchor" href="#_3-7、搜索语法" aria-hidden="true">#</a> 3.7、搜索语法</h2><p>在search页面，可以完成基本的日志搜索功能：<br><img src="'+q+`" alt="" loading="lazy"></p><h3 id="_3-7-1、搜索语法" tabindex="-1"><a class="header-anchor" href="#_3-7-1、搜索语法" aria-hidden="true">#</a> 3.7.1、搜索语法</h3><p>搜索语法非常简单，输入关键字或指定字段进行搜索：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#不指定字段，默认从message字段查询</span>
输入：undo

<span class="token comment">#输入两个关键字，关系为or</span>
undo 统计

<span class="token comment">#加引号是需要完整匹配</span>
<span class="token string">&quot;undo 统计&quot;</span>

<span class="token comment">#指定字段查询，level表示日志级别，ERROR（3）、WARNING（4）、NOTICE（5）、INFO（6）、DEBUG（7）</span>
level: <span class="token number">6</span>

<span class="token comment">#或条件</span>
level:<span class="token punctuation">(</span><span class="token number">6</span> OR <span class="token number">7</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),ka={href:"https://docs.graylog.org/docs/query-language",target:"_blank",rel:"noopener noreferrer"},ma=e('<h3 id="_3-7-2、自定义展示字段" tabindex="-1"><a class="header-anchor" href="#_3-7-2、自定义展示字段" aria-hidden="true">#</a> 3.7.2、自定义展示字段</h3><p><img src="'+G+'" alt="" loading="lazy"><br> 效果如下：<br><img src="'+S+'" alt="" loading="lazy"></p><h2 id="_3-8、日志统计仪表盘" tabindex="-1"><a class="header-anchor" href="#_3-8、日志统计仪表盘" aria-hidden="true">#</a> 3.8、日志统计仪表盘</h2><p>GrayLog支持把日志按照自己需要的方式形成统计报表，并把许多报表组合一起，形成DashBoard（仪表盘），方便对日志统计分析。</p><h3 id="_3-8-1、创建仪表盘" tabindex="-1"><a class="header-anchor" href="#_3-8-1、创建仪表盘" aria-hidden="true">#</a> 3.8.1、创建仪表盘</h3><p><img src="'+E+'" alt="" loading="lazy"><br><img src="'+L+'" alt="" loading="lazy"><br><img src="'+A+'" alt="" loading="lazy"><br> 可以设置各种指标：<br><img src="'+x+'" alt="" loading="lazy"><br><img src="'+O+'" alt="" loading="lazy"><br><img src="'+w+'" alt="" loading="lazy"><br><img src="'+R+'" alt="" loading="lazy"><br> 最终效果：<br><img src="'+T+'" alt="" loading="lazy"><br> 官方给出的效果：<br><img src="'+I+'" alt="" loading="lazy"></p><h1 id="_4、链路追踪" tabindex="-1"><a class="header-anchor" href="#_4、链路追踪" aria-hidden="true">#</a> 4、链路追踪</h1><h2 id="_4-1、apm" tabindex="-1"><a class="header-anchor" href="#_4-1、apm" aria-hidden="true">#</a> 4.1、APM</h2><h3 id="_4-1-1、什么是apm" tabindex="-1"><a class="header-anchor" href="#_4-1-1、什么是apm" aria-hidden="true">#</a> 4.1.1、什么是APM</h3><p>随着微服务架构的流行，一次请求往往需要涉及到多个服务，因此服务性能监控和排查就变得更复杂</p><ul><li>不同的服务可能由不同的团队开发、甚至可能使用不同的编程语言来实现</li><li>服务有可能布在了几千台服务器，横跨多个不同的数据中心</li></ul>',11),va=a("strong",null,"A",-1),ba=a("strong",null,"P",-1),ha=a("strong",null,"M",-1),_a=a("strong",null,"A",-1),ya=a("strong",null,"P",-1),fa=a("strong",null,"M",-1),qa=a("br",null,null,-1),Ga={href:"http://bigbully.github.io/Dapper-translation",target:"_blank",rel:"noopener noreferrer"},Sa=e('<h3 id="_4-1-2、原理" tabindex="-1"><a class="header-anchor" href="#_4-1-2、原理" aria-hidden="true">#</a> 4.1.2、原理</h3><p>先来看一次请求调用示例：</p><ol><li>包括：前端（A），两个中间层（B和C），以及两个后端（D和E）</li><li>当用户发起一个请求时，首先到达前端A服务，然后分别对B服务和C服务进行RPC调用；</li><li>B服务处理完给A做出响应，但是C服务还需要和后端的D服务和E服务交互之后再返还给A服务，最后由A服务来响应用户的请求；</li></ol><p><img src="'+z+`" alt="" loading="lazy"><br> 如何才能实现跟踪呢？需要明白下面几个概念：</p><ul><li>探针：负责在客户端程序运行时收集服务调用链路信息，发送给收集器</li><li>收集器：负责将数据格式化，保存到存储器</li><li>存储器：保存数据</li><li>UI界面：统计并展示</li></ul><p>探针会在链路追踪时记录每次调用的信息，Span是<strong>基本单元</strong>，一次链路调用（可以是RPC，DB等没有特定的限制）创建一个span，通过一个64位ID标识它；同时附加（Annotation）作为payload负载信息，用于记录性能等数据。<br> 一个Span的基本数据结构：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>type Span <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    TraceID    int64 <span class="token comment">// 用于标示一次完整的请求id</span>
    Name       string <span class="token comment">//名称</span>
    ID         int64 <span class="token comment">// 当前这次调用span_id</span>
    ParentID   int64 <span class="token comment">// 上层服务的调用span_id  最上层服务parent_id为null，代表根服务root</span>
    Annotation <span class="token punctuation">[</span><span class="token punctuation">]</span>Annotation <span class="token comment">// 记录性能等数据</span>
    Debug      bool
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一次请求的每个链路，通过spanId、parentId就能串联起来：<br><img src="`+D+'" alt="" loading="lazy"><br> 当然，从请求到服务器开始，服务器返回response结束，每个span存在相同的唯一标识trace_id。</p><h3 id="_4-1-3、技术选型" tabindex="-1"><a class="header-anchor" href="#_4-1-3、技术选型" aria-hidden="true">#</a> 4.1.3、技术选型</h3><p>市面上的全链路监控理论模型大多都是借鉴Google Dapper论文，重点关注以下三种APM组件：</p>',10),Ea={href:"https://link.juejin.im/?target=http%3A%2F%2Fzipkin.io%2F",target:"_blank",rel:"noopener noreferrer"},La=a("strong",null,"Zipkin",-1),Aa={href:"https://pinpoint.com/",target:"_blank",rel:"noopener noreferrer"},xa=a("strong",null,"Pinpoint",-1),Oa={href:"https://skywalking.apache.org/zh/",target:"_blank",rel:"noopener noreferrer"},wa=a("strong",null,"Skywalking",-1),Ra=e('<p>选项就是对比各个系统的使用差异，主要对比项：</p><ol><li><strong>探针的性能</strong><br> 主要是agent对服务的吞吐量、CPU和内存的影响。微服务的规模和动态性使得数据收集的成本大幅度提高。</li><li><strong>collector的可扩展性</strong><br> 能够水平扩展以便支持大规模服务器集群。</li><li><strong>全面的调用链路数据分析</strong><br> 提供代码级别的可见性以便轻松定位失败点和瓶颈。</li><li><strong>对于开发透明，容易开关</strong><br> 添加新功能而无需修改代码，容易启用或者禁用。</li><li><strong>完整的调用链应用拓扑</strong><br> 自动检测应用拓扑，帮助你搞清楚应用的架构</li></ol><p>三者对比如下：</p><table><thead><tr><th>对比项</th><th>zipkin</th><th>pinpoint</th><th>skywalking</th></tr></thead><tbody><tr><td>探针性能</td><td>中</td><td>低</td><td><strong>高</strong></td></tr><tr><td>collector扩展性</td><td><strong>高</strong></td><td>中</td><td><strong>高</strong></td></tr><tr><td>调用链路数据分析</td><td>低</td><td><strong>高</strong></td><td>中</td></tr><tr><td>对开发透明性</td><td>中</td><td><strong>高</strong></td><td><strong>高</strong></td></tr><tr><td>调用链应用拓扑</td><td>中</td><td><strong>高</strong></td><td>中</td></tr><tr><td>社区支持</td><td><strong>高</strong></td><td>中</td><td><strong>高</strong></td></tr></tbody></table><p>综上所述，使用skywalking是最佳的选择。</p><h2 id="_4-2、skywalking简介" tabindex="-1"><a class="header-anchor" href="#_4-2、skywalking简介" aria-hidden="true">#</a> 4.2、Skywalking简介</h2>',6),Ta=a("br",null,null,-1),Ia={href:"http://skywalking.apache.org/",target:"_blank",rel:"noopener noreferrer"},za=a("br",null,null,-1),Da=a("img",{src:P,alt:"",loading:"lazy"},null,-1),Pa=a("br",null,null,-1),Na=a("li",null,"Java自动探针，追踪和监控程序时，不需要修改源码。",-1),Ma={href:"https://github.com/OpenSkywalking/skywalking-netcore",target:"_blank",rel:"noopener noreferrer"},Fa={href:"https://github.com/OpenSkywalking/skywalking-nodejs",target:"_blank",rel:"noopener noreferrer"},Ba=a("li",null,"多种后端存储： ElasticSearch， H2",-1),Ca=a("li",null,[n("支持OpenTracing "),a("ul",null,[a("li",null,"Java自动探针支持和OpenTracing API协同工作")])],-1),Ua=a("li",null,"轻量级、完善功能的后端聚合和分析",-1),ja=a("li",null,"现代化Web UI",-1),Wa=a("li",null,"日志集成",-1),Ha=a("li",null,"应用、实例和服务的告警",-1),Ya=e('<p>官方架构图：<br><img src="'+N+`" alt="" loading="lazy"><br> 大致分四个部分：</p><ul><li>skywalking-oap-server：就是<strong>O</strong>bservability <strong>A</strong>nalysis <strong>P</strong>latform的服务，用来收集和处理探针发来的数据</li><li>skywalking-UI：就是skywalking提供的Web UI 服务，图形化方式展示服务链路、拓扑图、trace、性能监控等</li><li>agent：探针，获取服务调用的链路信息、性能信息，发送到skywalking的OAP服务</li><li>Storage：存储，一般选择elasticsearch</li></ul><p>因此我们安装部署也从这四个方面入手，目前elasticsearch已经安装完成，只需要部署其他3个即可。</p><h2 id="_4-3、部署安装" tabindex="-1"><a class="header-anchor" href="#_4-3、部署安装" aria-hidden="true">#</a> 4.3、部署安装</h2><p>通过docker部署，需要部署两部分，分别是<code>skywalking-oap-server</code>和<code>skywalking-UI</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#oap服务，需要指定Elasticsearch以及链接信息</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">TZ</span><span class="token operator">=</span>Asia/Shanghai <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span> oap <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">12800</span>:12800 <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">11800</span>:11800 <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">SW_STORAGE</span><span class="token operator">=</span>elasticsearch <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">SW_STORAGE_ES_CLUSTER_NODES</span><span class="token operator">=</span><span class="token number">192.168</span>.150.101:9200 <span class="token punctuation">\\</span>
apache/skywalking-oap-server:9.1.0


<span class="token comment">#部署ui，需要指定oap服务</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span> oap-ui <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">48080</span>:8080 <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">TZ</span><span class="token operator">=</span>Asia/Shanghai <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">SW_OAP_ADDRESS</span><span class="token operator">=</span>http://192.168.150.101:12800 <span class="token punctuation">\\</span>
apache/skywalking-ui:9.1.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),$a={href:"http://192.168.150.101:48080/",target:"_blank",rel:"noopener noreferrer"},Ja=a("br",null,null,-1),Ka=a("img",{src:M,alt:"",loading:"lazy"},null,-1),Va=e('<h2 id="_4-4、微服务探针" tabindex="-1"><a class="header-anchor" href="#_4-4、微服务探针" aria-hidden="true">#</a> 4.4、微服务探针</h2><p>现在，Skywalking的服务端已经启动完成，我们还需要在微服务中加入服务探针，来收集数据。<br><img src="'+F+'" alt="" loading="lazy"><br> 将<code>skywalking-agent</code>解压到非中文目录。<br> 在微服务中设置启动参数，以work微服务为例：<br><img src="'+B+`" alt="" loading="lazy"><br> 输入如下内容：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>-javaagent:F:<span class="token punctuation">\\</span>code<span class="token punctuation">\\</span>sl-express<span class="token punctuation">\\</span>docs<span class="token punctuation">\\</span>resources<span class="token punctuation">\\</span>skywalking-agent<span class="token punctuation">\\</span>skywalking-agent.jar
<span class="token parameter variable">-Dskywalking.agent.service_name</span><span class="token operator">=</span>ms::sl-express-ms-work
<span class="token parameter variable">-Dskywalking.collector.backend_service</span><span class="token operator">=</span><span class="token number">192.168</span>.150.101:11800
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数说明：</p>`,4),Za=a("ul",null,[a("li",null,"javaagent： 将skywalking-agent以代理的方式整合到微服务中"),a("li",{logic:"",name:""},[n("skywalking.agent.service_name：指定服务名称，格式：["),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mrow",null,[a("mi",null,"g"),a("mi",null,"r"),a("mi",null,"o"),a("mi",null,"u"),a("mi",null,"p"),a("mi",null,"n"),a("mi",null,"a"),a("mi",null,"m"),a("mi",null,"e")]),a("mo",null,":"),a("mo",null,":"),a("mo",{stretchy:"false"},"]")]),a("annotation",{encoding:"application/x-tex"},"{group name}::]")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.625em","vertical-align":"-0.1944em"}}),a("span",{class:"mord"},[a("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),a("span",{class:"mord mathnormal"},"ro"),a("span",{class:"mord mathnormal"},"u"),a("span",{class:"mord mathnormal"},"p"),a("span",{class:"mord mathnormal"},"nam"),a("span",{class:"mord mathnormal"},"e")]),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"::")]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),a("span",{class:"mclose"},"]")])])])]),a("li",null,"skywalking.collector.backend_service：指定oap服务，注意端口要走11800")],-1),Xa=e('<p>设置完成后，重新启动work微服务，多请求几次接口，即可自oap-ui中看到数据。<br><img src="'+C+'" alt="" loading="lazy"><br><img src="'+U+'" alt="" loading="lazy"><br> 查看链路：<br><img src="'+j+'" alt="" loading="lazy"><br> 服务关系拓扑图：<br><img src="'+W+`" alt="" loading="lazy"></p><h2 id="_4-5、整合到docker服务" tabindex="-1"><a class="header-anchor" href="#_4-5、整合到docker服务" aria-hidden="true">#</a> 4.5、整合到docker服务</h2><p>前面的测试是在本地测试，如何将SkyWalking整合到docker服务中呢？<br> 这里以<code>sl-express-ms-web-courier</code>为例，其他的服务类似。<br> 第一步，修改Dockerfile文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#FROM openjdk:11-jdk</span>
<span class="token comment">#修改为基于整合了skywalking的镜像，其他的不需要动</span>
FROM apache/skywalking-java-agent:8.11.0-java11
LABEL <span class="token assign-left variable">maintainer</span><span class="token operator">=</span><span class="token string">&quot;研究院研发组 &lt;research@itcast.cn&gt;&quot;</span>
 
<span class="token comment"># 时区修改为东八区</span>
ENV <span class="token assign-left variable">TZ</span><span class="token operator">=</span>Asia/Shanghai
RUN <span class="token function">ln</span> <span class="token parameter variable">-snf</span> /usr/share/zoneinfo/<span class="token variable">$TZ</span> /etc/localtime <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token variable">$TZ</span> <span class="token operator">&gt;</span> /etc/timezone
 
WORKDIR /app
ARG <span class="token assign-left variable">JAR_FILE</span><span class="token operator">=</span>target/*.jar
ADD <span class="token variable">\${JAR_FILE}</span> app.jar

EXPOSE <span class="token number">8080</span>
ENTRYPOINT <span class="token punctuation">[</span><span class="token string">&quot;sh&quot;</span>,<span class="token string">&quot;-c&quot;</span>,<span class="token string">&quot;java -Djava.security.egd=file:/dev/./urandom -jar <span class="token variable">$JAVA_OPTS</span> app.jar&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二步，在Jenkins中编辑修改配置：<br><code>名称：skywalkingServiceName 值：ms::sl-express-ms-web-courier</code><br><img src="`+H+'" alt="" loading="lazy"><br><code>名称：skywalkingBackendService 值：192.168.150.101:11800</code><br><img src="'+Y+'" alt="" loading="lazy"><br> 修改运行脚本，增加系统环境变量：<br><code>-e SW_AGENT_NAME=${skywalkingServiceName} -e SW_AGENT_COLLECTOR_BACKEND_SERVICES=${skywalkingBackendService}</code><br><img src="'+$+'" alt="" loading="lazy"><br> 第三步，重新部署服务：<br><img src="'+J+'" alt="" loading="lazy"><br> 第四步，测试接口，查看数据。<br><img src="'+K+'" alt="" loading="lazy"><br><img src="'+V+'" alt="" loading="lazy"></p><h1 id="_5、练习" tabindex="-1"><a class="header-anchor" href="#_5、练习" aria-hidden="true">#</a> 5、练习</h1><h2 id="_5-1、练习1" tabindex="-1"><a class="header-anchor" href="#_5-1、练习1" aria-hidden="true">#</a> 5.1、练习1</h2><p>难度系数：★★☆☆☆<br> 描述：修改所有微服务中的<code>logback-spring.xml</code>完成Graylog的整合。</p><h2 id="_5-1、练习2" tabindex="-1"><a class="header-anchor" href="#_5-1、练习2" aria-hidden="true">#</a> 5.1、练习2</h2><p>难度系数：★★★★☆<br> 描述：将所有的微服务与skywalking整合。</p>',10);function Qa(an,nn){const s=p("ExternalLinkIcon");return o(),i("div",null,[X,a("p",null,[n("GrayLog是一个轻量型的分布式日志管理平台，一个开源的日志聚合、分析、审计、展示和预警工具。在功能上来说，和 ELK类似，但又比 ELK要简单轻量许多。依靠着更加简洁，高效，部署使用简单的优势很快受到许多公司的青睐。"),Q,n(" 官网："),a("a",aa,[n("https://www.graylog.org/"),t(s)]),na,n(" 其基本框架如图："),sa,ta,ea,n(" 流程如下：")]),la,a("p",null,[n("访问地址 "),a("a",pa,[n("http://192.168.150.101:9000/"),t(s)]),n(" ， 如果可以看到如下界面说明启动成功。"),oa,ia,ca,n(" 通过 "),ra,n("登录，即可看到欢迎页面，目前还没有数据："),ua,da]),ga,a("p",null,[n("更多查询官网文档："),a("a",ka,[n("https://docs.graylog.org/docs/query-language"),t(s)])]),ma,a("p",null,[n("因此，就需要一些可以帮助理解系统行为、用于分析性能问题的工具，以便发生故障的时候，能够快速定位和解决问题，这就是APM系统，全称是（"),va,n("pplication "),ba,n("erformance "),ha,n("onitor，当然也有叫 "),_a,n("pplication "),ya,n("erformance "),fa,n("anagement tools）"),qa,n(" APM最早是谷歌公开的论文提到的 "),a("a",Ga,[n("Google Dapper"),t(s)]),n("。Dapper是Google生产环境下的分布式跟踪系统，自从Dapper发展成为一流的监控系统之后，给google的开发者和运维团队帮了大忙，所以谷歌公开论文分享了Dapper。")]),Sa,a("ul",null,[a("li",null,[a("a",Ea,[La,t(s)]),n("：由Twitter公司开源，开放源代码分布式的跟踪系统，用于收集服务的定时数据，以解决微服务架构中的延迟问题，包括：数据的收集、存储、查找和展现。")]),a("li",null,[a("a",Aa,[xa,t(s)]),n("：一款对Java编写的大规模分布式系统的APM工具，由韩国人开源的分布式跟踪组件。")]),a("li",null,[a("a",Oa,[wa,t(s)]),n("：国产的优秀APM组件，是一个对JAVA分布式应用程序集群的业务运行情况进行追踪、告警和分析的系统。现在是Apache的顶级项目之一。")])]),Ra,a("p",null,[n("SkyWalking创建与2015年，提供分布式追踪功能，是一个功能完备的APM系统。"),Ta,n(" 官网地址："),a("a",Ia,[n("http://skywalking.apache.org/"),t(s)]),za,Da,Pa,n(" 主要的特征：")]),a("ul",null,[a("li",null,[n("多语言探针或类库 "),a("ul",null,[Na,a("li",null,[n("社区提供的其他多语言探针 "),a("ul",null,[a("li",null,[a("a",Ma,[n(".NET Core"),t(s)])]),a("li",null,[a("a",Fa,[n("Node.js"),t(s)])])])])])]),Ba,Ca,Ua,ja,Wa,Ha]),Ya,a("p",null,[n("启动成功后，访问地址"),a("a",$a,[n("http://192.168.150.101:48080/"),t(s)]),n("，即可查看skywalking的ui界面。"),Ja,Ka]),Va,Za,Xa])}const en=l(Z,[["render",Qa],["__file","day12-分布式日志与链路追踪.html.vue"]]);export{en as default};
