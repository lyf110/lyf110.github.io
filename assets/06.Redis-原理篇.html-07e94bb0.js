const e=JSON.parse('{"key":"v-1300600b","path":"/database/redis/heima2022/06.Redis-%E5%8E%9F%E7%90%86%E7%AF%87.html","title":"六、Redis-原理篇","lang":"zh-CN","frontmatter":{"title":"六、Redis-原理篇","date":"2023-04-02T10:38:46.000Z","order":6,"category":["数据库","Redis","分布式缓存","中间件"],"tag":["数据库","Redis","分布式缓存","中间件"],"author":{"name":"liu yang fang","link":"https://github.com/lyf110"},"description":"Redis原理篇 1、原理篇-Redis数据结构 1.1 Redis数据结构-动态字符串 我们都知道Redis中保存的Key是字符串，value往往是字符串或者字符串的集合。可见字符串是Redis中最常用的一种数据结构。 不过Redis没有直接使用C语言中的字符串，因为C语言字符串存在很多问题： 获取字符串长度的需要通过运算 非二进制安全 不可修改 Redis构建了一种新的字符串结构，称为简单动态字符串（Simple Dynamic String），简称SDS。 例如，我们执行命令：","head":[["meta",{"property":"og:url","content":"https://github.com/lyf110/database/redis/heima2022/06.Redis-%E5%8E%9F%E7%90%86%E7%AF%87.html"}],["meta",{"property":"og:site_name","content":"lyf blog"}],["meta",{"property":"og:title","content":"六、Redis-原理篇"}],["meta",{"property":"og:description","content":"Redis原理篇 1、原理篇-Redis数据结构 1.1 Redis数据结构-动态字符串 我们都知道Redis中保存的Key是字符串，value往往是字符串或者字符串的集合。可见字符串是Redis中最常用的一种数据结构。 不过Redis没有直接使用C语言中的字符串，因为C语言字符串存在很多问题： 获取字符串长度的需要通过运算 非二进制安全 不可修改 Redis构建了一种新的字符串结构，称为简单动态字符串（Simple Dynamic String），简称SDS。 例如，我们执行命令："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://github.com/lyf110/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"六、Redis-原理篇"}],["meta",{"property":"article:author","content":"liu yang fang"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:tag","content":"分布式缓存"}],["meta",{"property":"article:tag","content":"中间件"}],["meta",{"property":"article:published_time","content":"2023-04-02T10:38:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"六、Redis-原理篇\\",\\"image\\":[\\"https://github.com/lyf110/\\"],\\"datePublished\\":\\"2023-04-02T10:38:46.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"liu yang fang\\",\\"link\\":\\"https://github.com/lyf110\\"}]}"]]},"headers":[{"level":2,"title":"1、原理篇-Redis数据结构","slug":"_1、原理篇-redis数据结构","link":"#_1、原理篇-redis数据结构","children":[{"level":3,"title":"1.1 Redis数据结构-动态字符串","slug":"_1-1-redis数据结构-动态字符串","link":"#_1-1-redis数据结构-动态字符串","children":[]},{"level":3,"title":"1.2 Redis数据结构-intset","slug":"_1-2-redis数据结构-intset","link":"#_1-2-redis数据结构-intset","children":[]},{"level":3,"title":"1.3 Redis数据结构-Dict","slug":"_1-3-redis数据结构-dict","link":"#_1-3-redis数据结构-dict","children":[]},{"level":3,"title":"1.4 Redis数据结构-ZipList","slug":"_1-4-redis数据结构-ziplist","link":"#_1-4-redis数据结构-ziplist","children":[]},{"level":3,"title":"1.5 Redis数据结构-ZipList的连锁更新问题","slug":"_1-5-redis数据结构-ziplist的连锁更新问题","link":"#_1-5-redis数据结构-ziplist的连锁更新问题","children":[]},{"level":3,"title":"1.6 Redis数据结构-QuickList","slug":"_1-6-redis数据结构-quicklist","link":"#_1-6-redis数据结构-quicklist","children":[]},{"level":3,"title":"1.7 Redis数据结构-RedisObject","slug":"_1-7-redis数据结构-redisobject","link":"#_1-7-redis数据结构-redisobject","children":[]},{"level":3,"title":"1.8 Redis数据结构-String","slug":"_1-8-redis数据结构-string","link":"#_1-8-redis数据结构-string","children":[]},{"level":3,"title":"1.9 Redis数据结构-List","slug":"_1-9-redis数据结构-list","link":"#_1-9-redis数据结构-list","children":[]},{"level":3,"title":"2.0 Redis数据结构-Set结构","slug":"_2-0-redis数据结构-set结构","link":"#_2-0-redis数据结构-set结构","children":[]},{"level":3,"title":"2.1、Redis数据结构-ZSET","slug":"_2-1、redis数据结构-zset","link":"#_2-1、redis数据结构-zset","children":[]},{"level":3,"title":"2.2 、Redis数据结构-Hash","slug":"_2-2-、redis数据结构-hash","link":"#_2-2-、redis数据结构-hash","children":[]}]},{"level":2,"title":"2、原理篇-Redis网络模型","slug":"_2、原理篇-redis网络模型","link":"#_2、原理篇-redis网络模型","children":[{"level":3,"title":"2.1 用户空间和内核态空间","slug":"_2-1-用户空间和内核态空间","link":"#_2-1-用户空间和内核态空间","children":[]},{"level":3,"title":"2.2.网络模型-阻塞IO","slug":"_2-2-网络模型-阻塞io","link":"#_2-2-网络模型-阻塞io","children":[]},{"level":3,"title":"2.3 网络模型-非阻塞IO","slug":"_2-3-网络模型-非阻塞io","link":"#_2-3-网络模型-非阻塞io","children":[]},{"level":3,"title":"2.4 网络模型-IO多路复用","slug":"_2-4-网络模型-io多路复用","link":"#_2-4-网络模型-io多路复用","children":[]},{"level":3,"title":"2.5 网络模型-IO多路复用-select方式","slug":"_2-5-网络模型-io多路复用-select方式","link":"#_2-5-网络模型-io多路复用-select方式","children":[]},{"level":3,"title":"2.6 网络模型-IO多路复用模型-poll模式","slug":"_2-6-网络模型-io多路复用模型-poll模式","link":"#_2-6-网络模型-io多路复用模型-poll模式","children":[]},{"level":3,"title":"2.7 网络模型-IO多路复用模型-epoll函数","slug":"_2-7-网络模型-io多路复用模型-epoll函数","link":"#_2-7-网络模型-io多路复用模型-epoll函数","children":[]},{"level":3,"title":"2.8、网络模型-epoll中的ET和LT","slug":"_2-8、网络模型-epoll中的et和lt","link":"#_2-8、网络模型-epoll中的et和lt","children":[]},{"level":3,"title":"2.9 网络模型-基于epoll的服务器端流程","slug":"_2-9-网络模型-基于epoll的服务器端流程","link":"#_2-9-网络模型-基于epoll的服务器端流程","children":[]},{"level":3,"title":"3.0 、网络模型-信号驱动","slug":"_3-0-、网络模型-信号驱动","link":"#_3-0-、网络模型-信号驱动","children":[]},{"level":3,"title":"3.1 、网络模型-Redis是单线程的吗？为什么使用单线程","slug":"_3-1-、网络模型-redis是单线程的吗-为什么使用单线程","link":"#_3-1-、网络模型-redis是单线程的吗-为什么使用单线程","children":[]},{"level":3,"title":"3.2 、Redis的单线程模型-Redis单线程和多线程网络模型变更","slug":"_3-2-、redis的单线程模型-redis单线程和多线程网络模型变更","link":"#_3-2-、redis的单线程模型-redis单线程和多线程网络模型变更","children":[]}]},{"level":2,"title":"3、Redis通信协议-RESP协议","slug":"_3、redis通信协议-resp协议","link":"#_3、redis通信协议-resp协议","children":[{"level":3,"title":"3.1、Redis通信协议-基于Socket自定义Redis的客户端","slug":"_3-1、redis通信协议-基于socket自定义redis的客户端","link":"#_3-1、redis通信协议-基于socket自定义redis的客户端","children":[]},{"level":3,"title":"3.2、Redis内存回收-过期key处理","slug":"_3-2、redis内存回收-过期key处理","link":"#_3-2、redis内存回收-过期key处理","children":[]},{"level":3,"title":"3.3 Redis内存回收-内存淘汰策略","slug":"_3-3-redis内存回收-内存淘汰策略","link":"#_3-3-redis内存回收-内存淘汰策略","children":[]}]},{"level":2,"title":"4、结束语","slug":"_4、结束语","link":"#_4、结束语","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":44.69,"words":13408},"filePathRelative":"database/redis/heima2022/06.Redis-原理篇.md","localizedDate":"2023年4月2日","excerpt":"<h1> Redis原理篇</h1>\\n<h2> 1、原理篇-Redis数据结构</h2>\\n<h3> 1.1 Redis数据结构-动态字符串</h3>\\n<p>我们都知道Redis中保存的Key是字符串，value往往是字符串或者字符串的集合。可见字符串是Redis中最常用的一种数据结构。</p>\\n<p>不过Redis没有直接使用C语言中的字符串，因为C语言字符串存在很多问题：<br>\\n获取字符串长度的需要通过运算<br>\\n非二进制安全<br>\\n不可修改<br>\\nRedis构建了一种新的字符串结构，称为简单动态字符串（Simple Dynamic String），简称SDS。<br>\\n例如，我们执行命令：</p>","copyright":{"author":"liu yang fang","license":"Apache License 2.0"},"autoDesc":true}');export{e as data};
