import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o,c,a as n,b as s,d as i,e as a}from"./app-5f6064b2.js";const l="/assets/1689423873090-69-2bf4dc57.png",u="/assets/1689423873045-1-10d20adf.png",k="/assets/1689423873046-2-57954d8f.png",r="/assets/1689423873046-3-ad954e2e.png",d="/assets/1689423873046-4-baba412c.png",m="/assets/1689423873046-5-85c2eecc.png",g="/assets/1689423873046-6-71412479.png",v="/assets/1689423873046-7-bdb3e787.png",b="/assets/1689423873047-8-1fbbdf0e.png",f="/assets/1689423873047-9-b8136ba0.png",y="/assets/1689423873047-10-c5b48a9d.png",h="/assets/1689423873047-11-b4e83130.png",_="/assets/1689423873047-12-d62239ac.png",w="/assets/image-20230715202554600-02f27a6e.png",I="/assets/1689423873047-13-28ae0b25.png",x="/assets/1689423873047-14-da5f96fc.png",C="/assets/1689423873047-15-cac0e235.png",T="/assets/image-20230715202636705-056364c7.png",q="/assets/1689423873048-16-b7713645.png",O="/assets/1689423873048-17-5dea6c7b.png",Q="/assets/image-20230715202659589-59188869.png",M="/assets/1689423873048-18-818796ab.png",L="/assets/1689423873048-19-b8239248.png",E="/assets/1689423873048-20-fcd00744.png",j="/assets/1689423873048-21-b0b79fb5.png",N="/assets/1689423873048-22-8896e844.png",S="/assets/1689423873048-23-099f4bb9.png",U="/assets/1689423873048-24-f6376c38.png",A="/assets/1689423873046-2-57954d8f.png",D="/assets/image-20230715202734598-98c57e93.png",z="/assets/1689423873049-26-0412d3c7.png",R="/assets/1689423873049-27-a1d3f35e.png",P="/assets/image-20230715202758302-2a0c98ee.png",V="/assets/1689423873049-28-0264ed30.png",B="/assets/image-20230715202928457-8924873c.png",F="/assets/1689423873049-29-7aa9de82.png",H="/assets/1689423873049-30-753d4a67.png",G="/assets/1689423873049-31-1f745b95.png",Y="/assets/1689423873049-32-ae4515f8.png",K="/assets/1689423873049-33-e4df00c4.png",J="/assets/1689423873049-34-144deec9.png",W="/assets/1689423873049-35-68cb7dfb.png",X="/assets/1689423873050-36-de737ef9.png",Z="/assets/image-20230715203017449-7569f43d.png",$="/assets/1689423873050-37-274c88a8.png",nn="/assets/1689423873050-38-9a121a83.png",sn="/assets/1689423873050-39-69c3db79.png",an="/assets/image-20230715203159607-340872e8.png",tn="/assets/1689423873050-40-6e6f10da.png",pn="/assets/1689423873050-41-e4b6b29a.png",en="/assets/1689423873050-42-3765bbf4.png",on="/assets/1689423873050-43-000e20cf.png",cn="/assets/1689423873050-44-6854e590.png",ln="/assets/1689423873050-45-cbc8b62f.png",un="/assets/1689423873051-46-315feedb.png",kn="/assets/1689423873051-47-1e982f1b.png",rn="/assets/1689423873051-48-00f4b501.png",dn="/assets/1689423873051-49-b94959f0.png",mn="/assets/1689423873051-50-154840fb.png",gn="/assets/1689423873051-51-124d441f.png",vn="/assets/1689423873051-52-f2e7903e.png",bn="/assets/image-20230715203244094-39cc7ce6.png",fn="/assets/1689423873051-53-65effac1.png",yn="/assets/1689423873051-54-1f805bfd.png",hn="/assets/1689423873051-55-a5f93fe9.png",_n="/assets/1689423873051-56-6e6ad9b3.png",wn="/assets/1689423873052-57-c670a5bf.png",In="/assets/1689423873052-58-13372c0c.png",xn="/assets/1689423873052-59-b0b3cc40.png",Cn="/assets/1689423873052-60-78e4567d.png",Tn="/assets/1689423873052-61-d45218ef.png",qn="/assets/image-20230715203339614-53d1f7f7.png",On="/assets/image-20230715203402623-67e78019.png",Qn="/assets/1689423873052-62-dd96466c.png",Mn="/assets/1689423873046-3-ad954e2e.png",Ln="/assets/1689423873052-64-847602d2.png",En="/assets/image-20230715203512761-7041579d.png",jn="/assets/1689423873053-65-607e1cc2.png",Nn="/assets/1689423873053-66-c16e5bca.png",Sn="/assets/1689423873053-67-7f9cefdb.png",Un="/assets/image-20230715203627293-38a598cb.png",An="/assets/1689423873053-68-741ec997.png",Dn={},zn=a('<h1 id="day05-问答系统" tabindex="-1"><a class="header-anchor" href="#day05-问答系统" aria-hidden="true">#</a> day05-问答系统</h1><p>一个人学习总是孤独的，而且往往难以坚持。</p><p>所以我们的系统设计了一些学习辅助的功能，增强学习的氛围感。包括：</p><ul><li>互动问答系统</li><li>学习笔记系统</li><li>学习评测系统</li><li>学习积分系统</li><li>榜单排名系统</li></ul><p>通过这套系统让用户感觉到自己不是一个人在学习，有互助、有竞争、有评测，刺激用户持续学习，提升学习效果和用户粘度。</p><p>这套系统中包含了很多企业中非常实用的解决方案和技术手段，可以为大家以后的工作提供很大帮助。例如：</p><ul><li>互动问答功能：在社交类型、学习类型的互联网项目中都有用到</li><li>点赞功能：电商、社交、学习等等都会用到</li><li>积分系统：电商、社交、学习等项目中用到</li><li>排行榜系统：游戏、社交、学习等项目中都有用到</li><li>学习评测系统：考试、学习类型的项目会用到</li></ul><p>在这些解决方案中你能解锁Redis、MQ等热门中间件的各种各样的使用方式。</p><p>今天我们首先来看看互动问答系统的设计与实现。</p><h1 id="_1-需求分析" tabindex="-1"><a class="header-anchor" href="#_1-需求分析" aria-hidden="true">#</a> 1.需求分析</h1><p>经过几天学习，相信大家对于业务开发已经轻车熟路了，整体流程与以往一样：</p><ul><li>需求和原型图分析</li><li>接口统计和设计</li><li>数据结构设计</li><li>接口的实现</li></ul><h2 id="_1-1-产品原型" tabindex="-1"><a class="header-anchor" href="#_1-1-产品原型" aria-hidden="true">#</a> 1.1.产品原型</h2><p>我们首先看看与互动问答有关的原型页面。</p><h3 id="_1-1-1-课程详情页" tabindex="-1"><a class="header-anchor" href="#_1-1-1-课程详情页" aria-hidden="true">#</a> 1.1.1.课程详情页</h3><p>在用户已经登录的情况下，如果用户购买了课程，在课程详情页可以看到一个互动问答的选项卡：</p><figure><img src="'+l+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>问答选项卡如下：</p><figure><img src="'+u+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="hint-container warning"><p class="hint-container-title">注意</p><p>1、<strong>问答列表</strong></p><ul><li>问答列表可以选择<code>全部问题</code>还是<code>我的问题</code>，选择<code>我的问题</code>则只展示我提问的问题。默认是全部</li><li>选择章节序号，根据章节号查看章节下对应问答。默认展示所有章节的问题</li><li>对于我提问的问题，可以做删除、修改操作</li></ul><p>2、<strong>跳转逻辑</strong></p><ul><li>点击提问按钮，进入问题编辑页面</li><li>点击问题标题，进入问题详情页</li><li>点击问题下的回答，进入回答表单</li></ul></div><p>点击提问或编辑按钮会进入问题编辑页面：</p><figure><img src="'+k+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="hint-container warning"><p class="hint-container-title">注意</p><p><strong>1、表单内容</strong></p><ul><li>课程：问题一定关联提问时所在的课程，无需选择</li><li>章节：可以选择提问知识点对应的章节，也可以不选</li><li>问题标题：一个概括性描述</li><li>问题详情：详细问题信息，富文本</li><li>是否匿名：用户可以选择匿名提问，其它用户不可见提问者信息</li></ul></div><p>点击某个问题，则会进入问题详情页面：</p><figure><img src="'+r+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="hint-container warning"><p class="hint-container-title">注意</p><p>1、<strong>页面内容</strong></p><ul><li>顶部展示问题相关详细信息</li><li>任何人都可以对问题做回复，也可以对他人的回答再次回复，无限叠楼。</li><li>也没渲染只分两层： <ul><li>对问题的一级回复，称为回答</li><li>对回答的回复、对回复的回复，作为第二级，称为评论</li></ul></li><li>问题详情页下面展示问题下的所有回答</li><li>点击回答下的详情才展示二级评论</li><li>可以对评论、回答点赞</li></ul></div><h3 id="_1-1-2-视频学习页" tabindex="-1"><a class="header-anchor" href="#_1-1-2-视频学习页" aria-hidden="true">#</a> 1.1.2.视频学习页</h3><p>另外，在视频学习页面中同样可以看到互动问答功能：</p><figure><img src="'+d+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这个页面与课程详情页功能类似，只不过是在观看视频的过程中操作。用户产生学习疑问是可以快速提问，不用退回到课程详情页，用户体验较好。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><ol><li><strong>页面逻辑</strong></li></ol><ul><li>默认展示视频播放小节下的问答</li><li>用户可以在这里提问问题，自动与当前课程、当前视频对应章节关联。其它参数与课程详情页的问题表单类似。</li><li>问答列表默认只显示问题，点击后进入问题详情页才能查看具体答案</li></ul></div><h3 id="_1-1-3-管理端问答管理页" tabindex="-1"><a class="header-anchor" href="#_1-1-3-管理端问答管理页" aria-hidden="true">#</a> 1.1.3.管理端问答管理页</h3><p>除了用户端以外，管理端也可以管理互动问答，首先是一个列表页：</p><figure><img src="'+m+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="hint-container warning"><p class="hint-container-title">注意</p><p><strong>1、搜索</strong></p><ul><li>管理员可以搜索用户提出的所有问题</li><li>搜索结果可以基于页面过滤条件做过滤 <ul><li>问题状态：已查看、未查看两种。标示是否已经被管理员查看过。每当学员在问题下评论，状态重置为未查看</li><li>课程名称：由于问题是提问在课程下的，所以会跟课程关联。管理员输入课程名称，搜索该课程下的所有问题</li><li>提问时间：提出问题的时间</li></ul></li></ul><p><strong>2、页面列表</strong></p><ul><li>默认按照提问时间倒序排列；点击回答数量时可以根据回答数量排序</li><li>课程分类：需要展示问题所属课程的三级分类的名称的拼接</li><li>课程所属章节：如果是在视频页面提问，则问题会与视频对应的章、节关联，则此处显示章名称、节名称。</li><li>课程名称：提问是针对某个课程的，因此此处显示对应的课程名称</li><li>回答数量：该问题下的一级回复，称为回答。此处显示问题下的回答的数量，其它评论不统计。</li><li>用户端状态：隐藏/显示。表示是否在用户端展示，对于一些敏感话题，管理员可以直接隐藏问题。</li></ul><p><strong>3、操作</strong></p><ul><li>点击查看：会将该问题标记为已查看状态，并且跳转到问题详情页</li><li>点击隐藏或显示：控制该问题是否在用户端显示。隐藏问题，则问题下的所有回答和恢复都被隐藏</li></ul></div><p>点击查看按钮，会进入一个问题详情页面：</p><figure><img src="'+g+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="hint-container warning"><p class="hint-container-title">注意</p><p><strong>1、问题详情</strong></p><ul><li>页面顶部是问题详情，展示信息与问题列表页基本一致</li><li>点击评论，老师可以回答问题</li><li>点击隐藏/显示，可以隐藏或显示问题</li></ul><p><strong>2、回答列表</strong></p><ul><li>分页展示问题下的回答（一级回复）</li><li>可以对回答点赞、评论、隐藏</li><li>点击查看，则进入回答详情页</li></ul></div><p>继续点击查看更多按钮，可以进入回答详情页：</p><figure><img src="'+v+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="hint-container warning"><p class="hint-container-title">注意</p><p><strong>1、回答详情</strong></p><ul><li>页面顶部是回答详情，展示信息与回答列表页基本一致</li><li>点击我来评论，老师可以评论该回答</li><li>点击隐藏/显示，可以隐藏或显示该回答，该回答下的所有评论也都会被隐藏或显示</li></ul><p><strong>2、评论列表</strong></p><ul><li>分页展示回答下的评论</li><li>可以对评论点赞、回复、隐藏</li></ul></div><h3 id="_1-1-4-流程总结" tabindex="-1"><a class="header-anchor" href="#_1-1-4-流程总结" aria-hidden="true">#</a> 1.1.4.流程总结</h3><p>整体来说，流程是这样的：</p><ul><li>学员在学习的过程中可以随时提问问题</li><li>老师、其他学员都可以回答问题</li><li>老师、学员也都可以对回答多次回复</li><li>老师、学员也都可以对评论多次回复</li><li>老师可以在管理端管理问题、回答、评论的状态</li></ul><p>业务流程并不复杂。</p><h2 id="_1-2-接口统计" tabindex="-1"><a class="header-anchor" href="#_1-2-接口统计" aria-hidden="true">#</a> 1.2.接口统计</h2><p>理论上我们应该先设计所有接口，再继续设计接口对应的表结构。不过由于接口较多，这里我们先对接口做简单统计。然后直接设计数据库，最后边设计接口，边实现接口。</p><h3 id="_1-2-1-问题的crud" tabindex="-1"><a class="header-anchor" href="#_1-2-1-问题的crud" aria-hidden="true">#</a> 1.2.1.问题的CRUD</h3><p>首先第一个页面，列表展示页：</p><figure><img src="'+b+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>结合原型设计图我们可以看到这里包含4个接口：</p><ul><li>带条件过滤的分页查询</li><li>新增提问</li><li>修改提问</li><li>删除提问</li></ul><p>这些都是基本的CRUD，应该不难。</p><h3 id="_1-2-2-问题的回答和评论" tabindex="-1"><a class="header-anchor" href="#_1-2-2-问题的回答和评论" aria-hidden="true">#</a> 1.2.2.问题的回答和评论</h3><p>进入问答详情页再看：</p><figure><img src="'+f+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>可以看到页面中包含5个接口：</p><ul><li>根据id查询问题详情</li><li>分页查询问题下的所有回答</li><li>分页查询回答下的评论</li><li>点赞/取消点赞某个回答或评论</li><li>回答某个提问、评论他人回答</li></ul><p>除了点赞功能外，其它接口也都是基本的增删改查，并不复杂。</p><h3 id="_1-2-3-管理端接口" tabindex="-1"><a class="header-anchor" href="#_1-2-3-管理端接口" aria-hidden="true">#</a> 1.2.3.管理端接口</h3><p>刚才分析的都是用户端的相关接口，这些接口部分可以与管理端共用，但管理端也有自己的特有需求。</p><p>管理端也可以分页查询问题列表，而且过滤条件、查询结果会有很大不同：</p><figure><img src="'+y+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>比较明显的有两个接口：</p><ul><li>管理端分页查询问题列表：与用户端分页查询不通用，功能更复杂，查询条件更多</li><li>隐藏或显示指定问题</li></ul><p>除此以外，这里有一个问题状态字段，表示管理员是否查看了该问题以及问题中的回答。默认是未查看状态；当管理员点击查看后，状态会变化为已查看；当<strong>学员</strong>再次回答或评论，状态会再次变为未查看。</p><p>因此，需要注意的是：</p><ul><li>每当用户点击查看按钮，需要根据根据id查询问题详情，此时应标记问题状态为已查看</li><li>每当<strong>学员</strong>回答或评论时，需要将问题标记为未查看</li></ul><p>管理端也会有回答列表、评论列表。另外，回答和评论同样有隐藏功能。</p><p>问题详情和回答列表：</p><figure><img src="'+h+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>还有评论列表：</p><figure><img src="'+_+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>总结一下，回答和评论包含的接口有：</p><ul><li>管理端根据id查询问题详情</li><li>分页查询问题下的回答</li><li>分页查询回答下的评论</li><li>点赞/取消点赞某个回答或评论</li><li>隐藏/显示指定回答或评论</li><li>回答某个提问、评论他人回答、评论（与用户端共用）</li></ul><h3 id="_1-2-4-总结" tabindex="-1"><a class="header-anchor" href="#_1-2-4-总结" aria-hidden="true">#</a> 1.2.4.总结</h3><p>综上，与问答系统有关的接口有：</p><figure><img src="'+w+'" alt="image-20230715202554600" tabindex="0" loading="lazy"><figcaption>image-20230715202554600</figcaption></figure><h1 id="_2-数据结构" tabindex="-1"><a class="header-anchor" href="#_2-数据结构" aria-hidden="true">#</a> 2.数据结构</h1><p>从原型图不难看出，这部分功能主要涉及两个实体：</p><ul><li>问题</li><li>回答/评论：回答、评论可以看做一类实体</li></ul><p>因此核心要设计的就是这两张表。</p><h2 id="_2-1-er图" tabindex="-1"><a class="header-anchor" href="#_2-1-er图" aria-hidden="true">#</a> 2.1.ER图</h2><h3 id="_2-1-1-问题" tabindex="-1"><a class="header-anchor" href="#_2-1-1-问题" aria-hidden="true">#</a> 2.1.1.问题</h3><p>首先是<code>问题</code>，通过新增提问的表单可以看出<code>问题</code>包含的属性：</p><figure><img src="'+I+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>基本属性：</p><ul><li>标题</li><li>描述</li></ul><p>关联信息：</p><ul><li>用户id：也就是提问的人</li><li>课程id</li><li>章id</li><li>节id</li></ul><p>功能字段：</p><ul><li>是否是匿名</li></ul><p>另外，在问题列表中，需要知道问题最新的一个回答的信息：</p><figure><img src="'+x+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>如果每次分页查询问题的时候再去统计最新的回答是哪个，效率比较低。我们可以直接在每次有新回答时将这个id记录到问题表中。因此问题表中需要添加这样一个字段：</p><ul><li>最新一次回答的id</li></ul><p>除了这些字段以外，管理端分页查询问题列表时也有一些功能字段：</p><figure><img src="'+C+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>功能字段：</p><ul><li>问题下的回答数量</li><li>用户端显示状态：是否被隐藏</li><li>问题状态：管理端是否已经查看</li></ul><p>综上，问题的ER图如下：</p><figure><img src="'+T+'" alt="image-20230715202636705" tabindex="0" loading="lazy"><figcaption>image-20230715202636705</figcaption></figure><h3 id="_2-1-2-回答、评论" tabindex="-1"><a class="header-anchor" href="#_2-1-2-回答、评论" aria-hidden="true">#</a> 2.1.2.回答、评论</h3><p>回答和评论的属性基本一致，差别就是：</p><ul><li>回答的对象是问题</li><li>评论的对象是其它回答或评论</li></ul><p>来看下原型图：</p><p><img src="'+q+'" alt="img" loading="lazy"><img src="'+O+'" alt="img" loading="lazy"></p><p>首先是基本属性：</p><ul><li>回答的内容</li></ul><p>功能字段：</p><ul><li>是否是匿名</li><li>点赞数量</li></ul><p>然后是关联信息：</p><ul><li>用户id：也就是回答的人</li><li>问题id：无论是回答、评论，都属于某个问题</li></ul><p>接下来是评论的特有属性：</p><ul><li>回答id：一个回答下会有很多评论，评论之间也会相互评论，但我们把回答下所有评论作为一层来展示。因此该回答下的所有评论都应记住所属的回答的id</li><li>目标用户id：评论针对的目标用户，页面显示为 <code>张三评论了李四</code></li><li>目标评论id：评论针对的目标评论的id</li></ul><p>综上，评论的ER图为：</p><figure><img src="'+Q+'" alt="image-20230715202659589" tabindex="0" loading="lazy"><figcaption>image-20230715202659589</figcaption></figure><h2 id="_2-2-数据库表" tabindex="-1"><a class="header-anchor" href="#_2-2-数据库表" aria-hidden="true">#</a> 2.2.数据库表</h2><p>结合ER图，表结构就非常清楚了，会包含两张表：</p><ul><li>问题表</li><li>回复表：回答和评论都是回复，在一张表</li></ul><h3 id="_2-2-1-问题表" tabindex="-1"><a class="header-anchor" href="#_2-2-1-问题表" aria-hidden="true">#</a> 2.2.1.问题表</h3><p>首先是问题表：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>interaction_question<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;主键，互动问题的id&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>title<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;互动问题的标题&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>description<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;问题描述信息&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>course_id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;所属课程id&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>chapter_id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;所属课程章id&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>section_id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;所属课程节id&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>user_id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;提问学员id&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>latest_answer_id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;最新的一个回答的id&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>answer_times<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;问题下的回答数量&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>anonymity<span class="token punctuation">`</span></span> <span class="token keyword">bit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> b<span class="token string">&#39;0&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;是否匿名，默认false&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>hidden<span class="token punctuation">`</span></span> <span class="token keyword">bit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> b<span class="token string">&#39;0&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;是否被隐藏，默认false&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>status<span class="token punctuation">`</span></span> <span class="token keyword">tinyint</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;管理端问题状态：0-未查看，1-已查看&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>create_time<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;提问时间&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>update_time<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;更新时间&#39;</span><span class="token punctuation">,</span>\n  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">,</span>\n  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>idx_course_id<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>course_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">,</span>\n  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>section_id<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>section_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>user_id<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>user_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8mb4_0900_ai_ci ROW_FORMAT<span class="token operator">=</span>DYNAMIC <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">&#39;互动提问的问题表&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-3-回答或评论" tabindex="-1"><a class="header-anchor" href="#_2-2-3-回答或评论" aria-hidden="true">#</a> 2.2.3.回答或评论</h3><p>回答和评论合为一张表，称为评论表：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>interaction_reply<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;互动问题的回答id&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>question_id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;互动问题问题id&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>answer_id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;回复的上级回答id&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>user_id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;回答者id&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>content<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;回答内容&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>target_user_id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;回复的目标用户id&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>target_reply_id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;回复的目标回复id&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>reply_times<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;评论数量&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>liked_times<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;点赞数量&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>hidden<span class="token punctuation">`</span></span> <span class="token keyword">bit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> b<span class="token string">&#39;0&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;是否被隐藏，默认false&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>anonymity<span class="token punctuation">`</span></span> <span class="token keyword">bit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> b<span class="token string">&#39;0&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;是否匿名，默认false&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>create_time<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;创建时间&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>update_time<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;更新时间&#39;</span><span class="token punctuation">,</span>\n  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">,</span>\n  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>idx_question_id<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>question_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8mb4_0900_ai_ci ROW_FORMAT<span class="token operator">=</span>DYNAMIC <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">&#39;互动问题的回答或评论&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-3-代码生成" tabindex="-1"><a class="header-anchor" href="#_2-3-代码生成" aria-hidden="true">#</a> 2.3.代码生成</h2><p>接下来，利用MP插件自动代码生成对应的代码。不过在这之前，不要忘了创建新的功能分支。这里我们是互动问答功能，我们在dev分支基础上创建一个问答分支：<code>feature-qa</code></p><figure><img src="'+M+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>然后再生成代码即可。</p><h3 id="_2-3-1-controller" tabindex="-1"><a class="header-anchor" href="#_2-3-1-controller" aria-hidden="true">#</a> 2.3.1.controller</h3><p>注意把controller路径修改为Restful风格：</p><figure><img src="'+L+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="'+E+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_2-3-2-id策略" tabindex="-1"><a class="header-anchor" href="#_2-3-2-id策略" aria-hidden="true">#</a> 2.3.2.ID策略</h3><p>问题和评论的id都采用雪花算法：</p><figure><img src="'+j+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>评论：</p><figure><img src="'+N+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_2-3-3-状态枚举" tabindex="-1"><a class="header-anchor" href="#_2-3-3-状态枚举" aria-hidden="true">#</a> 2.3.3.状态枚举</h3><p>问题存在已查看和未查看两种状态，我们定义出一个枚举来标示：</p><figure><img src="'+S+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>具体代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Getter</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">QuestionStatus</span> <span class="token keyword">implements</span> <span class="token class-name">BaseEnum</span> <span class="token punctuation">{</span>
    <span class="token function">UN_CHECK</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;未查看&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">CHECKED</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;已查看&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">;</span>
    <span class="token annotation punctuation">@JsonValue</span>
    <span class="token annotation punctuation">@EnumValue</span>
    <span class="token keyword">int</span> value<span class="token punctuation">;</span>
    <span class="token class-name">String</span> desc<span class="token punctuation">;</span>

    <span class="token class-name">QuestionStatus</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@JsonCreator</span><span class="token punctuation">(</span>mode <span class="token operator">=</span> <span class="token class-name">JsonCreator<span class="token punctuation">.</span>Mode</span><span class="token punctuation">.</span><span class="token constant">DELEGATING</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">QuestionStatus</span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">QuestionStatus</span> status <span class="token operator">:</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">equalsValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> status<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后把<code>InteractionQuestion</code>类中的状态修改为枚举类型：</p><figure><img src="`+U+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h1 id="_3-问题相关接口" tabindex="-1"><a class="header-anchor" href="#_3-问题相关接口" aria-hidden="true">#</a> 3.问题相关接口</h1><p>问题相关接口在管理端和用户端存在一些差异，在设计接口时一定要留意。另外，此处我们只带大家实现其中的部分接口：</p><ul><li>新增互动问题</li><li>用户端分页查询问题</li><li>根据id查询问题详情</li><li>管理端分页查询问题</li></ul><p>其它的接口留给大家作为练习，包括：</p><ul><li>管理端根据id查询问题详情</li><li>修改问题</li><li>删除问题</li><li>管理端隐藏或显示问题</li><li>新增回答或评论</li><li>分页查询回答或评论</li><li>管理端分页查询回答或评论</li><li>管理端隐藏或显示回答、评论</li></ul><h2 id="_3-1-新增问题" tabindex="-1"><a class="header-anchor" href="#_3-1-新增问题" aria-hidden="true">#</a> 3.1.新增问题</h2><h3 id="_3-1-1-接口分析" tabindex="-1"><a class="header-anchor" href="#_3-1-1-接口分析" aria-hidden="true">#</a> 3.1.1.接口分析</h3><p>首先还是看原型图，新增的表单如下：</p><figure><img src="'+A+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>通过新增的问题的表单即可分析出接口的请求参数信息了，然后按照Restful的风格设计即可：</p><figure><img src="'+D+'" alt="image-20230715202734598" tabindex="0" loading="lazy"><figcaption>image-20230715202734598</figcaption></figure><h3 id="_3-1-2-实体类" tabindex="-1"><a class="header-anchor" href="#_3-1-2-实体类" aria-hidden="true">#</a> 3.1.2.实体类</h3><p>新增业务中无返回值，只需要设计出入参对应的DTO即可，在课前资料中已经提供好了：</p><figure><img src="'+z+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>复制到<code>tj-learning</code>模块下的<code>domain</code>下的<code>dto</code>包下：</p><figure><img src="'+R+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_3-1-3-代码实现" tabindex="-1"><a class="header-anchor" href="#_3-1-3-代码实现" aria-hidden="true">#</a> 3.1.3.代码实现</h3><p>首先是<code>tj-learning</code>中的<code>InteractionQuestionController</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/questions&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@RequiredArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InteractionQuestionController</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">IInteractionQuestionService</span> questionService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">&quot;新增提问&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@PostMapping</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveQuestion</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">QuestionFormDTO</span> questionDTO<span class="token punctuation">)</span><span class="token punctuation">{</span>
        questionService<span class="token punctuation">.</span><span class="token function">saveQuestion</span><span class="token punctuation">(</span>questionDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后是<code>tj-learning</code>中的<code>IInteractionQuestionService</code>接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IInteractionQuestionService</span> <span class="token keyword">extends</span> <span class="token class-name">IService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InteractionQuestion</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">saveQuestion</span><span class="token punctuation">(</span><span class="token class-name">QuestionFormDTO</span> questionDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后是<code>tj-learning</code>中的<code>InteractionQuestionServiceImpl</code>实现类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@RequiredArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InteractionQuestionServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InteractionQuestionMapper</span><span class="token punctuation">,</span> <span class="token class-name">InteractionQuestion</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">IInteractionQuestionService</span> <span class="token punctuation">{</span>
    
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">IInteractionQuestionDetailService</span> detailService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@Transactional</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveQuestion</span><span class="token punctuation">(</span><span class="token class-name">QuestionFormDTO</span> questionDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1.获取登录用户</span>
        <span class="token class-name">Long</span> userId <span class="token operator">=</span> <span class="token class-name">UserContext</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2.数据转换</span>
        <span class="token class-name">InteractionQuestion</span> question <span class="token operator">=</span> <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">toBean</span><span class="token punctuation">(</span>questionDTO<span class="token punctuation">,</span> <span class="token class-name">InteractionQuestion</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 3.补充数据</span>
        question<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 4.保存问题</span>
        <span class="token function">save</span><span class="token punctuation">(</span>question<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 5.问题详情</span>
        <span class="token class-name">InteractionQuestionDetail</span> detail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InteractionQuestionDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        detail<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>question<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        detail<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span>questionDTO<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        detailService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>detail<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-2-修改问题-练习" tabindex="-1"><a class="header-anchor" href="#_3-2-修改问题-练习" aria-hidden="true">#</a> 3.2.修改问题（练习）</h2><h3 id="_3-2-1-接口分析" tabindex="-1"><a class="header-anchor" href="#_3-2-1-接口分析" aria-hidden="true">#</a> 3.2.1.接口分析</h3><p>修改与新增表单基本类似，此处不再分析。我们可以参考新增的接口，然后按照Restful的风格设计为更新即可：</p><figure><img src="`+P+'" alt="image-20230715202758302" tabindex="0" loading="lazy"><figcaption>image-20230715202758302</figcaption></figure><p>虽然修改问题时提交的JSON参数会少一些，不过依然可以沿用新增时的DTO.</p><h3 id="_3-2-2-代码实现-练习" tabindex="-1"><a class="header-anchor" href="#_3-2-2-代码实现-练习" aria-hidden="true">#</a> 3.2.2.代码实现（练习）</h3><h2 id="_3-3-用户端分页查询问题" tabindex="-1"><a class="header-anchor" href="#_3-3-用户端分页查询问题" aria-hidden="true">#</a> 3.3.用户端分页查询问题</h2><h3 id="_3-1-1-接口分析-1" tabindex="-1"><a class="header-anchor" href="#_3-1-1-接口分析-1" aria-hidden="true">#</a> 3.1.1.接口分析</h3><p>先看原型图：</p><figure><img src="'+V+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这就是一个典型的分页查询。主要分析请求参数和返回值就行了。</p><p>请求参数就是过滤条件，页面可以看到的条件有：</p><ul><li>分页条件</li><li>全部回答/我的回答：也就是要不要基于用户id过滤</li><li>课程id：隐含条件，因为问题列表是在某课程详情页面查看的，所以一定要以课程id为条件</li><li>章节id：可选条件，当用户点击小节时传递</li></ul><p>返回值格式，从页面可以看到属性有：</p><ul><li>是否匿名：如果提交问题是选择了匿名，则页面不能展示用户信息</li><li>用户id：匿名则不显示</li><li>用户头像：匿名则不显示</li><li>用户名称：匿名则不显示</li><li>问题标题</li><li>提问时间</li><li>回答数量</li><li>最近一次回答的信息： <ul><li>回答人名称</li><li>回答内容</li></ul></li></ul><p>综上，按照Restful来设计接口，信息如下：</p><figure><img src="'+B+'" alt="image-20230715202928457" tabindex="0" loading="lazy"><figcaption>image-20230715202928457</figcaption></figure><h3 id="_3-1-2-实体类-1" tabindex="-1"><a class="header-anchor" href="#_3-1-2-实体类-1" aria-hidden="true">#</a> 3.1.2.实体类</h3><p>首先是请求参数，查询类型我们定义为Query，在课前资料中已经提供了：</p><figure><img src="'+F+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>需要注意的是，<code>QuestionPageQuery</code>是继承自<code>tj-common</code>中通用的<code>PageQuery</code>，这样就无需重复定义分页查询参数了：</p><figure><img src="'+H+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>然后是返回值，页面视图对象，我们定义为VO，在课前资料中已经提供了：</p><figure><img src="'+G+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>我们将VO和Query实体分别放到domain包的vo包和query包下：</p><figure><img src="'+Y+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_3-1-3-声明接口" tabindex="-1"><a class="header-anchor" href="#_3-1-3-声明接口" aria-hidden="true">#</a> 3.1.3.声明接口</h3><p>首先是<code>tj-learning</code>中的<code>com.tianji.learning.controller.InteractionQuestionController</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span>


<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>common<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>dto<span class="token punctuation">.</span></span><span class="token class-name">PageDTO</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">QuestionPageQuery</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">QuestionVO</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">IInteractionQuestionService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Api</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">ApiOperation</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">ApiParam</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">RequiredArgsConstructor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
 * 互动提问的问题表 前端控制器
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
 */</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/questions&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags <span class="token operator">=</span> <span class="token string">&quot;互动问答相关接口&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@RequiredArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InteractionQuestionController</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">IInteractionQuestionService</span> questionService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">&quot;分页查询互动问题&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;page&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">PageDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">QuestionVO</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryQuestionPage</span><span class="token punctuation">(</span><span class="token class-name">QuestionPageQuery</span> query<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> questionService<span class="token punctuation">.</span><span class="token function">queryQuestionPage</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后是<code>tj-learning</code>中的<code>com.tianji.learning.service.IInteractionQuestionService</code>接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">IService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>common<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>dto<span class="token punctuation">.</span></span><span class="token class-name">PageDTO</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">QuestionPageQuery</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">QuestionVO</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
 * 互动提问的问题表 服务类
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IInteractionQuestionService</span> <span class="token keyword">extends</span> <span class="token class-name">IService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InteractionQuestion</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token class-name">PageDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">QuestionVO</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryQuestionPage</span><span class="token punctuation">(</span><span class="token class-name">QuestionPageQuery</span> query<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后是<code>tj-learning</code>中的<code>com.tianji.learning.service.impl.InteractionQuestionServiceImpl</code>实现类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">QuestionPageQuery</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">QuestionVO</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">IInteractionQuestionService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDateTime</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
 * 互动提问的问题表 服务实现类
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
 */</span>
<span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@RequiredArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InteractionQuestionServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InteractionQuestionMapper</span><span class="token punctuation">,</span> <span class="token class-name">InteractionQuestion</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">IInteractionQuestionService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">PageDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">QuestionVO</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryQuestionPage</span><span class="token punctuation">(</span><span class="token class-name">QuestionPageQuery</span> query<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-1-4-查询用户信息" tabindex="-1"><a class="header-anchor" href="#_3-1-4-查询用户信息" aria-hidden="true">#</a> 3.1.4.查询用户信息</h3><p>由于页面VO中需要提问者信息、最近一次回答信息，都需要查询出用户昵称、头像等。而数据库中仅仅保存了提问人的id、回答人的id。</p><p>这就要求我们能够根据用户id去查询出用户的详细信息。</p><p>而用户信息全部都在<code>tj-user</code>模块对应的<code>user-service</code>服务中。所以我们需要远程调用<code>user-service</code>以获取这些数据。</p><p>好在user-service已经提供了查询用户的Feign客户端，并且统一定义到了<code>tj-api</code>模块中：</p><figure><img src="`+K+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>其中有这样的一个API：</p><figure><img src="'+J+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>恰好就能实现根据id集合查询用户信息集合的功能。</p><p>而且返回的UserDTO中数据非常丰富，完全能够满足我们的需要：</p><figure><img src="'+W+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_3-1-5-实现查询逻辑" tabindex="-1"><a class="header-anchor" href="#_3-1-5-实现查询逻辑" aria-hidden="true">#</a> 3.1.5.实现查询逻辑</h3><p>查询的实现逻辑如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>conditions<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">QueryWrapper</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>pagination<span class="token punctuation">.</span></span><span class="token class-name">Page</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span><span class="token class-name">ServiceImpl</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>api<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">CategoryCache</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>api<span class="token punctuation">.</span>client<span class="token punctuation">.</span>user<span class="token punctuation">.</span></span><span class="token class-name">UserClient</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>api<span class="token punctuation">.</span>dto<span class="token punctuation">.</span>user<span class="token punctuation">.</span></span><span class="token class-name">UserDTO</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>common<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>dto<span class="token punctuation">.</span></span><span class="token class-name">PageDTO</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>common<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span></span><span class="token class-name">BadRequestException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">BeanUtils</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">CollUtils</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">UserContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>po<span class="token punctuation">.</span></span><span class="token class-name">InteractionQuestion</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>po<span class="token punctuation">.</span></span><span class="token class-name">InteractionReply</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">QuestionPageQuery</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">QuestionVO</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">InteractionQuestionMapper</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">InteractionReplyMapper</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">IInteractionQuestionService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">RequiredArgsConstructor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDateTime</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">Collectors</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
 * 互动提问的问题表 服务实现类
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
 *
 * <span class="token keyword">@author</span> 虎哥
 */</span>
<span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@RequiredArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InteractionQuestionServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InteractionQuestionMapper</span><span class="token punctuation">,</span> <span class="token class-name">InteractionQuestion</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">IInteractionQuestionService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">InteractionReplyMapper</span> replyMapper<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">UserClient</span> userClient<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">PageDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">QuestionVO</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryQuestionPage</span><span class="token punctuation">(</span><span class="token class-name">QuestionPageQuery</span> query<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1.参数校验，课程id和小节id不能都为空</span>
        <span class="token class-name">Long</span> courseId <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">getCourseId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Long</span> sectionId <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">getSectionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>courseId <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> sectionId <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BadRequestException</span><span class="token punctuation">(</span><span class="token string">&quot;课程id和小节id不能都为空&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 2.分页查询</span>
        <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InteractionQuestion</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> <span class="token function">lambdaQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">InteractionQuestion</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> info <span class="token operator">-&gt;</span> <span class="token operator">!</span>info<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;description&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">getOnlyMine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">InteractionQuestion</span><span class="token operator">::</span><span class="token function">getUserId</span><span class="token punctuation">,</span> <span class="token class-name">UserContext</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>courseId <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">InteractionQuestion</span><span class="token operator">::</span><span class="token function">getCourseId</span><span class="token punctuation">,</span> courseId<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>sectionId <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">InteractionQuestion</span><span class="token operator">::</span><span class="token function">getSectionId</span><span class="token punctuation">,</span> sectionId<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">InteractionQuestion</span><span class="token operator">::</span><span class="token function">getHidden</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">toMpPageDefaultSortByCreateTimeDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InteractionQuestion</span><span class="token punctuation">&gt;</span></span> records <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>records<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">PageDTO</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 3.根据id查询提问者和最近一次回答的信息</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> userIds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> answerIds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 3.1.得到问题当中的提问者id和最近一次回答的id</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">InteractionQuestion</span> q <span class="token operator">:</span> records<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">getAnonymity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 只查询非匿名的问题</span>
                userIds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            answerIds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">getLatestAnswerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 3.2.根据id查询最近一次回答</span>
        answerIds<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">InteractionReply</span><span class="token punctuation">&gt;</span></span> replyMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>answerIds<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">CollUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>answerIds<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InteractionReply</span><span class="token punctuation">&gt;</span></span> replies <span class="token operator">=</span> replyMapper<span class="token punctuation">.</span><span class="token function">selectBatchIds</span><span class="token punctuation">(</span>answerIds<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">InteractionReply</span> reply <span class="token operator">:</span> replies<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                replyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>reply<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reply<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>reply<span class="token punctuation">.</span><span class="token function">getAnonymity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 匿名用户不做查询</span>
                    userIds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>reply<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 3.3.根据id查询用户信息（提问者）</span>
        userIds<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">UserDTO</span><span class="token punctuation">&gt;</span></span> userMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>userIds<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">CollUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>userIds<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserDTO</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> userClient<span class="token punctuation">.</span><span class="token function">queryUserByIds</span><span class="token punctuation">(</span>userIds<span class="token punctuation">)</span><span class="token punctuation">;</span>
            userMap <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">UserDTO</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> u <span class="token operator">-&gt;</span> u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 4.封装VO</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">QuestionVO</span><span class="token punctuation">&gt;</span></span> voList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>records<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">InteractionQuestion</span> r <span class="token operator">:</span> records<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 4.1.将PO转为VO</span>
            <span class="token class-name">QuestionVO</span> vo <span class="token operator">=</span> <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyBean</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token class-name">QuestionVO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            voList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>vo<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 4.2.封装提问者信息</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>r<span class="token punctuation">.</span><span class="token function">getAnonymity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token class-name">UserDTO</span> userDTO <span class="token operator">=</span> userMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>userDTO <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    vo<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span>userDTO<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    vo<span class="token punctuation">.</span><span class="token function">setUserIcon</span><span class="token punctuation">(</span>userDTO<span class="token punctuation">.</span><span class="token function">getIcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 4.3.封装最近一次回答的信息</span>
            <span class="token class-name">InteractionReply</span> reply <span class="token operator">=</span> replyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">getLatestAnswerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>reply <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                vo<span class="token punctuation">.</span><span class="token function">setLatestReplyContent</span><span class="token punctuation">(</span>reply<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>reply<span class="token punctuation">.</span><span class="token function">getAnonymity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">// 匿名用户直接忽略</span>
                    <span class="token class-name">UserDTO</span> user <span class="token operator">=</span> userMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>reply<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    vo<span class="token punctuation">.</span><span class="token function">setLatestReplyUser</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token class-name">PageDTO</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> voList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-4-根据id查询问题详情" tabindex="-1"><a class="header-anchor" href="#_3-4-根据id查询问题详情" aria-hidden="true">#</a> 3.4.根据id查询问题详情</h2><h3 id="_3-4-1-接口分析" tabindex="-1"><a class="header-anchor" href="#_3-4-1-接口分析" aria-hidden="true">#</a> 3.4.1.接口分析</h3><p>先看下详情页原型图：</p><figure><img src="`+X+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>由此可以看出详情页所需要的信息相比分页时，主要多了问题详情，主要字段有：</p><ul><li>是否匿名</li><li>用户id：匿名则不显示</li><li>用户头像：匿名则不显示</li><li>用户 名称：匿名则不显示</li><li>问题标题</li><li>提问时间</li><li>回答数量</li><li><strong>问题描述详情</strong></li></ul><p>而请求参数则更加简单了，就是问题的id</p><p>然后，再按照Restful风格设计，接口就出来了：</p><figure><img src="'+Z+'" alt="image-20230715203017449" tabindex="0" loading="lazy"><figcaption>image-20230715203017449</figcaption></figure><h3 id="_3-4-2-实体类" tabindex="-1"><a class="header-anchor" href="#_3-4-2-实体类" aria-hidden="true">#</a> 3.4.2.实体类</h3><p>既然仅仅比分页时多了一个字段，我们可以沿用之前分页查询时的VO对象，添加一个新属性即可：</p><figure><img src="'+$+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_3-4-3-代码实现" tabindex="-1"><a class="header-anchor" href="#_3-4-3-代码实现" aria-hidden="true">#</a> 3.4.3.代码实现</h3><p>首先是<code>tj-learning</code>中的<code>InteractionQuestionController</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">&quot;根据id查询问题详情&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/{id}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">QuestionVO</span> <span class="token function">queryQuestionById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;问题id&quot;</span><span class="token punctuation">,</span> example <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> questionService<span class="token punctuation">.</span><span class="token function">queryQuestionById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后是<code>tj-learning</code>中的<code>IInteractionQuestionService</code>接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">QuestionVO</span> <span class="token function">queryQuestionById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后是<code>tj-learning</code>中的<code>InteractionQuestionServiceImpl</code>实现类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">QuestionVO</span> <span class="token function">queryQuestionById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1.根据id查询数据</span>
    <span class="token class-name">InteractionQuestion</span> question <span class="token operator">=</span> <span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.数据校验</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>question <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> question<span class="token punctuation">.</span><span class="token function">getHidden</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 没有数据或者是被隐藏了</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 3.查询提问者信息</span>
    <span class="token class-name">UserDTO</span> user <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>question<span class="token punctuation">.</span><span class="token function">getAnonymity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        user <span class="token operator">=</span> userClient<span class="token punctuation">.</span><span class="token function">queryUserById</span><span class="token punctuation">(</span>question<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 4.封装VO</span>
    <span class="token class-name">QuestionVO</span> vo <span class="token operator">=</span> <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyBean</span><span class="token punctuation">(</span>question<span class="token punctuation">,</span> <span class="token class-name">QuestionVO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        vo<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vo<span class="token punctuation">.</span><span class="token function">setUserIcon</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getIcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> vo<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-5-删除我的问题-练习" tabindex="-1"><a class="header-anchor" href="#_3-5-删除我的问题-练习" aria-hidden="true">#</a> 3.5.删除我的问题（练习）</h2><h3 id="_3-5-1-接口分析" tabindex="-1"><a class="header-anchor" href="#_3-5-1-接口分析" aria-hidden="true">#</a> 3.5.1.接口分析</h3><p>用户可以删除自己提问的问题，如图：</p><figure><img src="`+nn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>需要注意的是，当用户删除某个问题时，也需要删除问题下的回答、评论。</p><p>整体业务流程如下：</p><ul><li>查询问题是否存在</li><li>判断是否是当前用户提问的</li><li>如果不是则报错</li><li>如果是则删除问题</li><li>然后删除问题下的回答及评论</li></ul><p>接口信息如下：</p><ul><li><strong>接口地址</strong>:<code>/questions/{id}</code></li><li><strong>请求方式</strong>:<code>DELETE</code></li><li><strong>请求参数</strong>: 基于路径占位符，问题id</li></ul><h3 id="_3-5-2-代码实现-练习" tabindex="-1"><a class="header-anchor" href="#_3-5-2-代码实现-练习" aria-hidden="true">#</a> 3.5.2.代码实现（练习）</h3><h2 id="_3-6-管理端分页查询问题" tabindex="-1"><a class="header-anchor" href="#_3-6-管理端分页查询问题" aria-hidden="true">#</a> 3.6.管理端分页查询问题</h2><h3 id="_3-6-1-接口分析" tabindex="-1"><a class="header-anchor" href="#_3-6-1-接口分析" aria-hidden="true">#</a> 3.6.1.接口分析</h3><p>在管理端后台存在问答管理列表页，与用户端类似都是分页查询，但是请求参数和返回值有较大差别：</p><figure><img src="'+sn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>从请求参数来看，除了分页参数，还包含3个：</p><ul><li>问题的查看状态</li><li>课程名称</li><li>提问时间</li></ul><p>从返回值来看，比用户端多了一些字段：</p><ul><li>是否匿名: 管理端不关心，全都展示</li><li>提问者信息： <ul><li>用户id</li><li>用户头像：匿名则不显示</li><li>用户 名称：匿名则不显示</li></ul></li><li>问题标题</li><li>提问时间</li><li>回答数量</li><li>最近一次回答的信息： <ul><li>回答人名称</li><li>回答内容</li></ul></li><li>问题关联的课程名称</li><li>问题关联的章、节名称</li><li>问题关联课程的分类名称</li></ul><p>由于请求入参和返回值与用户端有较大差异，因此我们需要设计一个新的接口：</p><figure><img src="'+an+'" alt="image-20230715203159607" tabindex="0" loading="lazy"><figcaption>image-20230715203159607</figcaption></figure><h3 id="_3-6-2-实体类" tabindex="-1"><a class="header-anchor" href="#_3-6-2-实体类" aria-hidden="true">#</a> 3.6.2.实体类</h3><p>与用户端分页查询问题类似，这里也需要定义Query实体、VO实体。课前资料中已经提供好了：</p><p>首先是Query：</p><figure><img src="'+tn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>然后是VO：</p><figure><img src="'+pn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_3-6-3-接口声明" tabindex="-1"><a class="header-anchor" href="#_3-6-3-接口声明" aria-hidden="true">#</a> 3.6.3.接口声明</h3><p>为了与用户端加以区分，我们定义一个新的controller：</p><figure><img src="'+en+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span>


<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>common<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>dto<span class="token punctuation">.</span></span><span class="token class-name">PageDTO</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">QuestionAdminPageQuery</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">QuestionAdminVO</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>learning<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">IInteractionQuestionService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Api</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">ApiOperation</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">ApiParam</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">RequiredArgsConstructor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
 * 互动提问的问题表 前端控制器
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
 *
 * <span class="token keyword">@author</span> 虎哥
 */</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/admin/questions&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags <span class="token operator">=</span> <span class="token string">&quot;互动问答相关接口&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@RequiredArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InteractionQuestionAdminController</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">IInteractionQuestionService</span> questionService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">&quot;管理端分页查询互动问题&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;page&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">PageDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">QuestionAdminVO</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryQuestionPageAdmin</span><span class="token punctuation">(</span><span class="token class-name">QuestionAdminPageQuery</span> query<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> questionService<span class="token punctuation">.</span><span class="token function">queryQuestionPageAdmin</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在<code>tj-learning</code>的<code>com.tianji.learning.service.IInteractionQuestionService</code>中添加方法声明：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">PageDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">QuestionAdminVO</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryQuestionPageAdmin</span><span class="token punctuation">(</span><span class="token class-name">QuestionAdminPageQuery</span> query<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在实现类<code>com.tianji.learning.service.impl.InteractionQuestionServiceImpl</code>中实现方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">PageDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">QuestionAdminVO</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryQuestionsPageForAdmin</span><span class="token punctuation">(</span><span class="token class-name">QuestionAdminPageQuery</span> query<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// TODO</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-6-4-课程名称模糊搜索" tabindex="-1"><a class="header-anchor" href="#_3-6-4-课程名称模糊搜索" aria-hidden="true">#</a> 3.6.4.课程名称模糊搜索</h3><p>在管理端的查询条件中有一个根据课程名称搜索：</p><figure><img src="`+on+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>但是，在interaction_question表中，并没有课程名称字段，只有课程id：</p><figure><img src="'+cn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>那我们该如何实现模糊搜索呢？</p><p>在天机学堂项目中，所有上线的课程数据都会存储到<code>Elasticsearch</code>中，方便用户检索课程。并且在<code>tj-search</code>模块中提供了相关的查询接口。</p><p>其中就有根据课程名称搜索课程信息的功能，并且这个功能还对外开放了一个Feign客户端方便我们调用：</p><figure><img src="'+ln+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这个接口的请求参数就是课程<strong>名称关键字</strong>，其内部会利用elasticsearch的全文检索功能帮我们查询相关课程，并返回课程id集合。这不正是我们所需要的嘛！</p><p>因此，如果前端传递了课程名称关键字，我们的搜索流程如下：</p><ul><li>首先调用SearchClient接口，根据名称关键字搜索，获取courseId集合</li><li>判断结果是否为空 <ul><li>如果为空，直接结束，代表没有搜索到</li><li>如果不为空，则把得到的courseId集合作为条件，结合其它条件，分页查询问题即可</li></ul></li></ul><h3 id="_3-6-5-课程分类数据" tabindex="-1"><a class="header-anchor" href="#_3-6-5-课程分类数据" aria-hidden="true">#</a> 3.6.5.课程分类数据</h3><h4 id="_3-6-5-1-查询思路分析" tabindex="-1"><a class="header-anchor" href="#_3-6-5-1-查询思路分析" aria-hidden="true">#</a> 3.6.5.1.查询思路分析</h4><p>前面分析过，管理端除了要查询到问题，还需要返回问题所属的一系列信息：</p><figure><img src="'+un+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这些数据对应到interaction_question表中，只包含一些id字段：</p><figure><img src="'+kn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>那么我们该如何获取其名称数据呢？</p><ul><li>课程名称：根据course_id到课程微服务查询</li><li>章节名称：根据chapter_id和section_id到课程微服务查询</li><li><strong>分类</strong>：未知</li><li>提问者名称：根据user_id到用户微服务查询</li></ul><p>其中，课程、章节、提问者等信息的查询在以往的业务中我们已经涉及到，不再赘述。但是课程分类信息以前没有查询过。</p><p>课程分类在首页就能看到，共分为3级：</p><figure><img src="'+rn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>每一个课程都与第三级分类关联，因此向上级追溯，也有对应的二级、一级分类。在课程微服务提供的查询课程的接口中，可以看到返回的课程信息中就包含了关联的一级、二级、三级分类：</p><p><img src="'+dn+'" alt="img" loading="lazy"><img src="'+mn+'" alt="img" loading="lazy"><img src="'+gn+'" alt="img" loading="lazy"></p><p>因此，<strong>只要我们查询到了问题所属的课程，就能知道课程关联的三级分类id</strong>，接下来只需要根据分类id查询出分类名称即可。</p><p>而在course-service服务中提供了一个接口，可以查询到所有的分类：</p><figure><img src="'+vn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>需要注意的是：这个返回的是所有课程分类的集合，而课程中只包含3个分类id。因此我们需要自己从所有分类集合中找出课程有关的这三个。</p><p>分析到这里大家应该知道如何做了。不过这里有一个值得思考的点：</p><ul><li>课程分类数据在很多业务中都需要查询，这样的数据如此频繁的查询，有没有性能优化的办法呢？</li></ul><h4 id="_3-6-5-2-多级缓存" tabindex="-1"><a class="header-anchor" href="#_3-6-5-2-多级缓存" aria-hidden="true">#</a> 3.6.5.2.多级缓存</h4><p>相信很多同学都能想到借助于Redis缓存来提高性能，减少数据库压力。非常好！不过，Redis虽然能提高性能，但每次查询缓存还是会<strong>增加网络带宽消耗</strong>，也会存在<strong>网络延迟</strong>。</p><p>而分类数据具备两大特点：</p><ul><li>数据量小</li><li>长时间不会发生变化。</li></ul><p>像这样的数据，除了建立Redis缓存以外，还非常适合做本地缓存（Local Cache）。这样就可以形成多级缓存机制：</p><ul><li>数据查询时优先查询本地缓存</li><li>本地缓存不存在，再查询Redis缓存</li><li>Redis不存在，再去查询数据库。</li></ul><p>如图：</p><figure><img src="'+bn+'" alt="image-20230715203244094" tabindex="0" loading="lazy"><figcaption>image-20230715203244094</figcaption></figure><p>那么，本地缓存究竟是什么呢？又该如何实现呢？</p><p>本地缓存简单来说就是JVM内存的缓存，比如你建立一个HashMap，把数据库查询的数据存入进去。以后优先从这个HashMap查询，一个本地缓存就建立好了。</p><p>本地缓存优点：</p><ul><li>读取本地内存，没有网络开销，速度更快</li></ul><p>本地缓存缺点：</p><ul><li>数据同步困难，一般采用自动过期方案</li><li>存储容量有限、可靠性较低、无法共享</li></ul><p>本地缓存由于无需网络查询，速度非常快。不过由于上述缺点，本地缓存往往适用于<strong>数据量小</strong>、<strong>更新不频繁</strong>的数据。而课程分类恰好符合。</p><h4 id="_3-6-5-3-caffeine" tabindex="-1"><a class="header-anchor" href="#_3-6-5-3-caffeine" aria-hidden="true">#</a> 3.6.5.3.Caffeine</h4><p>当然，我们真正创建本地缓存的时候并不是直接使用HashMap之类的集合，因为维护起来不太方便。而且内存淘汰机制实现起来也比较麻烦。</p><p>所以，我们会使用成熟的框架来完成，比如Caffeine：</p>',319),Rn=n("strong",null,"Caffeine",-1),Pn={href:"https://github.com/ben-manes/caffeine",target:"_blank",rel:"noopener noreferrer"},Vn=a('<p>Caffeine的性能非常好，下图是官方给出的几种常见的本地缓存实现方案的性能对比：</p><figure><img src="'+fn+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>可以看到Caffeine的性能遥遥领先！</p><p>缓存使用的基本API：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">testBasicOps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 构建cache对象</span>
    <span class="token class-name">Cache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cache <span class="token operator">=</span> <span class="token class-name">Caffeine</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 存数据</span>
    cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;gf&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;迪丽热巴&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 取数据</span>
    <span class="token class-name">String</span> gf <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">getIfPresent</span><span class="token punctuation">(</span><span class="token string">&quot;gf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;gf = &quot;</span> <span class="token operator">+</span> gf<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 取数据，包含两个参数：</span>
    <span class="token comment">// 参数一：缓存的key</span>
    <span class="token comment">// 参数二：Lambda表达式，表达式参数就是缓存的key，方法体是查询数据库的逻辑</span>
    <span class="token comment">// 优先根据key查询JVM缓存，如果未命中，则执行参数二的Lambda表达式</span>
    <span class="token class-name">String</span> defaultGF <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;defaultGF&quot;</span><span class="token punctuation">,</span> key <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 根据key去数据库查询数据</span>
        <span class="token keyword">return</span> <span class="token string">&quot;柳岩&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;defaultGF = &quot;</span> <span class="token operator">+</span> defaultGF<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Caffeine既然是缓存的一种，肯定需要有缓存的清除策略，不然的话内存总会有耗尽的时候。</p><p>Caffeine提供了三种缓存驱逐策略：</p><ul><li><strong>基于容量</strong>：设置缓存的数量上限</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 创建缓存对象</span>
<span class="token class-name">Cache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cache <span class="token operator">=</span> <span class="token class-name">Caffeine</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">maximumSize</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 设置缓存大小上限为 1</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>基于时间</strong>：设置缓存的有效时间</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 创建缓存对象</span>
<span class="token class-name">Cache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cache <span class="token operator">=</span> <span class="token class-name">Caffeine</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 设置缓存有效期为 10 秒，从最后一次写入开始计时 </span>
    <span class="token punctuation">.</span><span class="token function">expireAfterWrite</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>基于引用</strong>：设置缓存为软引用或弱引用，利用GC来回收缓存数据。性能较差，不建议使用。</li></ul><p><strong>注意</strong>：在默认情况下，当一个缓存元素过期的时候，Caffeine不会自动立即将其清理和驱逐。而是在一次读或写操作后，或者在空闲时间完成对失效数据的驱逐。</p><h4 id="_3-6-5-4-课程分类的本地缓存" tabindex="-1"><a class="header-anchor" href="#_3-6-5-4-课程分类的本地缓存" aria-hidden="true">#</a> 3.6.5.4.课程分类的本地缓存</h4><p>其实，在<code>tj-api</code>模块中，已经定义好了商品分类的本地缓存：</p><figure><img src="`+yn+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>其中<code>CategoryCacheConfig</code>是Caffeine的缓存配置：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>api<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>benmanes<span class="token punctuation">.</span>caffeine<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">Cache</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>benmanes<span class="token punctuation">.</span>caffeine<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">Caffeine</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>api<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">CategoryCache</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>api<span class="token punctuation">.</span>client<span class="token punctuation">.</span>course<span class="token punctuation">.</span></span><span class="token class-name">CategoryClient</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tianji<span class="token punctuation">.</span>api<span class="token punctuation">.</span>dto<span class="token punctuation">.</span>course<span class="token punctuation">.</span></span><span class="token class-name">CategoryBasicDTO</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Duration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CategoryCacheConfig</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 课程分类的caffeine缓存
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Cache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">CategoryBasicDTO</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">categoryCaches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Caffeine</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">initialCapacity</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 容量限制</span>
                <span class="token punctuation">.</span><span class="token function">maximumSize</span><span class="token punctuation">(</span><span class="token number">10_000</span><span class="token punctuation">)</span> <span class="token comment">// 最大内存限制</span>
                <span class="token punctuation">.</span><span class="token function">expireAfterWrite</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMinutes</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 有效期</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/**
     * 课程分类的缓存工具类
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">CategoryCache</span> <span class="token function">categoryCache</span><span class="token punctuation">(</span>
            <span class="token class-name">Cache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">CategoryBasicDTO</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> categoryCaches<span class="token punctuation">,</span> <span class="token class-name">CategoryClient</span> categoryClient<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CategoryCache</span><span class="token punctuation">(</span>categoryCaches<span class="token punctuation">,</span> categoryClient<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而<code>CategoryCache</code>则是缓存使用的工具类。由于商品分类经常需要根据id查询，因此我根据id查询分类的各种API：</p><figure><img src="`+hn+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这样，在任何微服务中，只要引入<code>tj-api</code>，我们就能非常方便并且高性能的获取分类名称了。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p><strong>注意</strong>：</p><p>在CategoryCache中我们只利用Caffeine实现了本地缓存。当缓存未命中时，我们会去调用course-service提供的CategoryClient提供的方法查询分类数据，而不是去查询Redis。</p><p>如果要实现多级缓存，可以在course-service服务中实现分类查询的接口内添加Redis缓存，大家可以自行实现。</p></div><h4 id="_3-6-5-5-实现分页查询" tabindex="-1"><a class="header-anchor" href="#_3-6-5-5-实现分页查询" aria-hidden="true">#</a> 3.6.5.5.实现分页查询</h4><p>最终，<code>InteractionQuestionServiceImpl</code>代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">PageDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">QuestionAdminVO</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryQuestionPageAdmin</span><span class="token punctuation">(</span><span class="token class-name">QuestionAdminPageQuery</span> query<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1.处理课程名称，得到课程id</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> courseIds <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">getCourseName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        courseIds <span class="token operator">=</span> searchClient<span class="token punctuation">.</span><span class="token function">queryCoursesIdByName</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">getCourseName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>courseIds<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">PageDTO</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token number">0L</span><span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 2.分页查询</span>
    <span class="token class-name">Integer</span> status <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">LocalDateTime</span> begin <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">getBeginTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">LocalDateTime</span> end <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">getEndTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InteractionQuestion</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> <span class="token function">lambdaQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span>courseIds <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">InteractionQuestion</span><span class="token operator">::</span><span class="token function">getCourseId</span><span class="token punctuation">,</span> courseIds<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>status <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">InteractionQuestion</span><span class="token operator">::</span><span class="token function">getStatus</span><span class="token punctuation">,</span> status<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span>begin <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">InteractionQuestion</span><span class="token operator">::</span><span class="token function">getCreateTime</span><span class="token punctuation">,</span> begin<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">lt</span><span class="token punctuation">(</span>end <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">InteractionQuestion</span><span class="token operator">::</span><span class="token function">getCreateTime</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">toMpPageDefaultSortByCreateTimeDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InteractionQuestion</span><span class="token punctuation">&gt;</span></span> records <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>records<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">PageDTO</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 3.准备VO需要的数据：用户数据、课程数据、章节数据</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> userIds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> cIds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> cataIds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3.1.获取各种数据的id集合</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">InteractionQuestion</span> q <span class="token operator">:</span> records<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        userIds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cIds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">getCourseId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cataIds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">getChapterId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cataIds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">getSectionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 3.2.根据id查询用户</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserDTO</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> userClient<span class="token punctuation">.</span><span class="token function">queryUserByIds</span><span class="token punctuation">(</span>userIds<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">UserDTO</span><span class="token punctuation">&gt;</span></span> userMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        userMap <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">UserDTO</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> u <span class="token operator">-&gt;</span> u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 3.3.根据id查询课程</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CourseSimpleInfoDTO</span><span class="token punctuation">&gt;</span></span> cInfos <span class="token operator">=</span> courseClient<span class="token punctuation">.</span><span class="token function">getSimpleInfoList</span><span class="token punctuation">(</span>cIds<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">CourseSimpleInfoDTO</span><span class="token punctuation">&gt;</span></span> cInfoMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>cInfos<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>cInfos<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cInfoMap <span class="token operator">=</span> cInfos<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">CourseSimpleInfoDTO</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> c <span class="token operator">-&gt;</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 3.4.根据id查询章节</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CataSimpleInfoDTO</span><span class="token punctuation">&gt;</span></span> catas <span class="token operator">=</span> catalogueClient<span class="token punctuation">.</span><span class="token function">batchQueryCatalogue</span><span class="token punctuation">(</span>cataIds<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cataMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>catas<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>catas<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cataMap <span class="token operator">=</span> catas<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">CataSimpleInfoDTO</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> <span class="token class-name">CataSimpleInfoDTO</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token comment">// 4.封装VO</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">QuestionAdminVO</span><span class="token punctuation">&gt;</span></span> voList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>records<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">InteractionQuestion</span> q <span class="token operator">:</span> records<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 4.1.将PO转VO，属性拷贝</span>
        <span class="token class-name">QuestionAdminVO</span> vo <span class="token operator">=</span> <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyBean</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token class-name">QuestionAdminVO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        voList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>vo<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 4.2.用户信息</span>
        <span class="token class-name">UserDTO</span> user <span class="token operator">=</span> userMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            vo<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 4.3.课程信息以及分类信息</span>
        <span class="token class-name">CourseSimpleInfoDTO</span> cInfo <span class="token operator">=</span> cInfoMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">getCourseId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cInfo <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            vo<span class="token punctuation">.</span><span class="token function">setCourseName</span><span class="token punctuation">(</span>cInfo<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            vo<span class="token punctuation">.</span><span class="token function">setCategoryName</span><span class="token punctuation">(</span>categoryCache<span class="token punctuation">.</span><span class="token function">getCategoryNames</span><span class="token punctuation">(</span>cInfo<span class="token punctuation">.</span><span class="token function">getCategoryIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 4.4.章节信息</span>
        vo<span class="token punctuation">.</span><span class="token function">setChapterName</span><span class="token punctuation">(</span>cataMap<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">getChapterId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vo<span class="token punctuation">.</span><span class="token function">setSectionName</span><span class="token punctuation">(</span>cataMap<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">getSectionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token class-name">PageDTO</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> voList<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-7-管理端隐藏或显示问题-练习" tabindex="-1"><a class="header-anchor" href="#_3-7-管理端隐藏或显示问题-练习" aria-hidden="true">#</a> 3.7.管理端隐藏或显示问题（练习）</h2><h3 id="_3-7-1-接口分析" tabindex="-1"><a class="header-anchor" href="#_3-7-1-接口分析" aria-hidden="true">#</a> 3.7.1.接口分析</h3><p>在管理端的互动问题列表中，管理员可以隐藏某个问题，这样就不会在用户端页面展示了：</p><figure><img src="`+_n+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>由于<code>interaction_question</code>表中有一个<code>hidden</code>字段来表示是否隐藏：</p><figure><img src="'+wn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>因此，本质来说，这个接口是一个修改某字段值的接口，并不复杂。</p><p>我们按照Restful的风格来设定，接口信息如下：</p><ul><li><strong>接口地址</strong>:<code>/admin/questions/{id}/hidden/{hidden}</code></li><li><strong>请求方式</strong>:<code>PUT</code></li><li><strong>请求参数</strong>: 路径占位符参数 <ul><li>id：问题id</li><li>hidden：是否隐藏</li></ul></li></ul><h3 id="_3-7-2-代码实现-练习" tabindex="-1"><a class="header-anchor" href="#_3-7-2-代码实现-练习" aria-hidden="true">#</a> 3.7.2.代码实现（练习）</h3><h2 id="_3-8-管理端根据id查询问题详情-练习" tabindex="-1"><a class="header-anchor" href="#_3-8-管理端根据id查询问题详情-练习" aria-hidden="true">#</a> 3.8.管理端根据id查询问题详情（练习）</h2><h3 id="_3-8-1-接口分析" tabindex="-1"><a class="header-anchor" href="#_3-8-1-接口分析" aria-hidden="true">#</a> 3.8.1.接口分析</h3><p>在管理端的问题管理页面，点击查看按钮就会进入问题详情页：</p><figure><img src="'+In+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>问题详情页如下：</p><figure><img src="'+xn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>可以看到，这里需要查询的数据还是比较多的，包含：</p><ul><li>问题标题</li><li>问题描述</li><li>提问者信息 <ul><li>id</li><li>昵称</li><li>头像</li></ul></li><li>课程三级分类</li><li>课程名称</li><li><strong>课程负责老师</strong></li><li>课程所属章节</li><li>回答数量</li><li>用户端是否显示</li></ul><p>返回值与管理端分页查询基本一致，多了一个课程负责老师信息。所以我们沿用之前的<code>QuestionAdminVO</code>即可。但是需要添加一个课程负责老师的字段：</p><figure><img src="'+Cn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>虽然用户端也有根据id查询问题，但是返回值与用户端存在较大差异，所以我们需要另外设计一个接口。</p><p>按照Restful风格，接口信息如下：</p><ul><li><strong>接口地址</strong>: <code>/admin/questions/{id}</code></li><li><strong>请求方式</strong>: <code>GET</code></li><li><strong>请求参数</strong>: 路径占位符格式</li><li><strong>返回值</strong>：与分页查询共享VO，这里不再赘述</li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p><strong>注意</strong>：</p><p>问题表中有一个status字段，标记管理员是否已经查看过该问题。因此每当调用根据id查询问题接口，我们可以认为管理员查看了该问题，应该将问题status标记为<strong>已查看</strong>。</p></div><h3 id="_3-8-2-代码实现-练习" tabindex="-1"><a class="header-anchor" href="#_3-8-2-代码实现-练习" aria-hidden="true">#</a> 3.8.2.代码实现（练习）</h3><h1 id="_4-评论相关接口-练习" tabindex="-1"><a class="header-anchor" href="#_4-评论相关接口-练习" aria-hidden="true">#</a> 4.评论相关接口（练习）</h1><p>评论相关接口有四个：</p><ul><li>新增回答或评论</li><li>分页查询回答或评论</li><li>管理端分页查询回答或评论</li><li>管理端隐藏或显示回答或评论</li></ul><h2 id="_4-1-新增回答或评论-练习" tabindex="-1"><a class="header-anchor" href="#_4-1-新增回答或评论-练习" aria-hidden="true">#</a> 4.1.新增回答或评论（练习）</h2><h3 id="_4-1-1-接口分析" tabindex="-1"><a class="header-anchor" href="#_4-1-1-接口分析" aria-hidden="true">#</a> 4.1.1.接口分析</h3><p>先来看下回答或评论的表单原型图：</p><figure><img src="'+Tn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>回复本身只有一个简单属性：</p><ul><li>回复内容</li></ul><p>一个功能属性：</p><ul><li>是否匿名</li></ul><p>一个关联属性：</p><ul><li>问题id：回答要关联某个问题</li></ul><p>如果是针对某个回答发表的评论，则有新的关联属性：</p><ul><li>回答id：评论是在哪个回答下面的</li><li>目标评论id：当前评论是针对哪一条评论的</li><li>目标用户id：当前评论是针对哪一个用户的</li></ul><p>如果是回答，则只需要前3个属性即可。如果是评论，则还需要补充最后的3个属性。</p><p>由于我们把会回答和评论接口合并，因此以上属性都应该作为表单参数。</p><p>需要注意的是，在新增回答或评论时，除了要把数据写入<code>interaction_reply</code>表，还有几件事情要做：</p><ul><li>判断当前提交的是否是回答，如果是需要在<code>interaction_question</code>中记录最新一次回答的id</li><li>判断提交评论的用户是否是学生，如果是标记问题状态为未查看</li></ul><p>因此我们的业务流程应该是这样的：</p><figure><img src="'+qn+'" alt="image-20230715203339614" tabindex="0" loading="lazy"><figcaption>image-20230715203339614</figcaption></figure><p>为了方便判断是否是学生提交的回答，我们可以在前端传递一个参数：</p><ul><li>isStudent：标记当前回答是否是学生提交的</li></ul><p>综上，按照Restful的规范设计，接口信息如下：</p><figure><img src="'+On+'" alt="image-20230715203402623" tabindex="0" loading="lazy"><figcaption>image-20230715203402623</figcaption></figure><h3 id="_4-1-2-实体类" tabindex="-1"><a class="header-anchor" href="#_4-1-2-实体类" aria-hidden="true">#</a> 4.1.2.实体类</h3><p>按照前面的接口分析，首先定义请求参数DTO，在课前资料中已经提供了：</p><figure><img src="'+Qn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_4-1-3-代码实现" tabindex="-1"><a class="header-anchor" href="#_4-1-3-代码实现" aria-hidden="true">#</a> 4.1.3.代码实现</h3><h2 id="_4-2-分页查询回答或评论列表-练习" tabindex="-1"><a class="header-anchor" href="#_4-2-分页查询回答或评论列表-练习" aria-hidden="true">#</a> 4.2.分页查询回答或评论列表（练习）</h2><h3 id="_4-2-1-接口分析" tabindex="-1"><a class="header-anchor" href="#_4-2-1-接口分析" aria-hidden="true">#</a> 4.2.1.接口分析</h3><p>在问题详情页，除了展示问题详情外，最重要的就是回答列表了，原型图如下：</p><figure><img src="'+Mn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>我们先来分析回答列表，需要展示的内容包括：</p><ul><li>回答id</li><li>回答内容</li><li>是否匿名</li><li>回答人信息（如果是匿名，则无需返回） <ul><li>id</li><li>昵称</li><li>头像</li></ul></li><li>回答时间</li><li>评论数量</li><li>点赞数量</li></ul><p>请求参数就是问题的id。不过需要注意的是，一个问题下的回答比较多，所以一次只能展示一部分，更多数据会采用滚动懒加载模式。简单来说说就是分页查询，所以也要带上分页参数。</p><p>再来看一下回答下的评论列表：</p><figure><img src="'+Ln+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>仔细观察后可以发现，需要展示的数据与回答及其相似，都包括：</p><ul><li>评论id</li><li>评论内容</li><li>是否匿名</li><li>评论人信息（如果是匿名，则无需返回） <ul><li>id</li><li>昵称</li><li>头像</li></ul></li><li>回答时间</li><li>评论数量(无）</li><li>点赞数量</li><li><strong>目标用户昵称（评论特有）</strong></li></ul><p>从返回结果来看：相比回答列表，评论无需展示评论下的评论数量，但是需要展示目标用户的昵称，因为评论是针对某个目标的。</p><p>从查询参数来看：查询评论需要知道回答的id，这点与查询回答列表不太一样。</p><p>综上，按照Restful的规范设计，接口信息如下：</p><figure><img src="'+En+'" alt="image-20230715203512761" tabindex="0" loading="lazy"><figcaption>image-20230715203512761</figcaption></figure><div class="hint-container warning"><p class="hint-container-title">注意</p><p><strong>注意：</strong></p><p>分页查询时默认要按照点赞次数排序。</p><p>页面展示点赞按钮时，如果点赞过会高亮显示。因此我们要在返回值中标记当前用户是否点赞过这条评论或回答。</p><p>但点赞功能我们暂未实现，这两部分大家暂时无需实现。</p></div><h3 id="_4-2-2-实体类" tabindex="-1"><a class="header-anchor" href="#_4-2-2-实体类" aria-hidden="true">#</a> 4.2.2.实体类</h3><p>请求入参，是一个Query实体，在课前资料的query目录下：</p><figure><img src="'+jn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>返回值，是一个VO实体，在课前资料的vo目录下：</p><figure><img src="'+Nn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_4-2-3-代码实现" tabindex="-1"><a class="header-anchor" href="#_4-2-3-代码实现" aria-hidden="true">#</a> 4.2.3.代码实现</h3><h2 id="_4-3-管理端分页查询回答或评论列表-练习" tabindex="-1"><a class="header-anchor" href="#_4-3-管理端分页查询回答或评论列表-练习" aria-hidden="true">#</a> 4.3.管理端分页查询回答或评论列表（练习）</h2><h3 id="_4-3-1-接口分析" tabindex="-1"><a class="header-anchor" href="#_4-3-1-接口分析" aria-hidden="true">#</a> 4.3.1.接口分析</h3><p>管理端查询回答列表原型如下：</p><figure><img src="'+Sn+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>可以看到，返回的数据格式包含：</p><ul><li>评论id</li><li>评论内容</li><li>评论人信息 <ul><li>id</li><li>昵称</li><li>头像</li><li>类型</li></ul></li><li>回答时间</li><li>评论数量（回答时有）</li><li>点赞数量</li><li>目标用户昵称（评论特有）</li><li><strong>是否被隐藏（管理端特有）</strong></li></ul><p>与用户端查询几乎完全一致。</p><p>那有同学会有疑问了，这里为什么不使用同一个接口？</p><p>原因有两点：</p><ul><li>管理端在统计评论数量的时候，被隐藏的评论也要统计（用户端不统计隐藏回答）</li><li>管理端无视匿名，所有评论都要返回用户信息；用户端匿名评论不返回用户信息。</li></ul><p>所以大家在实现的时候，基本逻辑可以与用户端分页一致，但统计评论数量、处理用户信息时，需要区别对待。</p><p><strong>为了减少代码重复，大家可以对代码做改造抽取，不要重复copy代码</strong>。</p><figure><img src="'+Un+'" alt="image-20230715203627293" tabindex="0" loading="lazy"><figcaption>image-20230715203627293</figcaption></figure><h3 id="_4-3-2-实体" tabindex="-1"><a class="header-anchor" href="#_4-3-2-实体" aria-hidden="true">#</a> 4.3.2.实体</h3><p>请求参数和返回值实体与用户端分页查询基本一致，因此这里不再重复定义实体。不过返回值VO中要添加<code>hidden</code>字段，标示评论是否被隐藏。</p><h2 id="_4-4-管理端显示或隐藏评论-练习" tabindex="-1"><a class="header-anchor" href="#_4-4-管理端显示或隐藏评论-练习" aria-hidden="true">#</a> 4.4.管理端显示或隐藏评论（练习）</h2><h3 id="_4-4-1-接口分析" tabindex="-1"><a class="header-anchor" href="#_4-4-1-接口分析" aria-hidden="true">#</a> 4.4.1.接口分析</h3><p>与问题类似，管理员也可以显示或隐藏某个评论或评论：</p><figure><img src="'+An+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>与隐藏问题类似，同样是修改hidden字段。因此按照Restful风格设计接口如下：</p><ul><li><strong>接口地址：</strong><code>/admin/replies/{id}/hidden/{hidden}</code></li><li><strong>请求方式：</strong><code>PUT</code></li><li>**请求参数：**路径占位符参数 <ul><li>id：回答或评论id</li><li>hidden：是否被隐藏</li></ul></li></ul><p><strong>注意</strong>：如果隐藏的是回答，则回答下的评论也要隐藏</p><h3 id="_4-4-2-代码实现-练习" tabindex="-1"><a class="header-anchor" href="#_4-4-2-代码实现-练习" aria-hidden="true">#</a> 4.4.2.代码实现（练习）</h3>',124);function Bn(Fn,Hn){const t=e("ExternalLinkIcon");return o(),c("div",null,[zn,n("p",null,[Rn,s("是一个基于Java8开发的，提供了近乎最佳命中率的高性能的本地缓存库。目前Spring内部的缓存使用的就是Caffeine。GitHub地址："),n("a",Pn,[s("https://github.com/ben-manes/caffeine"),i(t)])]),Vn])}const Kn=p(Dn,[["render",Bn],["__file","day05-问答系统.html.vue"]]);export{Kn as default};
